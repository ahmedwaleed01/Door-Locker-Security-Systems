
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00002e26  00002eba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800188  00800188  00002fe2  2**0
                  ALLOC
  3 .stab         00002844  00000000  00000000  00002fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000130e  00000000  00000000  00005828  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000092d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a659  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b830  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c654  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 0c 	call	0x192e	; 0x192e <main>
      8a:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DcMotor_Init>:

#include "DcMotor.h"
#include "GPIO.h"
#include "PWM.h"

void DcMotor_Init(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/*Set Direction pins of motor to be output */
	GPIO_setupPinDirection(INPUT_PORT_ONE_MOTOR,INPUT_PIN_ONE_MOTOR,PIN_OUTPUT);
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 40 09 	call	0x1280	; 0x1280 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(INPUT_PORT_TWO_MOTOR,INPUT_PIN_TWO_MOTOR,PIN_OUTPUT);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	0e 94 40 09 	call	0x1280	; 0x1280 <GPIO_setupPinDirection>
    /*Initlize PWM Timer0 with duty cycle equal 0% */
	PWM_Timer0_Start(0);
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	0e 94 55 07 	call	0xeaa	; 0xeaa <PWM_Timer0_Start>
	/*Initlize Motor To be stopped */
	GPIO_writePin(INPUT_PORT_ONE_MOTOR,INPUT_PIN_ONE_MOTOR,LOGIC_LOW);
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	40 e0       	ldi	r20, 0x00	; 0
     e56:	0e 94 2b 0a 	call	0x1456	; 0x1456 <GPIO_writePin>
	GPIO_writePin(INPUT_PORT_TWO_MOTOR,INPUT_PIN_TWO_MOTOR,LOGIC_LOW);
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	0e 94 2b 0a 	call	0x1456	; 0x1456 <GPIO_writePin>
}
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed){
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <DcMotor_Rotate+0x6>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	6a 83       	std	Y+2, r22	; 0x02
	/*set the modes for motor to be clock or anti or at rest */
	GPIO_writePin(INPUT_PORT_ONE_MOTOR,INPUT_PIN_ONE_MOTOR,(state>>1)&0x01);
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	86 95       	lsr	r24
     e7c:	98 2f       	mov	r25, r24
     e7e:	91 70       	andi	r25, 0x01	; 1
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	49 2f       	mov	r20, r25
     e86:	0e 94 2b 0a 	call	0x1456	; 0x1456 <GPIO_writePin>
	GPIO_writePin(INPUT_PORT_TWO_MOTOR,INPUT_PIN_TWO_MOTOR,state&0x01);
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	98 2f       	mov	r25, r24
     e8e:	91 70       	andi	r25, 0x01	; 1
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	49 2f       	mov	r20, r25
     e96:	0e 94 2b 0a 	call	0x1456	; 0x1456 <GPIO_writePin>
	/*Set the speed for motor by giving it to PWM function*/
	PWM_Timer0_Start(speed);
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	0e 94 55 07 	call	0xeaa	; 0xeaa <PWM_Timer0_Start>
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <PWM_Timer0_Start>:

#include "PWM.h"
#include "avr/io.h"
#include "GPIO.h"

void PWM_Timer0_Start(uint8 duty_cycle){
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	0f 92       	push	r0
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	89 83       	std	Y+1, r24	; 0x01

	TCNT0=0;
     eba:	e2 e5       	ldi	r30, 0x52	; 82
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	10 82       	st	Z, r1
	OCR0=(((float)duty_cycle)/100)*255;
     ec0:	0c e5       	ldi	r16, 0x5C	; 92
     ec2:	10 e0       	ldi	r17, 0x00	; 0
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	a0 e0       	ldi	r26, 0x00	; 0
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	bc 01       	movw	r22, r24
     edc:	cd 01       	movw	r24, r26
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	48 ec       	ldi	r20, 0xC8	; 200
     ee4:	52 e4       	ldi	r21, 0x42	; 66
     ee6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	bc 01       	movw	r22, r24
     ef0:	cd 01       	movw	r24, r26
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	4f e7       	ldi	r20, 0x7F	; 127
     ef8:	53 e4       	ldi	r21, 0x43	; 67
     efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	f8 01       	movw	r30, r16
     f10:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	63 e0       	ldi	r22, 0x03	; 3
     f16:	41 e0       	ldi	r20, 0x01	; 1
     f18:	0e 94 40 09 	call	0x1280	; 0x1280 <GPIO_setupPinDirection>
	TCCR0=(1<<WGM00)|(1<<COM01)|(1<<CS01);
     f1c:	e3 e5       	ldi	r30, 0x53	; 83
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	82 e6       	ldi	r24, 0x62	; 98
     f22:	80 83       	st	Z, r24

}
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	08 95       	ret

00000f30 <__vector_7>:


static volatile void (*g_callBackPtr)(void) = NULL_PTR;

#ifdef  Compare_unit_A
ISR(TIMER1_COMPA_vect){
     f30:	1f 92       	push	r1
     f32:	0f 92       	push	r0
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	0f 92       	push	r0
     f38:	11 24       	eor	r1, r1
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     f5a:	80 91 88 01 	lds	r24, 0x0188
     f5e:	90 91 89 01 	lds	r25, 0x0189
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	29 f0       	breq	.+10     	; 0xf70 <__vector_7+0x40>
	{
		/* Call the Call Back function */
		(*g_callBackPtr)();
     f66:	e0 91 88 01 	lds	r30, 0x0188
     f6a:	f0 91 89 01 	lds	r31, 0x0189
     f6e:	09 95       	icall
	}
}
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	ff 91       	pop	r31
     f76:	ef 91       	pop	r30
     f78:	bf 91       	pop	r27
     f7a:	af 91       	pop	r26
     f7c:	9f 91       	pop	r25
     f7e:	8f 91       	pop	r24
     f80:	7f 91       	pop	r23
     f82:	6f 91       	pop	r22
     f84:	5f 91       	pop	r21
     f86:	4f 91       	pop	r20
     f88:	3f 91       	pop	r19
     f8a:	2f 91       	pop	r18
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	0f 90       	pop	r0
     f92:	1f 90       	pop	r1
     f94:	18 95       	reti

00000f96 <__vector_9>:
		(*g_callBackPtr)();
	}
}
#endif

ISR(TIMER1_OVF_vect){
     f96:	1f 92       	push	r1
     f98:	0f 92       	push	r0
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	0f 92       	push	r0
     f9e:	11 24       	eor	r1, r1
     fa0:	2f 93       	push	r18
     fa2:	3f 93       	push	r19
     fa4:	4f 93       	push	r20
     fa6:	5f 93       	push	r21
     fa8:	6f 93       	push	r22
     faa:	7f 93       	push	r23
     fac:	8f 93       	push	r24
     fae:	9f 93       	push	r25
     fb0:	af 93       	push	r26
     fb2:	bf 93       	push	r27
     fb4:	ef 93       	push	r30
     fb6:	ff 93       	push	r31
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     fc0:	80 91 88 01 	lds	r24, 0x0188
     fc4:	90 91 89 01 	lds	r25, 0x0189
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	29 f0       	breq	.+10     	; 0xfd6 <__vector_9+0x40>
	{
		/* Call the Call Back function */
		(*g_callBackPtr)();
     fcc:	e0 91 88 01 	lds	r30, 0x0188
     fd0:	f0 91 89 01 	lds	r31, 0x0189
     fd4:	09 95       	icall
	}
}
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	ff 91       	pop	r31
     fdc:	ef 91       	pop	r30
     fde:	bf 91       	pop	r27
     fe0:	af 91       	pop	r26
     fe2:	9f 91       	pop	r25
     fe4:	8f 91       	pop	r24
     fe6:	7f 91       	pop	r23
     fe8:	6f 91       	pop	r22
     fea:	5f 91       	pop	r21
     fec:	4f 91       	pop	r20
     fee:	3f 91       	pop	r19
     ff0:	2f 91       	pop	r18
     ff2:	0f 90       	pop	r0
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	0f 90       	pop	r0
     ff8:	1f 90       	pop	r1
     ffa:	18 95       	reti

00000ffc <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	00 d0       	rcall	.+0      	; 0x1002 <Timer1_init+0x6>
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	9a 83       	std	Y+2, r25	; 0x02
    1008:	89 83       	std	Y+1, r24	; 0x01


	/* set initial value for the timer */
	TCNT1H=Config_Ptr->initial_value>>8;
    100a:	ad e4       	ldi	r26, 0x4D	; 77
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e9 81       	ldd	r30, Y+1	; 0x01
    1010:	fa 81       	ldd	r31, Y+2	; 0x02
    1012:	80 81       	ld	r24, Z
    1014:	91 81       	ldd	r25, Z+1	; 0x01
    1016:	89 2f       	mov	r24, r25
    1018:	99 27       	eor	r25, r25
    101a:	8c 93       	st	X, r24
	TCNT1L=Config_Ptr->initial_value&0x0f;
    101c:	ac e4       	ldi	r26, 0x4C	; 76
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e9 81       	ldd	r30, Y+1	; 0x01
    1022:	fa 81       	ldd	r31, Y+2	; 0x02
    1024:	80 81       	ld	r24, Z
    1026:	91 81       	ldd	r25, Z+1	; 0x01
    1028:	8f 70       	andi	r24, 0x0F	; 15
    102a:	8c 93       	st	X, r24

	/* Set Prescalar for the timer*/
	TCCR1B=(Config_Ptr->prescaler);
    102c:	ae e4       	ldi	r26, 0x4E	; 78
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e9 81       	ldd	r30, Y+1	; 0x01
    1032:	fa 81       	ldd	r31, Y+2	; 0x02
    1034:	84 81       	ldd	r24, Z+4	; 0x04
    1036:	8c 93       	st	X, r24



	if(Config_Ptr->mode==CTC){
    1038:	e9 81       	ldd	r30, Y+1	; 0x01
    103a:	fa 81       	ldd	r31, Y+2	; 0x02
    103c:	85 81       	ldd	r24, Z+5	; 0x05
    103e:	84 30       	cpi	r24, 0x04	; 4
    1040:	c9 f4       	brne	.+50     	; 0x1074 <Timer1_init+0x78>
		/* Choose the compare mode */
		TCCR1B|=(1<<WGM12);
    1042:	ae e4       	ldi	r26, 0x4E	; 78
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	ee e4       	ldi	r30, 0x4E	; 78
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	88 60       	ori	r24, 0x08	; 8
    104e:	8c 93       	st	X, r24
		/* Set Compare Value */
		OCR1A=Config_Ptr->compare_value;
    1050:	aa e4       	ldi	r26, 0x4A	; 74
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e9 81       	ldd	r30, Y+1	; 0x01
    1056:	fa 81       	ldd	r31, Y+2	; 0x02
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	93 81       	ldd	r25, Z+3	; 0x03
    105c:	11 96       	adiw	r26, 0x01	; 1
    105e:	9c 93       	st	X, r25
    1060:	8e 93       	st	-X, r24

#ifdef  Compare_unit_A
		/*Toggle OC1A on compare match*/
		TCCR1A=(1<<COM1A0);
    1062:	ef e4       	ldi	r30, 0x4F	; 79
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 e4       	ldi	r24, 0x40	; 64
    1068:	80 83       	st	Z, r24
		/* Enable Interrupt Output Compare A Match */
		TIMSK=(1<<OCIE1A);
    106a:	e9 e5       	ldi	r30, 0x59	; 89
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 e1       	ldi	r24, 0x10	; 16
    1070:	80 83       	st	Z, r24
    1072:	09 c0       	rjmp	.+18     	; 0x1086 <Timer1_init+0x8a>
		TCCR1A=(1<<COM1B0);
		/* Enable Interrupt Output Compare B Match */
		TIMSK=(1<<OCIE1B);
#endif

	}else if(Config_Ptr->mode==NORMAL){
    1074:	e9 81       	ldd	r30, Y+1	; 0x01
    1076:	fa 81       	ldd	r31, Y+2	; 0x02
    1078:	85 81       	ldd	r24, Z+5	; 0x05
    107a:	88 23       	and	r24, r24
    107c:	21 f4       	brne	.+8      	; 0x1086 <Timer1_init+0x8a>
		/* Enable Interrupt OverFlow */
		TIMSK=(1<<TOIE1);
    107e:	e9 e5       	ldi	r30, 0x59	; 89
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	84 e0       	ldi	r24, 0x04	; 4
    1084:	80 83       	st	Z, r24
	}

}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <Timer1_setCallBack+0x6>
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	90 93 89 01 	sts	0x0189, r25
    10a6:	80 93 88 01 	sts	0x0188, r24
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <Timer1_deInit>:

void Timer1_deInit(void){
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
	TIMSK=0;
    10bc:	e9 e5       	ldi	r30, 0x59	; 89
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	10 82       	st	Z, r1
	OCR1B=0;
    10c2:	e8 e4       	ldi	r30, 0x48	; 72
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	11 82       	std	Z+1, r1	; 0x01
    10c8:	10 82       	st	Z, r1
	OCR1A=0;
    10ca:	ea e4       	ldi	r30, 0x4A	; 74
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	11 82       	std	Z+1, r1	; 0x01
    10d0:	10 82       	st	Z, r1
	TCCR1B=0;
    10d2:	ee e4       	ldi	r30, 0x4E	; 78
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	10 82       	st	Z, r1
	TCCR1B=0;
    10d8:	ee e4       	ldi	r30, 0x4E	; 78
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	10 82       	st	Z, r1
	TCNT1=0;
    10de:	ec e4       	ldi	r30, 0x4C	; 76
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	11 82       	std	Z+1, r1	; 0x01
    10e4:	10 82       	st	Z, r1
}
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <Buzzer_init>:


#include "buzzer.h"
#include "gpio.h"

void Buzzer_init(){
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTC_ID,PIN5_ID,PIN_OUTPUT);
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	65 e0       	ldi	r22, 0x05	; 5
    10f8:	41 e0       	ldi	r20, 0x01	; 1
    10fa:	0e 94 40 09 	call	0x1280	; 0x1280 <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID,PIN5_ID,LOGIC_LOW);
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	65 e0       	ldi	r22, 0x05	; 5
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	0e 94 2b 0a 	call	0x1456	; 0x1456 <GPIO_writePin>
}
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <Buzzer_on>:

void Buzzer_on(void){
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID,PIN5_ID,LOGIC_HIGH);
    1116:	82 e0       	ldi	r24, 0x02	; 2
    1118:	65 e0       	ldi	r22, 0x05	; 5
    111a:	41 e0       	ldi	r20, 0x01	; 1
    111c:	0e 94 2b 0a 	call	0x1456	; 0x1456 <GPIO_writePin>
}
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <Buzzer_off>:

void Buzzer_off(void){
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID,PIN5_ID,LOGIC_LOW);
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	65 e0       	ldi	r22, 0x05	; 5
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	0e 94 2b 0a 	call	0x1456	; 0x1456 <GPIO_writePin>
}
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <EEPROM_writeByte>:
 */

#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data){
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <EEPROM_writeByte+0x6>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <EEPROM_writeByte+0x8>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	9a 83       	std	Y+2, r25	; 0x02
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    1150:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    1154:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <TWI_getStatus>
    1158:	88 30       	cpi	r24, 0x08	; 8
    115a:	11 f0       	breq	.+4      	; 0x1160 <EEPROM_writeByte+0x22>
		return ERROR;
    115c:	1c 82       	std	Y+4, r1	; 0x04
    115e:	28 c0       	rjmp	.+80     	; 0x11b0 <EEPROM_writeByte+0x72>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	80 70       	andi	r24, 0x00	; 0
    1166:	97 70       	andi	r25, 0x07	; 7
    1168:	88 0f       	add	r24, r24
    116a:	89 2f       	mov	r24, r25
    116c:	88 1f       	adc	r24, r24
    116e:	99 0b       	sbc	r25, r25
    1170:	91 95       	neg	r25
    1172:	80 6a       	ori	r24, 0xA0	; 160
    1174:	0e 94 6e 15 	call	0x2adc	; 0x2adc <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1178:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <TWI_getStatus>
    117c:	88 31       	cpi	r24, 0x18	; 24
    117e:	11 f0       	breq	.+4      	; 0x1184 <EEPROM_writeByte+0x46>
		return ERROR;
    1180:	1c 82       	std	Y+4, r1	; 0x04
    1182:	16 c0       	rjmp	.+44     	; 0x11b0 <EEPROM_writeByte+0x72>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr));
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	0e 94 6e 15 	call	0x2adc	; 0x2adc <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    118a:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <TWI_getStatus>
    118e:	88 32       	cpi	r24, 0x28	; 40
    1190:	11 f0       	breq	.+4      	; 0x1196 <EEPROM_writeByte+0x58>
		return ERROR;
    1192:	1c 82       	std	Y+4, r1	; 0x04
    1194:	0d c0       	rjmp	.+26     	; 0x11b0 <EEPROM_writeByte+0x72>

	/* write byte to eeprom */
	TWI_writeByte(u8data);
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	0e 94 6e 15 	call	0x2adc	; 0x2adc <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    119c:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <TWI_getStatus>
    11a0:	88 32       	cpi	r24, 0x28	; 40
    11a2:	11 f0       	breq	.+4      	; 0x11a8 <EEPROM_writeByte+0x6a>
		return ERROR;
    11a4:	1c 82       	std	Y+4, r1	; 0x04
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <EEPROM_writeByte+0x72>

	/* Send the Stop Bit */
	TWI_stop();
    11a8:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <TWI_stop>

	return SUCCESS;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	8c 83       	std	Y+4, r24	; 0x04
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data){
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <EEPROM_readByte+0x6>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <EEPROM_readByte+0x8>
    11c8:	0f 92       	push	r0
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	7c 83       	std	Y+4, r23	; 0x04
    11d4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    11d6:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    11da:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <TWI_getStatus>
    11de:	88 30       	cpi	r24, 0x08	; 8
    11e0:	11 f0       	breq	.+4      	; 0x11e6 <EEPROM_readByte+0x26>
		return ERROR;
    11e2:	1d 82       	std	Y+5, r1	; 0x05
    11e4:	44 c0       	rjmp	.+136    	; 0x126e <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	80 70       	andi	r24, 0x00	; 0
    11ec:	97 70       	andi	r25, 0x07	; 7
    11ee:	88 0f       	add	r24, r24
    11f0:	89 2f       	mov	r24, r25
    11f2:	88 1f       	adc	r24, r24
    11f4:	99 0b       	sbc	r25, r25
    11f6:	91 95       	neg	r25
    11f8:	80 6a       	ori	r24, 0xA0	; 160
    11fa:	0e 94 6e 15 	call	0x2adc	; 0x2adc <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    11fe:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <TWI_getStatus>
    1202:	88 31       	cpi	r24, 0x18	; 24
    1204:	11 f0       	breq	.+4      	; 0x120a <EEPROM_readByte+0x4a>
		return ERROR;
    1206:	1d 82       	std	Y+5, r1	; 0x05
    1208:	32 c0       	rjmp	.+100    	; 0x126e <EEPROM_readByte+0xae>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr));
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	0e 94 6e 15 	call	0x2adc	; 0x2adc <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1210:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <TWI_getStatus>
    1214:	88 32       	cpi	r24, 0x28	; 40
    1216:	11 f0       	breq	.+4      	; 0x121c <EEPROM_readByte+0x5c>
		return ERROR;
    1218:	1d 82       	std	Y+5, r1	; 0x05
    121a:	29 c0       	rjmp	.+82     	; 0x126e <EEPROM_readByte+0xae>

	TWI_start();
    121c:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
    1220:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <TWI_getStatus>
    1224:	80 31       	cpi	r24, 0x10	; 16
    1226:	11 f0       	breq	.+4      	; 0x122c <EEPROM_readByte+0x6c>
		return ERROR;
    1228:	1d 82       	std	Y+5, r1	; 0x05
    122a:	21 c0       	rjmp	.+66     	; 0x126e <EEPROM_readByte+0xae>

	 TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	9a 81       	ldd	r25, Y+2	; 0x02
    1230:	80 70       	andi	r24, 0x00	; 0
    1232:	97 70       	andi	r25, 0x07	; 7
    1234:	88 0f       	add	r24, r24
    1236:	89 2f       	mov	r24, r25
    1238:	88 1f       	adc	r24, r24
    123a:	99 0b       	sbc	r25, r25
    123c:	91 95       	neg	r25
    123e:	81 6a       	ori	r24, 0xA1	; 161
    1240:	0e 94 6e 15 	call	0x2adc	; 0x2adc <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1244:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <TWI_getStatus>
    1248:	80 34       	cpi	r24, 0x40	; 64
    124a:	11 f0       	breq	.+4      	; 0x1250 <EEPROM_readByte+0x90>
		return ERROR;
    124c:	1d 82       	std	Y+5, r1	; 0x05
    124e:	0f c0       	rjmp	.+30     	; 0x126e <EEPROM_readByte+0xae>

	/* read byte from eeprom */
	*u8data= TWI_readByteWithNACK();
    1250:	0e 94 98 15 	call	0x2b30	; 0x2b30 <TWI_readByteWithNACK>
    1254:	eb 81       	ldd	r30, Y+3	; 0x03
    1256:	fc 81       	ldd	r31, Y+4	; 0x04
    1258:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    125a:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <TWI_getStatus>
    125e:	88 35       	cpi	r24, 0x58	; 88
    1260:	11 f0       	breq	.+4      	; 0x1266 <EEPROM_readByte+0xa6>
		return ERROR;
    1262:	1d 82       	std	Y+5, r1	; 0x05
    1264:	04 c0       	rjmp	.+8      	; 0x126e <EEPROM_readByte+0xae>

	/* Send the Stop Bit */
	TWI_stop();
    1266:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <TWI_stop>

	return SUCCESS;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	8d 83       	std	Y+5, r24	; 0x05
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	00 d0       	rcall	.+0      	; 0x1286 <GPIO_setupPinDirection+0x6>
    1286:	00 d0       	rcall	.+0      	; 0x1288 <GPIO_setupPinDirection+0x8>
    1288:	0f 92       	push	r0
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	6a 83       	std	Y+2, r22	; 0x02
    1292:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	88 30       	cpi	r24, 0x08	; 8
    1298:	08 f0       	brcs	.+2      	; 0x129c <GPIO_setupPinDirection+0x1c>
    129a:	d5 c0       	rjmp	.+426    	; 0x1446 <GPIO_setupPinDirection+0x1c6>
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	84 30       	cpi	r24, 0x04	; 4
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <GPIO_setupPinDirection+0x24>
    12a2:	d1 c0       	rjmp	.+418    	; 0x1446 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3d 83       	std	Y+5, r19	; 0x05
    12ac:	2c 83       	std	Y+4, r18	; 0x04
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	9d 81       	ldd	r25, Y+5	; 0x05
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	91 05       	cpc	r25, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <GPIO_setupPinDirection+0x3a>
    12b8:	43 c0       	rjmp	.+134    	; 0x1340 <GPIO_setupPinDirection+0xc0>
    12ba:	2c 81       	ldd	r18, Y+4	; 0x04
    12bc:	3d 81       	ldd	r19, Y+5	; 0x05
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	31 05       	cpc	r19, r1
    12c2:	2c f4       	brge	.+10     	; 0x12ce <GPIO_setupPinDirection+0x4e>
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	71 f0       	breq	.+28     	; 0x12e8 <GPIO_setupPinDirection+0x68>
    12cc:	bc c0       	rjmp	.+376    	; 0x1446 <GPIO_setupPinDirection+0x1c6>
    12ce:	2c 81       	ldd	r18, Y+4	; 0x04
    12d0:	3d 81       	ldd	r19, Y+5	; 0x05
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <GPIO_setupPinDirection+0x5a>
    12d8:	5f c0       	rjmp	.+190    	; 0x1398 <GPIO_setupPinDirection+0x118>
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	9d 81       	ldd	r25, Y+5	; 0x05
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	91 05       	cpc	r25, r1
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <GPIO_setupPinDirection+0x66>
    12e4:	85 c0       	rjmp	.+266    	; 0x13f0 <GPIO_setupPinDirection+0x170>
    12e6:	af c0       	rjmp	.+350    	; 0x1446 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	a1 f4       	brne	.+40     	; 0x1316 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    12ee:	aa e3       	ldi	r26, 0x3A	; 58
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	ea e3       	ldi	r30, 0x3A	; 58
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	48 2f       	mov	r20, r24
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 2e       	mov	r0, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <GPIO_setupPinDirection+0x8c>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	0a 94       	dec	r0
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <GPIO_setupPinDirection+0x88>
    1310:	84 2b       	or	r24, r20
    1312:	8c 93       	st	X, r24
    1314:	98 c0       	rjmp	.+304    	; 0x1446 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1316:	aa e3       	ldi	r26, 0x3A	; 58
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ea e3       	ldi	r30, 0x3A	; 58
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 2e       	mov	r0, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <GPIO_setupPinDirection+0xb4>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	0a 94       	dec	r0
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <GPIO_setupPinDirection+0xb0>
    1338:	80 95       	com	r24
    133a:	84 23       	and	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	83 c0       	rjmp	.+262    	; 0x1446 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	a1 f4       	brne	.+40     	; 0x136e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1346:	a7 e3       	ldi	r26, 0x37	; 55
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e7 e3       	ldi	r30, 0x37	; 55
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <GPIO_setupPinDirection+0xe4>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <GPIO_setupPinDirection+0xe0>
    1368:	84 2b       	or	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	6c c0       	rjmp	.+216    	; 0x1446 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    136e:	a7 e3       	ldi	r26, 0x37	; 55
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e7 e3       	ldi	r30, 0x37	; 55
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <GPIO_setupPinDirection+0x10c>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <GPIO_setupPinDirection+0x108>
    1390:	80 95       	com	r24
    1392:	84 23       	and	r24, r20
    1394:	8c 93       	st	X, r24
    1396:	57 c0       	rjmp	.+174    	; 0x1446 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	a1 f4       	brne	.+40     	; 0x13c6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    139e:	a4 e3       	ldi	r26, 0x34	; 52
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e4 e3       	ldi	r30, 0x34	; 52
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <GPIO_setupPinDirection+0x13c>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <GPIO_setupPinDirection+0x138>
    13c0:	84 2b       	or	r24, r20
    13c2:	8c 93       	st	X, r24
    13c4:	40 c0       	rjmp	.+128    	; 0x1446 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    13c6:	a4 e3       	ldi	r26, 0x34	; 52
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e4 e3       	ldi	r30, 0x34	; 52
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <GPIO_setupPinDirection+0x164>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <GPIO_setupPinDirection+0x160>
    13e8:	80 95       	com	r24
    13ea:	84 23       	and	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	2b c0       	rjmp	.+86     	; 0x1446 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	a1 f4       	brne	.+40     	; 0x141e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    13f6:	a1 e3       	ldi	r26, 0x31	; 49
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e1 e3       	ldi	r30, 0x31	; 49
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <GPIO_setupPinDirection+0x194>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <GPIO_setupPinDirection+0x190>
    1418:	84 2b       	or	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	14 c0       	rjmp	.+40     	; 0x1446 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    141e:	a1 e3       	ldi	r26, 0x31	; 49
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e1 e3       	ldi	r30, 0x31	; 49
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <GPIO_setupPinDirection+0x1bc>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <GPIO_setupPinDirection+0x1b8>
    1440:	80 95       	com	r24
    1442:	84 23       	and	r24, r20
    1444:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	00 d0       	rcall	.+0      	; 0x145c <GPIO_writePin+0x6>
    145c:	00 d0       	rcall	.+0      	; 0x145e <GPIO_writePin+0x8>
    145e:	0f 92       	push	r0
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	6a 83       	std	Y+2, r22	; 0x02
    1468:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	88 30       	cpi	r24, 0x08	; 8
    146e:	08 f0       	brcs	.+2      	; 0x1472 <GPIO_writePin+0x1c>
    1470:	d5 c0       	rjmp	.+426    	; 0x161c <GPIO_writePin+0x1c6>
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	84 30       	cpi	r24, 0x04	; 4
    1476:	08 f0       	brcs	.+2      	; 0x147a <GPIO_writePin+0x24>
    1478:	d1 c0       	rjmp	.+418    	; 0x161c <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}else{
		/* Setup the pin direction as required */
		switch(port_num)
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	3d 83       	std	Y+5, r19	; 0x05
    1482:	2c 83       	std	Y+4, r18	; 0x04
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	9d 81       	ldd	r25, Y+5	; 0x05
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	91 05       	cpc	r25, r1
    148c:	09 f4       	brne	.+2      	; 0x1490 <GPIO_writePin+0x3a>
    148e:	43 c0       	rjmp	.+134    	; 0x1516 <GPIO_writePin+0xc0>
    1490:	2c 81       	ldd	r18, Y+4	; 0x04
    1492:	3d 81       	ldd	r19, Y+5	; 0x05
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	2c f4       	brge	.+10     	; 0x14a4 <GPIO_writePin+0x4e>
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	9d 81       	ldd	r25, Y+5	; 0x05
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	71 f0       	breq	.+28     	; 0x14be <GPIO_writePin+0x68>
    14a2:	bc c0       	rjmp	.+376    	; 0x161c <GPIO_writePin+0x1c6>
    14a4:	2c 81       	ldd	r18, Y+4	; 0x04
    14a6:	3d 81       	ldd	r19, Y+5	; 0x05
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <GPIO_writePin+0x5a>
    14ae:	5f c0       	rjmp	.+190    	; 0x156e <GPIO_writePin+0x118>
    14b0:	8c 81       	ldd	r24, Y+4	; 0x04
    14b2:	9d 81       	ldd	r25, Y+5	; 0x05
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	91 05       	cpc	r25, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <GPIO_writePin+0x66>
    14ba:	85 c0       	rjmp	.+266    	; 0x15c6 <GPIO_writePin+0x170>
    14bc:	af c0       	rjmp	.+350    	; 0x161c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value==LOGIC_HIGH){
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	a1 f4       	brne	.+40     	; 0x14ec <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    14c4:	ab e3       	ldi	r26, 0x3B	; 59
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	eb e3       	ldi	r30, 0x3B	; 59
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <GPIO_writePin+0x8c>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <GPIO_writePin+0x88>
    14e6:	84 2b       	or	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	98 c0       	rjmp	.+304    	; 0x161c <GPIO_writePin+0x1c6>
			}else{
				CLEAR_BIT(PORTA,pin_num);
    14ec:	ab e3       	ldi	r26, 0x3B	; 59
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	eb e3       	ldi	r30, 0x3B	; 59
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	48 2f       	mov	r20, r24
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	02 2e       	mov	r0, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <GPIO_writePin+0xb4>
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	0a 94       	dec	r0
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <GPIO_writePin+0xb0>
    150e:	80 95       	com	r24
    1510:	84 23       	and	r24, r20
    1512:	8c 93       	st	X, r24
    1514:	83 c0       	rjmp	.+262    	; 0x161c <GPIO_writePin+0x1c6>
			}

			break;
		case PORTB_ID:
			if(value==LOGIC_HIGH){
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	a1 f4       	brne	.+40     	; 0x1544 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    151c:	a8 e3       	ldi	r26, 0x38	; 56
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e8 e3       	ldi	r30, 0x38	; 56
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <GPIO_writePin+0xe4>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <GPIO_writePin+0xe0>
    153e:	84 2b       	or	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	6c c0       	rjmp	.+216    	; 0x161c <GPIO_writePin+0x1c6>
			}else{
				CLEAR_BIT(PORTB,pin_num);
    1544:	a8 e3       	ldi	r26, 0x38	; 56
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e8 e3       	ldi	r30, 0x38	; 56
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <GPIO_writePin+0x10c>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <GPIO_writePin+0x108>
    1566:	80 95       	com	r24
    1568:	84 23       	and	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	57 c0       	rjmp	.+174    	; 0x161c <GPIO_writePin+0x1c6>
			}

			break;
		case PORTC_ID:
			if(value==LOGIC_HIGH){
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	a1 f4       	brne	.+40     	; 0x159c <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1574:	a5 e3       	ldi	r26, 0x35	; 53
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e5 e3       	ldi	r30, 0x35	; 53
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 2e       	mov	r0, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <GPIO_writePin+0x13c>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <GPIO_writePin+0x138>
    1596:	84 2b       	or	r24, r20
    1598:	8c 93       	st	X, r24
    159a:	40 c0       	rjmp	.+128    	; 0x161c <GPIO_writePin+0x1c6>
			}else{
				CLEAR_BIT(PORTC,pin_num);
    159c:	a5 e3       	ldi	r26, 0x35	; 53
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e5 e3       	ldi	r30, 0x35	; 53
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <GPIO_writePin+0x164>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <GPIO_writePin+0x160>
    15be:	80 95       	com	r24
    15c0:	84 23       	and	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	2b c0       	rjmp	.+86     	; 0x161c <GPIO_writePin+0x1c6>
			}

			break;
		case PORTD_ID:
			if(value==LOGIC_HIGH){
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	a1 f4       	brne	.+40     	; 0x15f4 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    15cc:	a2 e3       	ldi	r26, 0x32	; 50
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e2 e3       	ldi	r30, 0x32	; 50
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <GPIO_writePin+0x194>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <GPIO_writePin+0x190>
    15ee:	84 2b       	or	r24, r20
    15f0:	8c 93       	st	X, r24
    15f2:	14 c0       	rjmp	.+40     	; 0x161c <GPIO_writePin+0x1c6>
			}else{
				CLEAR_BIT(PORTD,pin_num);
    15f4:	a2 e3       	ldi	r26, 0x32	; 50
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e2 e3       	ldi	r30, 0x32	; 50
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <GPIO_writePin+0x1bc>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <GPIO_writePin+0x1b8>
    1616:	80 95       	com	r24
    1618:	84 23       	and	r24, r20
    161a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	00 d0       	rcall	.+0      	; 0x1632 <GPIO_readPin+0x6>
    1632:	00 d0       	rcall	.+0      	; 0x1634 <GPIO_readPin+0x8>
    1634:	0f 92       	push	r0
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	8a 83       	std	Y+2, r24	; 0x02
    163c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value=LOGIC_LOW;
    163e:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	88 30       	cpi	r24, 0x08	; 8
    1644:	08 f0       	brcs	.+2      	; 0x1648 <GPIO_readPin+0x1c>
    1646:	9d c0       	rjmp	.+314    	; 0x1782 <GPIO_readPin+0x156>
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	84 30       	cpi	r24, 0x04	; 4
    164c:	08 f0       	brcs	.+2      	; 0x1650 <GPIO_readPin+0x24>
    164e:	99 c0       	rjmp	.+306    	; 0x1782 <GPIO_readPin+0x156>
	{
		/* Do Nothing */
	}else{
		switch(port_num)
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	3d 83       	std	Y+5, r19	; 0x05
    1658:	2c 83       	std	Y+4, r18	; 0x04
    165a:	4c 81       	ldd	r20, Y+4	; 0x04
    165c:	5d 81       	ldd	r21, Y+5	; 0x05
    165e:	41 30       	cpi	r20, 0x01	; 1
    1660:	51 05       	cpc	r21, r1
    1662:	b1 f1       	breq	.+108    	; 0x16d0 <GPIO_readPin+0xa4>
    1664:	8c 81       	ldd	r24, Y+4	; 0x04
    1666:	9d 81       	ldd	r25, Y+5	; 0x05
    1668:	82 30       	cpi	r24, 0x02	; 2
    166a:	91 05       	cpc	r25, r1
    166c:	34 f4       	brge	.+12     	; 0x167a <GPIO_readPin+0x4e>
    166e:	2c 81       	ldd	r18, Y+4	; 0x04
    1670:	3d 81       	ldd	r19, Y+5	; 0x05
    1672:	21 15       	cp	r18, r1
    1674:	31 05       	cpc	r19, r1
    1676:	71 f0       	breq	.+28     	; 0x1694 <GPIO_readPin+0x68>
    1678:	84 c0       	rjmp	.+264    	; 0x1782 <GPIO_readPin+0x156>
    167a:	4c 81       	ldd	r20, Y+4	; 0x04
    167c:	5d 81       	ldd	r21, Y+5	; 0x05
    167e:	42 30       	cpi	r20, 0x02	; 2
    1680:	51 05       	cpc	r21, r1
    1682:	09 f4       	brne	.+2      	; 0x1686 <GPIO_readPin+0x5a>
    1684:	43 c0       	rjmp	.+134    	; 0x170c <GPIO_readPin+0xe0>
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	83 30       	cpi	r24, 0x03	; 3
    168c:	91 05       	cpc	r25, r1
    168e:	09 f4       	brne	.+2      	; 0x1692 <GPIO_readPin+0x66>
    1690:	5b c0       	rjmp	.+182    	; 0x1748 <GPIO_readPin+0x11c>
    1692:	77 c0       	rjmp	.+238    	; 0x1782 <GPIO_readPin+0x156>
		{
		case PORTA_ID:
			value= GET_BIT(PINA,pin_num);
    1694:	e9 e3       	ldi	r30, 0x39	; 57
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <GPIO_readPin+0x82>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	2a 95       	dec	r18
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <GPIO_readPin+0x7e>
    16b2:	9a 01       	movw	r18, r20
    16b4:	28 23       	and	r18, r24
    16b6:	39 23       	and	r19, r25
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	88 2f       	mov	r24, r24
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a9 01       	movw	r20, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <GPIO_readPin+0x9a>
    16c2:	55 95       	asr	r21
    16c4:	47 95       	ror	r20
    16c6:	8a 95       	dec	r24
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <GPIO_readPin+0x96>
    16ca:	ca 01       	movw	r24, r20
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	59 c0       	rjmp	.+178    	; 0x1782 <GPIO_readPin+0x156>
			break;
		case PORTB_ID:
			value= GET_BIT(PINB,pin_num);
    16d0:	e6 e3       	ldi	r30, 0x36	; 54
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <GPIO_readPin+0xbe>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	2a 95       	dec	r18
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <GPIO_readPin+0xba>
    16ee:	9a 01       	movw	r18, r20
    16f0:	28 23       	and	r18, r24
    16f2:	39 23       	and	r19, r25
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	88 2f       	mov	r24, r24
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a9 01       	movw	r20, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <GPIO_readPin+0xd6>
    16fe:	55 95       	asr	r21
    1700:	47 95       	ror	r20
    1702:	8a 95       	dec	r24
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <GPIO_readPin+0xd2>
    1706:	ca 01       	movw	r24, r20
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	3b c0       	rjmp	.+118    	; 0x1782 <GPIO_readPin+0x156>
			break;
		case PORTC_ID:
			value= GET_BIT(PINC,pin_num);
    170c:	e3 e3       	ldi	r30, 0x33	; 51
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	48 2f       	mov	r20, r24
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <GPIO_readPin+0xfa>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	2a 95       	dec	r18
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <GPIO_readPin+0xf6>
    172a:	9a 01       	movw	r18, r20
    172c:	28 23       	and	r18, r24
    172e:	39 23       	and	r19, r25
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a9 01       	movw	r20, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <GPIO_readPin+0x112>
    173a:	55 95       	asr	r21
    173c:	47 95       	ror	r20
    173e:	8a 95       	dec	r24
    1740:	e2 f7       	brpl	.-8      	; 0x173a <GPIO_readPin+0x10e>
    1742:	ca 01       	movw	r24, r20
    1744:	89 83       	std	Y+1, r24	; 0x01
    1746:	1d c0       	rjmp	.+58     	; 0x1782 <GPIO_readPin+0x156>
			break;
		case PORTD_ID:
			value= GET_BIT(PIND,pin_num);
    1748:	e0 e3       	ldi	r30, 0x30	; 48
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <GPIO_readPin+0x136>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	2a 95       	dec	r18
    1764:	e2 f7       	brpl	.-8      	; 0x175e <GPIO_readPin+0x132>
    1766:	9a 01       	movw	r18, r20
    1768:	28 23       	and	r18, r24
    176a:	39 23       	and	r19, r25
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a9 01       	movw	r20, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <GPIO_readPin+0x14e>
    1776:	55 95       	asr	r21
    1778:	47 95       	ror	r20
    177a:	8a 95       	dec	r24
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <GPIO_readPin+0x14a>
    177e:	ca 01       	movw	r24, r20
    1780:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1782:	89 81       	ldd	r24, Y+1	; 0x01
}
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <GPIO_setupPortDirection+0x6>
    179a:	00 d0       	rcall	.+0      	; 0x179c <GPIO_setupPortDirection+0x8>
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	84 30       	cpi	r24, 0x04	; 4
    17a8:	90 f5       	brcc	.+100    	; 0x180e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{

		switch(port_num)
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	3c 83       	std	Y+4, r19	; 0x04
    17b2:	2b 83       	std	Y+3, r18	; 0x03
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	91 05       	cpc	r25, r1
    17bc:	d1 f0       	breq	.+52     	; 0x17f2 <GPIO_setupPortDirection+0x5e>
    17be:	2b 81       	ldd	r18, Y+3	; 0x03
    17c0:	3c 81       	ldd	r19, Y+4	; 0x04
    17c2:	22 30       	cpi	r18, 0x02	; 2
    17c4:	31 05       	cpc	r19, r1
    17c6:	2c f4       	brge	.+10     	; 0x17d2 <GPIO_setupPortDirection+0x3e>
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	61 f0       	breq	.+24     	; 0x17e8 <GPIO_setupPortDirection+0x54>
    17d0:	1e c0       	rjmp	.+60     	; 0x180e <GPIO_setupPortDirection+0x7a>
    17d2:	2b 81       	ldd	r18, Y+3	; 0x03
    17d4:	3c 81       	ldd	r19, Y+4	; 0x04
    17d6:	22 30       	cpi	r18, 0x02	; 2
    17d8:	31 05       	cpc	r19, r1
    17da:	81 f0       	breq	.+32     	; 0x17fc <GPIO_setupPortDirection+0x68>
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	83 30       	cpi	r24, 0x03	; 3
    17e2:	91 05       	cpc	r25, r1
    17e4:	81 f0       	breq	.+32     	; 0x1806 <GPIO_setupPortDirection+0x72>
    17e6:	13 c0       	rjmp	.+38     	; 0x180e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    17e8:	ea e3       	ldi	r30, 0x3A	; 58
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	80 83       	st	Z, r24
    17f0:	0e c0       	rjmp	.+28     	; 0x180e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    17f2:	e7 e3       	ldi	r30, 0x37	; 55
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	80 83       	st	Z, r24
    17fa:	09 c0       	rjmp	.+18     	; 0x180e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    17fc:	e4 e3       	ldi	r30, 0x34	; 52
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	80 83       	st	Z, r24
    1804:	04 c0       	rjmp	.+8      	; 0x180e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1806:	e1 e3       	ldi	r30, 0x31	; 49
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	80 83       	st	Z, r24
			break;
		}
	}
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <GPIO_writePort+0x6>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <GPIO_writePort+0x8>
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	84 30       	cpi	r24, 0x04	; 4
    1830:	90 f5       	brcc	.+100    	; 0x1896 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	3c 83       	std	Y+4, r19	; 0x04
    183a:	2b 83       	std	Y+3, r18	; 0x03
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	91 05       	cpc	r25, r1
    1844:	d1 f0       	breq	.+52     	; 0x187a <GPIO_writePort+0x5e>
    1846:	2b 81       	ldd	r18, Y+3	; 0x03
    1848:	3c 81       	ldd	r19, Y+4	; 0x04
    184a:	22 30       	cpi	r18, 0x02	; 2
    184c:	31 05       	cpc	r19, r1
    184e:	2c f4       	brge	.+10     	; 0x185a <GPIO_writePort+0x3e>
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	61 f0       	breq	.+24     	; 0x1870 <GPIO_writePort+0x54>
    1858:	1e c0       	rjmp	.+60     	; 0x1896 <GPIO_writePort+0x7a>
    185a:	2b 81       	ldd	r18, Y+3	; 0x03
    185c:	3c 81       	ldd	r19, Y+4	; 0x04
    185e:	22 30       	cpi	r18, 0x02	; 2
    1860:	31 05       	cpc	r19, r1
    1862:	81 f0       	breq	.+32     	; 0x1884 <GPIO_writePort+0x68>
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
    1868:	83 30       	cpi	r24, 0x03	; 3
    186a:	91 05       	cpc	r25, r1
    186c:	81 f0       	breq	.+32     	; 0x188e <GPIO_writePort+0x72>
    186e:	13 c0       	rjmp	.+38     	; 0x1896 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
    1870:	eb e3       	ldi	r30, 0x3B	; 59
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	80 83       	st	Z, r24
    1878:	0e c0       	rjmp	.+28     	; 0x1896 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    187a:	e8 e3       	ldi	r30, 0x38	; 56
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	80 83       	st	Z, r24
    1882:	09 c0       	rjmp	.+18     	; 0x1896 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    1884:	e5 e3       	ldi	r30, 0x35	; 53
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	80 83       	st	Z, r24
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    188e:	e2 e3       	ldi	r30, 0x32	; 50
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	80 83       	st	Z, r24
			break;
		}
	}
}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <GPIO_readPort+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <GPIO_readPort+0x8>
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value=0;
    18b2:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	84 30       	cpi	r24, 0x04	; 4
    18b8:	90 f5       	brcc	.+100    	; 0x191e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{

		switch(port_num)
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	3c 83       	std	Y+4, r19	; 0x04
    18c2:	2b 83       	std	Y+3, r18	; 0x03
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	91 05       	cpc	r25, r1
    18cc:	d1 f0       	breq	.+52     	; 0x1902 <GPIO_readPort+0x5e>
    18ce:	2b 81       	ldd	r18, Y+3	; 0x03
    18d0:	3c 81       	ldd	r19, Y+4	; 0x04
    18d2:	22 30       	cpi	r18, 0x02	; 2
    18d4:	31 05       	cpc	r19, r1
    18d6:	2c f4       	brge	.+10     	; 0x18e2 <GPIO_readPort+0x3e>
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	61 f0       	breq	.+24     	; 0x18f8 <GPIO_readPort+0x54>
    18e0:	1e c0       	rjmp	.+60     	; 0x191e <GPIO_readPort+0x7a>
    18e2:	2b 81       	ldd	r18, Y+3	; 0x03
    18e4:	3c 81       	ldd	r19, Y+4	; 0x04
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	31 05       	cpc	r19, r1
    18ea:	81 f0       	breq	.+32     	; 0x190c <GPIO_readPort+0x68>
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	83 30       	cpi	r24, 0x03	; 3
    18f2:	91 05       	cpc	r25, r1
    18f4:	81 f0       	breq	.+32     	; 0x1916 <GPIO_readPort+0x72>
    18f6:	13 c0       	rjmp	.+38     	; 0x191e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value=PINA;
    18f8:	e9 e3       	ldi	r30, 0x39	; 57
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	0e c0       	rjmp	.+28     	; 0x191e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value= PINB;
    1902:	e6 e3       	ldi	r30, 0x36	; 54
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	09 c0       	rjmp	.+18     	; 0x191e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value=PINC;
    190c:	e3 e3       	ldi	r30, 0x33	; 51
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	04 c0       	rjmp	.+8      	; 0x191e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value=PIND;
    1916:	e0 e3       	ldi	r30, 0x30	; 48
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    191e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <main>:
void BuzzerOffCallBack(void);
void motorCW_callback(void);
void motorACW_callback(void);
void motorhold_callback(void);

int main(void){
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	c5 5c       	subi	r28, 0xC5	; 197
    193c:	d0 40       	sbci	r29, 0x00	; 0
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
	 * baud rate =9600
	 * */

	Config_Uart config_uart={DISABLED,ONE_BIT,
			BIT_8,9600
	};
    1948:	ce 01       	movw	r24, r28
    194a:	86 57       	subi	r24, 0x76	; 118
    194c:	9f 4f       	sbci	r25, 0xFF	; 255
    194e:	c3 55       	subi	r28, 0x53	; 83
    1950:	df 4f       	sbci	r29, 0xFF	; 255
    1952:	99 83       	std	Y+1, r25	; 0x01
    1954:	88 83       	st	Y, r24
    1956:	cd 5a       	subi	r28, 0xAD	; 173
    1958:	d0 40       	sbci	r29, 0x00	; 0
    195a:	80 e8       	ldi	r24, 0x80	; 128
    195c:	91 e0       	ldi	r25, 0x01	; 1
    195e:	c1 55       	subi	r28, 0x51	; 81
    1960:	df 4f       	sbci	r29, 0xFF	; 255
    1962:	99 83       	std	Y+1, r25	; 0x01
    1964:	88 83       	st	Y, r24
    1966:	cf 5a       	subi	r28, 0xAF	; 175
    1968:	d0 40       	sbci	r29, 0x00	; 0
    196a:	97 e0       	ldi	r25, 0x07	; 7
    196c:	cf 54       	subi	r28, 0x4F	; 79
    196e:	df 4f       	sbci	r29, 0xFF	; 255
    1970:	98 83       	st	Y, r25
    1972:	c1 5b       	subi	r28, 0xB1	; 177
    1974:	d0 40       	sbci	r29, 0x00	; 0
    1976:	c1 55       	subi	r28, 0x51	; 81
    1978:	df 4f       	sbci	r29, 0xFF	; 255
    197a:	e8 81       	ld	r30, Y
    197c:	f9 81       	ldd	r31, Y+1	; 0x01
    197e:	cf 5a       	subi	r28, 0xAF	; 175
    1980:	d0 40       	sbci	r29, 0x00	; 0
    1982:	00 80       	ld	r0, Z
    1984:	c1 55       	subi	r28, 0x51	; 81
    1986:	df 4f       	sbci	r29, 0xFF	; 255
    1988:	88 81       	ld	r24, Y
    198a:	99 81       	ldd	r25, Y+1	; 0x01
    198c:	cf 5a       	subi	r28, 0xAF	; 175
    198e:	d0 40       	sbci	r29, 0x00	; 0
    1990:	01 96       	adiw	r24, 0x01	; 1
    1992:	c1 55       	subi	r28, 0x51	; 81
    1994:	df 4f       	sbci	r29, 0xFF	; 255
    1996:	99 83       	std	Y+1, r25	; 0x01
    1998:	88 83       	st	Y, r24
    199a:	cf 5a       	subi	r28, 0xAF	; 175
    199c:	d0 40       	sbci	r29, 0x00	; 0
    199e:	c3 55       	subi	r28, 0x53	; 83
    19a0:	df 4f       	sbci	r29, 0xFF	; 255
    19a2:	e8 81       	ld	r30, Y
    19a4:	f9 81       	ldd	r31, Y+1	; 0x01
    19a6:	cd 5a       	subi	r28, 0xAD	; 173
    19a8:	d0 40       	sbci	r29, 0x00	; 0
    19aa:	00 82       	st	Z, r0
    19ac:	c3 55       	subi	r28, 0x53	; 83
    19ae:	df 4f       	sbci	r29, 0xFF	; 255
    19b0:	88 81       	ld	r24, Y
    19b2:	99 81       	ldd	r25, Y+1	; 0x01
    19b4:	cd 5a       	subi	r28, 0xAD	; 173
    19b6:	d0 40       	sbci	r29, 0x00	; 0
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	c3 55       	subi	r28, 0x53	; 83
    19bc:	df 4f       	sbci	r29, 0xFF	; 255
    19be:	99 83       	std	Y+1, r25	; 0x01
    19c0:	88 83       	st	Y, r24
    19c2:	cd 5a       	subi	r28, 0xAD	; 173
    19c4:	d0 40       	sbci	r29, 0x00	; 0
    19c6:	cf 54       	subi	r28, 0x4F	; 79
    19c8:	df 4f       	sbci	r29, 0xFF	; 255
    19ca:	98 81       	ld	r25, Y
    19cc:	c1 5b       	subi	r28, 0xB1	; 177
    19ce:	d0 40       	sbci	r29, 0x00	; 0
    19d0:	91 50       	subi	r25, 0x01	; 1
    19d2:	cf 54       	subi	r28, 0x4F	; 79
    19d4:	df 4f       	sbci	r29, 0xFF	; 255
    19d6:	98 83       	st	Y, r25
    19d8:	c1 5b       	subi	r28, 0xB1	; 177
    19da:	d0 40       	sbci	r29, 0x00	; 0
    19dc:	cf 54       	subi	r28, 0x4F	; 79
    19de:	df 4f       	sbci	r29, 0xFF	; 255
    19e0:	e8 81       	ld	r30, Y
    19e2:	c1 5b       	subi	r28, 0xB1	; 177
    19e4:	d0 40       	sbci	r29, 0x00	; 0
    19e6:	ee 23       	and	r30, r30
    19e8:	31 f6       	brne	.-116    	; 0x1976 <main+0x48>
	UART_init(&config_uart);
    19ea:	ce 01       	movw	r24, r28
    19ec:	86 57       	subi	r24, 0x76	; 118
    19ee:	9f 4f       	sbci	r25, 0xFF	; 255
    19f0:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <UART_init>

	/* Intilize TWI */
	TWI_ConfigType config_twi={0x02,0x01};
    19f4:	fe 01       	movw	r30, r28
    19f6:	ef 56       	subi	r30, 0x6F	; 111
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	82 e0       	ldi	r24, 0x02	; 2
    19fc:	80 83       	st	Z, r24
    19fe:	fe 01       	movw	r30, r28
    1a00:	ef 56       	subi	r30, 0x6F	; 111
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	81 83       	std	Z+1, r24	; 0x01
	TWI_init(&config_twi);
    1a08:	ce 01       	movw	r24, r28
    1a0a:	8f 56       	subi	r24, 0x6F	; 111
    1a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0e:	0e 94 34 15 	call	0x2a68	; 0x2a68 <TWI_init>

	Buzzer_init();   /* Initlize Buzzer */
    1a12:	0e 94 76 08 	call	0x10ec	; 0x10ec <Buzzer_init>

	DcMotor_Init();   /* Initlize Dc motor */
    1a16:	0e 94 17 07 	call	0xe2e	; 0xe2e <DcMotor_Init>

	SREG |= (1<<7);/* Enable Global Interrupts */
    1a1a:	af e5       	ldi	r26, 0x5F	; 95
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	ef e5       	ldi	r30, 0x5F	; 95
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	80 68       	ori	r24, 0x80	; 128
    1a26:	8c 93       	st	X, r24

	uint8 message;

	while(1){

		message=UART_recieveByte();
    1a28:	0e 94 40 16 	call	0x2c80	; 0x2c80 <UART_recieveByte>
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	e7 57       	subi	r30, 0x77	; 119
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	80 83       	st	Z, r24


		if(message==GET_PASSWORD){
    1a34:	fe 01       	movw	r30, r28
    1a36:	e7 57       	subi	r30, 0x77	; 119
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	80 81       	ld	r24, Z
    1a3c:	8f 3a       	cpi	r24, 0xAF	; 175
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <main+0x114>
    1a40:	9e c1       	rjmp	.+828    	; 0x1d7e <main+0x450>
			uint16 password;
			uint8 val;
			EEPROM_readByte(0x0311, &val);
    1a42:	9e 01       	movw	r18, r28
    1a44:	2d 56       	subi	r18, 0x6D	; 109
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	81 e1       	ldi	r24, 0x11	; 17
    1a4a:	93 e0       	ldi	r25, 0x03	; 3
    1a4c:	b9 01       	movw	r22, r18
    1a4e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <EEPROM_readByte>
    1a52:	fe 01       	movw	r30, r28
    1a54:	e5 58       	subi	r30, 0x85	; 133
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a0 e2       	ldi	r26, 0x20	; 32
    1a5e:	b1 e4       	ldi	r27, 0x41	; 65
    1a60:	80 83       	st	Z, r24
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	a2 83       	std	Z+2, r26	; 0x02
    1a66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a68:	8e 01       	movw	r16, r28
    1a6a:	09 58       	subi	r16, 0x89	; 137
    1a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e5 58       	subi	r30, 0x85	; 133
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	60 81       	ld	r22, Z
    1a76:	71 81       	ldd	r23, Z+1	; 0x01
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	93 81       	ldd	r25, Z+3	; 0x03
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	4a e7       	ldi	r20, 0x7A	; 122
    1a82:	55 e4       	ldi	r21, 0x45	; 69
    1a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	80 83       	st	Z, r24
    1a90:	91 83       	std	Z+1, r25	; 0x01
    1a92:	a2 83       	std	Z+2, r26	; 0x02
    1a94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a96:	fe 01       	movw	r30, r28
    1a98:	e9 58       	subi	r30, 0x89	; 137
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	60 81       	ld	r22, Z
    1a9e:	71 81       	ldd	r23, Z+1	; 0x01
    1aa0:	82 81       	ldd	r24, Z+2	; 0x02
    1aa2:	93 81       	ldd	r25, Z+3	; 0x03
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	44 f4       	brge	.+16     	; 0x1ac4 <main+0x196>
		__ticks = 1;
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	eb 58       	subi	r30, 0x8B	; 139
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
    1ac2:	64 c0       	rjmp	.+200    	; 0x1b8c <main+0x25e>
	else if (__tmp > 65535)
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e9 58       	subi	r30, 0x89	; 137
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	60 81       	ld	r22, Z
    1acc:	71 81       	ldd	r23, Z+1	; 0x01
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	0c f0       	brlt	.+2      	; 0x1ae4 <main+0x1b6>
    1ae2:	43 c0       	rjmp	.+134    	; 0x1b6a <main+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e5 58       	subi	r30, 0x85	; 133
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	60 81       	ld	r22, Z
    1aec:	71 81       	ldd	r23, Z+1	; 0x01
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e2       	ldi	r20, 0x20	; 32
    1af8:	51 e4       	ldi	r21, 0x41	; 65
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	8e 01       	movw	r16, r28
    1b04:	0b 58       	subi	r16, 0x8B	; 139
    1b06:	1f 4f       	sbci	r17, 0xFF	; 255
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	f8 01       	movw	r30, r16
    1b16:	91 83       	std	Z+1, r25	; 0x01
    1b18:	80 83       	st	Z, r24
    1b1a:	1f c0       	rjmp	.+62     	; 0x1b5a <main+0x22c>
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	ed 58       	subi	r30, 0x8D	; 141
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	80 e9       	ldi	r24, 0x90	; 144
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ed 58       	subi	r30, 0x8D	; 141
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	91 81       	ldd	r25, Z+1	; 0x01
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <main+0x206>
    1b38:	fe 01       	movw	r30, r28
    1b3a:	ed 58       	subi	r30, 0x8D	; 141
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	91 83       	std	Z+1, r25	; 0x01
    1b40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b42:	de 01       	movw	r26, r28
    1b44:	ab 58       	subi	r26, 0x8B	; 139
    1b46:	bf 4f       	sbci	r27, 0xFF	; 255
    1b48:	fe 01       	movw	r30, r28
    1b4a:	eb 58       	subi	r30, 0x8B	; 139
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	80 81       	ld	r24, Z
    1b50:	91 81       	ldd	r25, Z+1	; 0x01
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	11 96       	adiw	r26, 0x01	; 1
    1b56:	9c 93       	st	X, r25
    1b58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	eb 58       	subi	r30, 0x8B	; 139
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	80 81       	ld	r24, Z
    1b62:	91 81       	ldd	r25, Z+1	; 0x01
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	d1 f6       	brne	.-76     	; 0x1b1c <main+0x1ee>
    1b68:	27 c0       	rjmp	.+78     	; 0x1bb8 <main+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6a:	8e 01       	movw	r16, r28
    1b6c:	0b 58       	subi	r16, 0x8B	; 139
    1b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b70:	fe 01       	movw	r30, r28
    1b72:	e9 58       	subi	r30, 0x89	; 137
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	60 81       	ld	r22, Z
    1b78:	71 81       	ldd	r23, Z+1	; 0x01
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	93 81       	ldd	r25, Z+3	; 0x03
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	f8 01       	movw	r30, r16
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	80 83       	st	Z, r24
    1b8c:	de 01       	movw	r26, r28
    1b8e:	af 58       	subi	r26, 0x8F	; 143
    1b90:	bf 4f       	sbci	r27, 0xFF	; 255
    1b92:	fe 01       	movw	r30, r28
    1b94:	eb 58       	subi	r30, 0x8B	; 139
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	8d 93       	st	X+, r24
    1b9e:	9c 93       	st	X, r25
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	ef 58       	subi	r30, 0x8F	; 143
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <main+0x27c>
    1bae:	fe 01       	movw	r30, r28
    1bb0:	ef 58       	subi	r30, 0x8F	; 143
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	91 83       	std	Z+1, r25	; 0x01
    1bb6:	80 83       	st	Z, r24
			_delay_ms(10);
			password=val<<8;
    1bb8:	fe 01       	movw	r30, r28
    1bba:	ed 56       	subi	r30, 0x6D	; 109
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	80 81       	ld	r24, Z
    1bc0:	88 2f       	mov	r24, r24
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	98 2f       	mov	r25, r24
    1bc6:	88 27       	eor	r24, r24
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e9 57       	subi	r30, 0x79	; 121
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
			//			EEPROM_writeByte(0x0320,&val);
			password|=val;
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ed 56       	subi	r30, 0x6D	; 109
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 81       	ld	r24, Z
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	de 01       	movw	r26, r28
    1be0:	a9 57       	subi	r26, 0x79	; 121
    1be2:	bf 4f       	sbci	r27, 0xFF	; 255
    1be4:	fe 01       	movw	r30, r28
    1be6:	e9 57       	subi	r30, 0x79	; 121
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	80 81       	ld	r24, Z
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	82 2b       	or	r24, r18
    1bf0:	93 2b       	or	r25, r19
    1bf2:	8d 93       	st	X+, r24
    1bf4:	9c 93       	st	X, r25

			UART_sendByte(password>>8);
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e9 57       	subi	r30, 0x79	; 121
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 81       	ld	r24, Z
    1bfe:	91 81       	ldd	r25, Z+1	; 0x01
    1c00:	89 2f       	mov	r24, r25
    1c02:	99 27       	eor	r25, r25
    1c04:	0e 94 29 16 	call	0x2c52	; 0x2c52 <UART_sendByte>
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e3 59       	subi	r30, 0x93	; 147
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a0 e2       	ldi	r26, 0x20	; 32
    1c14:	b1 e4       	ldi	r27, 0x41	; 65
    1c16:	80 83       	st	Z, r24
    1c18:	91 83       	std	Z+1, r25	; 0x01
    1c1a:	a2 83       	std	Z+2, r26	; 0x02
    1c1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1e:	8e 01       	movw	r16, r28
    1c20:	07 59       	subi	r16, 0x97	; 151
    1c22:	1f 4f       	sbci	r17, 0xFF	; 255
    1c24:	fe 01       	movw	r30, r28
    1c26:	e3 59       	subi	r30, 0x93	; 147
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	60 81       	ld	r22, Z
    1c2c:	71 81       	ldd	r23, Z+1	; 0x01
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	4a e7       	ldi	r20, 0x7A	; 122
    1c38:	55 e4       	ldi	r21, 0x45	; 69
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	f8 01       	movw	r30, r16
    1c44:	80 83       	st	Z, r24
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	a2 83       	std	Z+2, r26	; 0x02
    1c4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e7 59       	subi	r30, 0x97	; 151
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c66:	88 23       	and	r24, r24
    1c68:	44 f4       	brge	.+16     	; 0x1c7a <main+0x34c>
		__ticks = 1;
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e9 59       	subi	r30, 0x99	; 153
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
    1c78:	64 c0       	rjmp	.+200    	; 0x1d42 <main+0x414>
	else if (__tmp > 65535)
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e7 59       	subi	r30, 0x97	; 151
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	60 81       	ld	r22, Z
    1c82:	71 81       	ldd	r23, Z+1	; 0x01
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	3f ef       	ldi	r19, 0xFF	; 255
    1c8c:	4f e7       	ldi	r20, 0x7F	; 127
    1c8e:	57 e4       	ldi	r21, 0x47	; 71
    1c90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c94:	18 16       	cp	r1, r24
    1c96:	0c f0       	brlt	.+2      	; 0x1c9a <main+0x36c>
    1c98:	43 c0       	rjmp	.+134    	; 0x1d20 <main+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e3 59       	subi	r30, 0x93	; 147
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	60 81       	ld	r22, Z
    1ca2:	71 81       	ldd	r23, Z+1	; 0x01
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	93 81       	ldd	r25, Z+3	; 0x03
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e2       	ldi	r20, 0x20	; 32
    1cae:	51 e4       	ldi	r21, 0x41	; 65
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	8e 01       	movw	r16, r28
    1cba:	09 59       	subi	r16, 0x99	; 153
    1cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	f8 01       	movw	r30, r16
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	80 83       	st	Z, r24
    1cd0:	1f c0       	rjmp	.+62     	; 0x1d10 <main+0x3e2>
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	eb 59       	subi	r30, 0x9B	; 155
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	80 e9       	ldi	r24, 0x90	; 144
    1cda:	91 e0       	ldi	r25, 0x01	; 1
    1cdc:	91 83       	std	Z+1, r25	; 0x01
    1cde:	80 83       	st	Z, r24
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	eb 59       	subi	r30, 0x9B	; 155
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <main+0x3bc>
    1cee:	fe 01       	movw	r30, r28
    1cf0:	eb 59       	subi	r30, 0x9B	; 155
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	de 01       	movw	r26, r28
    1cfa:	a9 59       	subi	r26, 0x99	; 153
    1cfc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e9 59       	subi	r30, 0x99	; 153
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	11 96       	adiw	r26, 0x01	; 1
    1d0c:	9c 93       	st	X, r25
    1d0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d10:	fe 01       	movw	r30, r28
    1d12:	e9 59       	subi	r30, 0x99	; 153
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	91 81       	ldd	r25, Z+1	; 0x01
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	d1 f6       	brne	.-76     	; 0x1cd2 <main+0x3a4>
    1d1e:	27 c0       	rjmp	.+78     	; 0x1d6e <main+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	8e 01       	movw	r16, r28
    1d22:	09 59       	subi	r16, 0x99	; 153
    1d24:	1f 4f       	sbci	r17, 0xFF	; 255
    1d26:	fe 01       	movw	r30, r28
    1d28:	e7 59       	subi	r30, 0x97	; 151
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
    1d42:	de 01       	movw	r26, r28
    1d44:	ad 59       	subi	r26, 0x9D	; 157
    1d46:	bf 4f       	sbci	r27, 0xFF	; 255
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e9 59       	subi	r30, 0x99	; 153
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 81       	ld	r24, Z
    1d50:	91 81       	ldd	r25, Z+1	; 0x01
    1d52:	8d 93       	st	X+, r24
    1d54:	9c 93       	st	X, r25
    1d56:	fe 01       	movw	r30, r28
    1d58:	ed 59       	subi	r30, 0x9D	; 157
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <main+0x432>
    1d64:	fe 01       	movw	r30, r28
    1d66:	ed 59       	subi	r30, 0x9D	; 157
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
			_delay_ms(10);
			UART_sendByte(password&0x0f);
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e9 57       	subi	r30, 0x79	; 121
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 81       	ld	r24, Z
    1d76:	8f 70       	andi	r24, 0x0F	; 15
    1d78:	0e 94 29 16 	call	0x2c52	; 0x2c52 <UART_sendByte>
    1d7c:	55 ce       	rjmp	.-854    	; 0x1a28 <main+0xfa>


		}else if(message==send_first_pass){
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e7 57       	subi	r30, 0x77	; 119
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	80 81       	ld	r24, Z
    1d86:	8f 39       	cpi	r24, 0x9F	; 159
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <main+0x45e>
    1d8a:	c0 c2       	rjmp	.+1408   	; 0x230c <main+0x9de>
			/*
			 * get password and re-enterd password fom HMI MC
			 * */
			uint16 password;
			uint16 re_entered;
			password=UART_recieveByte()<<8;
    1d8c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <UART_recieveByte>
    1d90:	88 2f       	mov	r24, r24
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	98 2f       	mov	r25, r24
    1d96:	88 27       	eor	r24, r24
    1d98:	fe 01       	movw	r30, r28
    1d9a:	eb 57       	subi	r30, 0x7B	; 123
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	80 83       	st	Z, r24
    1da2:	fe 01       	movw	r30, r28
    1da4:	e1 5a       	subi	r30, 0xA1	; 161
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e2       	ldi	r26, 0x20	; 32
    1dae:	b1 e4       	ldi	r27, 0x41	; 65
    1db0:	80 83       	st	Z, r24
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	a2 83       	std	Z+2, r26	; 0x02
    1db6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db8:	8e 01       	movw	r16, r28
    1dba:	05 5a       	subi	r16, 0xA5	; 165
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e1 5a       	subi	r30, 0xA1	; 161
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a e7       	ldi	r20, 0x7A	; 122
    1dd2:	55 e4       	ldi	r21, 0x45	; 69
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	f8 01       	movw	r30, r16
    1dde:	80 83       	st	Z, r24
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	a2 83       	std	Z+2, r26	; 0x02
    1de4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1de6:	fe 01       	movw	r30, r28
    1de8:	e5 5a       	subi	r30, 0xA5	; 165
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e8       	ldi	r20, 0x80	; 128
    1dfa:	5f e3       	ldi	r21, 0x3F	; 63
    1dfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e00:	88 23       	and	r24, r24
    1e02:	44 f4       	brge	.+16     	; 0x1e14 <main+0x4e6>
		__ticks = 1;
    1e04:	fe 01       	movw	r30, r28
    1e06:	e7 5a       	subi	r30, 0xA7	; 167
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
    1e12:	64 c0       	rjmp	.+200    	; 0x1edc <main+0x5ae>
	else if (__tmp > 65535)
    1e14:	fe 01       	movw	r30, r28
    1e16:	e5 5a       	subi	r30, 0xA5	; 165
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	60 81       	ld	r22, Z
    1e1c:	71 81       	ldd	r23, Z+1	; 0x01
    1e1e:	82 81       	ldd	r24, Z+2	; 0x02
    1e20:	93 81       	ldd	r25, Z+3	; 0x03
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	3f ef       	ldi	r19, 0xFF	; 255
    1e26:	4f e7       	ldi	r20, 0x7F	; 127
    1e28:	57 e4       	ldi	r21, 0x47	; 71
    1e2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e2e:	18 16       	cp	r1, r24
    1e30:	0c f0       	brlt	.+2      	; 0x1e34 <main+0x506>
    1e32:	43 c0       	rjmp	.+134    	; 0x1eba <main+0x58c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e34:	fe 01       	movw	r30, r28
    1e36:	e1 5a       	subi	r30, 0xA1	; 161
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	60 81       	ld	r22, Z
    1e3c:	71 81       	ldd	r23, Z+1	; 0x01
    1e3e:	82 81       	ldd	r24, Z+2	; 0x02
    1e40:	93 81       	ldd	r25, Z+3	; 0x03
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e2       	ldi	r20, 0x20	; 32
    1e48:	51 e4       	ldi	r21, 0x41	; 65
    1e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	8e 01       	movw	r16, r28
    1e54:	07 5a       	subi	r16, 0xA7	; 167
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255
    1e58:	bc 01       	movw	r22, r24
    1e5a:	cd 01       	movw	r24, r26
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	f8 01       	movw	r30, r16
    1e66:	91 83       	std	Z+1, r25	; 0x01
    1e68:	80 83       	st	Z, r24
    1e6a:	1f c0       	rjmp	.+62     	; 0x1eaa <main+0x57c>
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e9 5a       	subi	r30, 0xA9	; 169
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 e9       	ldi	r24, 0x90	; 144
    1e74:	91 e0       	ldi	r25, 0x01	; 1
    1e76:	91 83       	std	Z+1, r25	; 0x01
    1e78:	80 83       	st	Z, r24
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e9 5a       	subi	r30, 0xA9	; 169
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 81       	ld	r24, Z
    1e82:	91 81       	ldd	r25, Z+1	; 0x01
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <main+0x556>
    1e88:	fe 01       	movw	r30, r28
    1e8a:	e9 5a       	subi	r30, 0xA9	; 169
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	91 83       	std	Z+1, r25	; 0x01
    1e90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e92:	de 01       	movw	r26, r28
    1e94:	a7 5a       	subi	r26, 0xA7	; 167
    1e96:	bf 4f       	sbci	r27, 0xFF	; 255
    1e98:	fe 01       	movw	r30, r28
    1e9a:	e7 5a       	subi	r30, 0xA7	; 167
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	80 81       	ld	r24, Z
    1ea0:	91 81       	ldd	r25, Z+1	; 0x01
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	11 96       	adiw	r26, 0x01	; 1
    1ea6:	9c 93       	st	X, r25
    1ea8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eaa:	fe 01       	movw	r30, r28
    1eac:	e7 5a       	subi	r30, 0xA7	; 167
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	d1 f6       	brne	.-76     	; 0x1e6c <main+0x53e>
    1eb8:	27 c0       	rjmp	.+78     	; 0x1f08 <main+0x5da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eba:	8e 01       	movw	r16, r28
    1ebc:	07 5a       	subi	r16, 0xA7	; 167
    1ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	e5 5a       	subi	r30, 0xA5	; 165
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	60 81       	ld	r22, Z
    1ec8:	71 81       	ldd	r23, Z+1	; 0x01
    1eca:	82 81       	ldd	r24, Z+2	; 0x02
    1ecc:	93 81       	ldd	r25, Z+3	; 0x03
    1ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	f8 01       	movw	r30, r16
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	80 83       	st	Z, r24
    1edc:	de 01       	movw	r26, r28
    1ede:	ab 5a       	subi	r26, 0xAB	; 171
    1ee0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	e7 5a       	subi	r30, 0xA7	; 167
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	80 81       	ld	r24, Z
    1eea:	91 81       	ldd	r25, Z+1	; 0x01
    1eec:	8d 93       	st	X+, r24
    1eee:	9c 93       	st	X, r25
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	eb 5a       	subi	r30, 0xAB	; 171
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	80 81       	ld	r24, Z
    1ef8:	91 81       	ldd	r25, Z+1	; 0x01
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <main+0x5cc>
    1efe:	fe 01       	movw	r30, r28
    1f00:	eb 5a       	subi	r30, 0xAB	; 171
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	91 83       	std	Z+1, r25	; 0x01
    1f06:	80 83       	st	Z, r24
			_delay_ms(10);
			password|=UART_recieveByte();
    1f08:	0e 94 40 16 	call	0x2c80	; 0x2c80 <UART_recieveByte>
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	de 01       	movw	r26, r28
    1f12:	ab 57       	subi	r26, 0x7B	; 123
    1f14:	bf 4f       	sbci	r27, 0xFF	; 255
    1f16:	fe 01       	movw	r30, r28
    1f18:	eb 57       	subi	r30, 0x7B	; 123
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	80 81       	ld	r24, Z
    1f1e:	91 81       	ldd	r25, Z+1	; 0x01
    1f20:	82 2b       	or	r24, r18
    1f22:	93 2b       	or	r25, r19
    1f24:	8d 93       	st	X+, r24
    1f26:	9c 93       	st	X, r25
    1f28:	fe 01       	movw	r30, r28
    1f2a:	ef 5a       	subi	r30, 0xAF	; 175
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 e2       	ldi	r26, 0x20	; 32
    1f34:	b1 e4       	ldi	r27, 0x41	; 65
    1f36:	80 83       	st	Z, r24
    1f38:	91 83       	std	Z+1, r25	; 0x01
    1f3a:	a2 83       	std	Z+2, r26	; 0x02
    1f3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3e:	8e 01       	movw	r16, r28
    1f40:	03 5b       	subi	r16, 0xB3	; 179
    1f42:	1f 4f       	sbci	r17, 0xFF	; 255
    1f44:	fe 01       	movw	r30, r28
    1f46:	ef 5a       	subi	r30, 0xAF	; 175
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	60 81       	ld	r22, Z
    1f4c:	71 81       	ldd	r23, Z+1	; 0x01
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4a e7       	ldi	r20, 0x7A	; 122
    1f58:	55 e4       	ldi	r21, 0x45	; 69
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	f8 01       	movw	r30, r16
    1f64:	80 83       	st	Z, r24
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	a2 83       	std	Z+2, r26	; 0x02
    1f6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e3 5b       	subi	r30, 0xB3	; 179
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	93 81       	ldd	r25, Z+3	; 0x03
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e8       	ldi	r20, 0x80	; 128
    1f80:	5f e3       	ldi	r21, 0x3F	; 63
    1f82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f86:	88 23       	and	r24, r24
    1f88:	44 f4       	brge	.+16     	; 0x1f9a <main+0x66c>
		__ticks = 1;
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	e5 5b       	subi	r30, 0xB5	; 181
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	80 83       	st	Z, r24
    1f98:	64 c0       	rjmp	.+200    	; 0x2062 <main+0x734>
	else if (__tmp > 65535)
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	e3 5b       	subi	r30, 0xB3	; 179
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	60 81       	ld	r22, Z
    1fa2:	71 81       	ldd	r23, Z+1	; 0x01
    1fa4:	82 81       	ldd	r24, Z+2	; 0x02
    1fa6:	93 81       	ldd	r25, Z+3	; 0x03
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	4f e7       	ldi	r20, 0x7F	; 127
    1fae:	57 e4       	ldi	r21, 0x47	; 71
    1fb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb4:	18 16       	cp	r1, r24
    1fb6:	0c f0       	brlt	.+2      	; 0x1fba <main+0x68c>
    1fb8:	43 c0       	rjmp	.+134    	; 0x2040 <main+0x712>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fba:	fe 01       	movw	r30, r28
    1fbc:	ef 5a       	subi	r30, 0xAF	; 175
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	60 81       	ld	r22, Z
    1fc2:	71 81       	ldd	r23, Z+1	; 0x01
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e2       	ldi	r20, 0x20	; 32
    1fce:	51 e4       	ldi	r21, 0x41	; 65
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8e 01       	movw	r16, r28
    1fda:	05 5b       	subi	r16, 0xB5	; 181
    1fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	f8 01       	movw	r30, r16
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
    1ff0:	1f c0       	rjmp	.+62     	; 0x2030 <main+0x702>
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e7 5b       	subi	r30, 0xB7	; 183
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 e9       	ldi	r24, 0x90	; 144
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	80 83       	st	Z, r24
    2000:	fe 01       	movw	r30, r28
    2002:	e7 5b       	subi	r30, 0xB7	; 183
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <main+0x6dc>
    200e:	fe 01       	movw	r30, r28
    2010:	e7 5b       	subi	r30, 0xB7	; 183
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2018:	de 01       	movw	r26, r28
    201a:	a5 5b       	subi	r26, 0xB5	; 181
    201c:	bf 4f       	sbci	r27, 0xFF	; 255
    201e:	fe 01       	movw	r30, r28
    2020:	e5 5b       	subi	r30, 0xB5	; 181
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 81       	ld	r24, Z
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	11 96       	adiw	r26, 0x01	; 1
    202c:	9c 93       	st	X, r25
    202e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2030:	fe 01       	movw	r30, r28
    2032:	e5 5b       	subi	r30, 0xB5	; 181
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 81       	ld	r24, Z
    2038:	91 81       	ldd	r25, Z+1	; 0x01
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	d1 f6       	brne	.-76     	; 0x1ff2 <main+0x6c4>
    203e:	27 c0       	rjmp	.+78     	; 0x208e <main+0x760>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2040:	8e 01       	movw	r16, r28
    2042:	05 5b       	subi	r16, 0xB5	; 181
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
    2046:	fe 01       	movw	r30, r28
    2048:	e3 5b       	subi	r30, 0xB3	; 179
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	60 81       	ld	r22, Z
    204e:	71 81       	ldd	r23, Z+1	; 0x01
    2050:	82 81       	ldd	r24, Z+2	; 0x02
    2052:	93 81       	ldd	r25, Z+3	; 0x03
    2054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	f8 01       	movw	r30, r16
    205e:	91 83       	std	Z+1, r25	; 0x01
    2060:	80 83       	st	Z, r24
    2062:	de 01       	movw	r26, r28
    2064:	a9 5b       	subi	r26, 0xB9	; 185
    2066:	bf 4f       	sbci	r27, 0xFF	; 255
    2068:	fe 01       	movw	r30, r28
    206a:	e5 5b       	subi	r30, 0xB5	; 181
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	8d 93       	st	X+, r24
    2074:	9c 93       	st	X, r25
    2076:	fe 01       	movw	r30, r28
    2078:	e9 5b       	subi	r30, 0xB9	; 185
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 81       	ld	r24, Z
    207e:	91 81       	ldd	r25, Z+1	; 0x01
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <main+0x752>
    2084:	fe 01       	movw	r30, r28
    2086:	e9 5b       	subi	r30, 0xB9	; 185
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	80 83       	st	Z, r24
			_delay_ms(10);
			re_entered=UART_recieveByte()<<8;
    208e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <UART_recieveByte>
    2092:	88 2f       	mov	r24, r24
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	98 2f       	mov	r25, r24
    2098:	88 27       	eor	r24, r24
    209a:	fe 01       	movw	r30, r28
    209c:	ed 57       	subi	r30, 0x7D	; 125
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	80 83       	st	Z, r24
    20a4:	fe 01       	movw	r30, r28
    20a6:	ed 5b       	subi	r30, 0xBD	; 189
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a0 e2       	ldi	r26, 0x20	; 32
    20b0:	b1 e4       	ldi	r27, 0x41	; 65
    20b2:	80 83       	st	Z, r24
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	a2 83       	std	Z+2, r26	; 0x02
    20b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ba:	8e 01       	movw	r16, r28
    20bc:	01 5c       	subi	r16, 0xC1	; 193
    20be:	1f 4f       	sbci	r17, 0xFF	; 255
    20c0:	fe 01       	movw	r30, r28
    20c2:	ed 5b       	subi	r30, 0xBD	; 189
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	60 81       	ld	r22, Z
    20c8:	71 81       	ldd	r23, Z+1	; 0x01
    20ca:	82 81       	ldd	r24, Z+2	; 0x02
    20cc:	93 81       	ldd	r25, Z+3	; 0x03
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4a e7       	ldi	r20, 0x7A	; 122
    20d4:	55 e4       	ldi	r21, 0x45	; 69
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	f8 01       	movw	r30, r16
    20e0:	80 83       	st	Z, r24
    20e2:	91 83       	std	Z+1, r25	; 0x01
    20e4:	a2 83       	std	Z+2, r26	; 0x02
    20e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20e8:	fe 01       	movw	r30, r28
    20ea:	ff 96       	adiw	r30, 0x3f	; 63
    20ec:	60 81       	ld	r22, Z
    20ee:	71 81       	ldd	r23, Z+1	; 0x01
    20f0:	82 81       	ldd	r24, Z+2	; 0x02
    20f2:	93 81       	ldd	r25, Z+3	; 0x03
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f e3       	ldi	r21, 0x3F	; 63
    20fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2100:	88 23       	and	r24, r24
    2102:	2c f4       	brge	.+10     	; 0x210e <main+0x7e0>
		__ticks = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9e af       	std	Y+62, r25	; 0x3e
    210a:	8d af       	std	Y+61, r24	; 0x3d
    210c:	46 c0       	rjmp	.+140    	; 0x219a <main+0x86c>
	else if (__tmp > 65535)
    210e:	fe 01       	movw	r30, r28
    2110:	ff 96       	adiw	r30, 0x3f	; 63
    2112:	60 81       	ld	r22, Z
    2114:	71 81       	ldd	r23, Z+1	; 0x01
    2116:	82 81       	ldd	r24, Z+2	; 0x02
    2118:	93 81       	ldd	r25, Z+3	; 0x03
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	3f ef       	ldi	r19, 0xFF	; 255
    211e:	4f e7       	ldi	r20, 0x7F	; 127
    2120:	57 e4       	ldi	r21, 0x47	; 71
    2122:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2126:	18 16       	cp	r1, r24
    2128:	64 f5       	brge	.+88     	; 0x2182 <main+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212a:	fe 01       	movw	r30, r28
    212c:	ed 5b       	subi	r30, 0xBD	; 189
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	60 81       	ld	r22, Z
    2132:	71 81       	ldd	r23, Z+1	; 0x01
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e2       	ldi	r20, 0x20	; 32
    213e:	51 e4       	ldi	r21, 0x41	; 65
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	bc 01       	movw	r22, r24
    214a:	cd 01       	movw	r24, r26
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	9e af       	std	Y+62, r25	; 0x3e
    2156:	8d af       	std	Y+61, r24	; 0x3d
    2158:	0f c0       	rjmp	.+30     	; 0x2178 <main+0x84a>
    215a:	80 e9       	ldi	r24, 0x90	; 144
    215c:	91 e0       	ldi	r25, 0x01	; 1
    215e:	9c af       	std	Y+60, r25	; 0x3c
    2160:	8b af       	std	Y+59, r24	; 0x3b
    2162:	8b ad       	ldd	r24, Y+59	; 0x3b
    2164:	9c ad       	ldd	r25, Y+60	; 0x3c
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <main+0x838>
    216a:	9c af       	std	Y+60, r25	; 0x3c
    216c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2170:	9e ad       	ldd	r25, Y+62	; 0x3e
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	9e af       	std	Y+62, r25	; 0x3e
    2176:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2178:	8d ad       	ldd	r24, Y+61	; 0x3d
    217a:	9e ad       	ldd	r25, Y+62	; 0x3e
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	69 f7       	brne	.-38     	; 0x215a <main+0x82c>
    2180:	16 c0       	rjmp	.+44     	; 0x21ae <main+0x880>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2182:	fe 01       	movw	r30, r28
    2184:	ff 96       	adiw	r30, 0x3f	; 63
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9e af       	std	Y+62, r25	; 0x3e
    2198:	8d af       	std	Y+61, r24	; 0x3d
    219a:	8d ad       	ldd	r24, Y+61	; 0x3d
    219c:	9e ad       	ldd	r25, Y+62	; 0x3e
    219e:	9a af       	std	Y+58, r25	; 0x3a
    21a0:	89 af       	std	Y+57, r24	; 0x39
    21a2:	89 ad       	ldd	r24, Y+57	; 0x39
    21a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <main+0x878>
    21aa:	9a af       	std	Y+58, r25	; 0x3a
    21ac:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(10);
			re_entered|=UART_recieveByte();
    21ae:	0e 94 40 16 	call	0x2c80	; 0x2c80 <UART_recieveByte>
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	de 01       	movw	r26, r28
    21b8:	ad 57       	subi	r26, 0x7D	; 125
    21ba:	bf 4f       	sbci	r27, 0xFF	; 255
    21bc:	fe 01       	movw	r30, r28
    21be:	ed 57       	subi	r30, 0x7D	; 125
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	82 2b       	or	r24, r18
    21c8:	93 2b       	or	r25, r19
    21ca:	8d 93       	st	X+, r24
    21cc:	9c 93       	st	X, r25
			/* If they are same write the password in memory and return success*/
			if(password==re_entered){
    21ce:	fe 01       	movw	r30, r28
    21d0:	eb 57       	subi	r30, 0x7B	; 123
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	de 01       	movw	r26, r28
    21d6:	ad 57       	subi	r26, 0x7D	; 125
    21d8:	bf 4f       	sbci	r27, 0xFF	; 255
    21da:	20 81       	ld	r18, Z
    21dc:	31 81       	ldd	r19, Z+1	; 0x01
    21de:	8d 91       	ld	r24, X+
    21e0:	9c 91       	ld	r25, X
    21e2:	11 97       	sbiw	r26, 0x01	; 1
    21e4:	28 17       	cp	r18, r24
    21e6:	39 07       	cpc	r19, r25
    21e8:	09 f0       	breq	.+2      	; 0x21ec <main+0x8be>
    21ea:	8c c0       	rjmp	.+280    	; 0x2304 <main+0x9d6>
				EEPROM_writeByte(0x0311,password>>8);
    21ec:	fe 01       	movw	r30, r28
    21ee:	eb 57       	subi	r30, 0x7B	; 123
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	80 81       	ld	r24, Z
    21f4:	91 81       	ldd	r25, Z+1	; 0x01
    21f6:	89 2f       	mov	r24, r25
    21f8:	99 27       	eor	r25, r25
    21fa:	28 2f       	mov	r18, r24
    21fc:	81 e1       	ldi	r24, 0x11	; 17
    21fe:	93 e0       	ldi	r25, 0x03	; 3
    2200:	62 2f       	mov	r22, r18
    2202:	0e 94 9f 08 	call	0x113e	; 0x113e <EEPROM_writeByte>
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a0 e2       	ldi	r26, 0x20	; 32
    220c:	b1 e4       	ldi	r27, 0x41	; 65
    220e:	8d ab       	std	Y+53, r24	; 0x35
    2210:	9e ab       	std	Y+54, r25	; 0x36
    2212:	af ab       	std	Y+55, r26	; 0x37
    2214:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2216:	6d a9       	ldd	r22, Y+53	; 0x35
    2218:	7e a9       	ldd	r23, Y+54	; 0x36
    221a:	8f a9       	ldd	r24, Y+55	; 0x37
    221c:	98 ad       	ldd	r25, Y+56	; 0x38
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	4a e7       	ldi	r20, 0x7A	; 122
    2224:	55 e4       	ldi	r21, 0x45	; 69
    2226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	89 ab       	std	Y+49, r24	; 0x31
    2230:	9a ab       	std	Y+50, r25	; 0x32
    2232:	ab ab       	std	Y+51, r26	; 0x33
    2234:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2236:	69 a9       	ldd	r22, Y+49	; 0x31
    2238:	7a a9       	ldd	r23, Y+50	; 0x32
    223a:	8b a9       	ldd	r24, Y+51	; 0x33
    223c:	9c a9       	ldd	r25, Y+52	; 0x34
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e8       	ldi	r20, 0x80	; 128
    2244:	5f e3       	ldi	r21, 0x3F	; 63
    2246:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    224a:	88 23       	and	r24, r24
    224c:	2c f4       	brge	.+10     	; 0x2258 <main+0x92a>
		__ticks = 1;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	98 ab       	std	Y+48, r25	; 0x30
    2254:	8f a7       	std	Y+47, r24	; 0x2f
    2256:	3f c0       	rjmp	.+126    	; 0x22d6 <main+0x9a8>
	else if (__tmp > 65535)
    2258:	69 a9       	ldd	r22, Y+49	; 0x31
    225a:	7a a9       	ldd	r23, Y+50	; 0x32
    225c:	8b a9       	ldd	r24, Y+51	; 0x33
    225e:	9c a9       	ldd	r25, Y+52	; 0x34
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	3f ef       	ldi	r19, 0xFF	; 255
    2264:	4f e7       	ldi	r20, 0x7F	; 127
    2266:	57 e4       	ldi	r21, 0x47	; 71
    2268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    226c:	18 16       	cp	r1, r24
    226e:	4c f5       	brge	.+82     	; 0x22c2 <main+0x994>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2270:	6d a9       	ldd	r22, Y+53	; 0x35
    2272:	7e a9       	ldd	r23, Y+54	; 0x36
    2274:	8f a9       	ldd	r24, Y+55	; 0x37
    2276:	98 ad       	ldd	r25, Y+56	; 0x38
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e2       	ldi	r20, 0x20	; 32
    227e:	51 e4       	ldi	r21, 0x41	; 65
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	bc 01       	movw	r22, r24
    228a:	cd 01       	movw	r24, r26
    228c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	98 ab       	std	Y+48, r25	; 0x30
    2296:	8f a7       	std	Y+47, r24	; 0x2f
    2298:	0f c0       	rjmp	.+30     	; 0x22b8 <main+0x98a>
    229a:	80 e9       	ldi	r24, 0x90	; 144
    229c:	91 e0       	ldi	r25, 0x01	; 1
    229e:	9e a7       	std	Y+46, r25	; 0x2e
    22a0:	8d a7       	std	Y+45, r24	; 0x2d
    22a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    22a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <main+0x978>
    22aa:	9e a7       	std	Y+46, r25	; 0x2e
    22ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    22b0:	98 a9       	ldd	r25, Y+48	; 0x30
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	98 ab       	std	Y+48, r25	; 0x30
    22b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ba:	98 a9       	ldd	r25, Y+48	; 0x30
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	69 f7       	brne	.-38     	; 0x229a <main+0x96c>
    22c0:	14 c0       	rjmp	.+40     	; 0x22ea <main+0x9bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c2:	69 a9       	ldd	r22, Y+49	; 0x31
    22c4:	7a a9       	ldd	r23, Y+50	; 0x32
    22c6:	8b a9       	ldd	r24, Y+51	; 0x33
    22c8:	9c a9       	ldd	r25, Y+52	; 0x34
    22ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	98 ab       	std	Y+48, r25	; 0x30
    22d4:	8f a7       	std	Y+47, r24	; 0x2f
    22d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22d8:	98 a9       	ldd	r25, Y+48	; 0x30
    22da:	9c a7       	std	Y+44, r25	; 0x2c
    22dc:	8b a7       	std	Y+43, r24	; 0x2b
    22de:	8b a5       	ldd	r24, Y+43	; 0x2b
    22e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <main+0x9b4>
    22e6:	9c a7       	std	Y+44, r25	; 0x2c
    22e8:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(10);
				EEPROM_writeByte(0x0330, password&0x00ff);
    22ea:	fe 01       	movw	r30, r28
    22ec:	eb 57       	subi	r30, 0x7B	; 123
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	20 81       	ld	r18, Z
    22f2:	80 e3       	ldi	r24, 0x30	; 48
    22f4:	93 e0       	ldi	r25, 0x03	; 3
    22f6:	62 2f       	mov	r22, r18
    22f8:	0e 94 9f 08 	call	0x113e	; 0x113e <EEPROM_writeByte>

				UART_sendByte(SUCCESS);
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	0e 94 29 16 	call	0x2c52	; 0x2c52 <UART_sendByte>
    2302:	92 cb       	rjmp	.-2268   	; 0x1a28 <main+0xfa>

			}else{
				UART_sendByte(ERROR);
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	0e 94 29 16 	call	0x2c52	; 0x2c52 <UART_sendByte>
    230a:	8e cb       	rjmp	.-2276   	; 0x1a28 <main+0xfa>
			}
		}else if(message==Activate_Buzzer){
    230c:	fe 01       	movw	r30, r28
    230e:	e7 57       	subi	r30, 0x77	; 119
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	80 81       	ld	r24, Z
    2314:	8f 3b       	cpi	r24, 0xBF	; 191
    2316:	09 f0       	breq	.+2      	; 0x231a <main+0x9ec>
    2318:	67 c0       	rjmp	.+206    	; 0x23e8 <main+0xaba>
			Buzzer_on();
    231a:	0e 94 87 08 	call	0x110e	; 0x110e <Buzzer_on>
			 * start value =0
			 * compare value = 31250  --> count 1 sec
			 * prescalar = 256
			 * mode of time is compare mode
			 * */
			Timer1_ConfigType config_timer1={0,31250,CLOCK_256,CTC};
    231e:	ce 01       	movw	r24, r28
    2320:	8c 56       	subi	r24, 0x6C	; 108
    2322:	9f 4f       	sbci	r25, 0xFF	; 255
    2324:	ce 54       	subi	r28, 0x4E	; 78
    2326:	df 4f       	sbci	r29, 0xFF	; 255
    2328:	99 83       	std	Y+1, r25	; 0x01
    232a:	88 83       	st	Y, r24
    232c:	c2 5b       	subi	r28, 0xB2	; 178
    232e:	d0 40       	sbci	r29, 0x00	; 0
    2330:	8a e7       	ldi	r24, 0x7A	; 122
    2332:	91 e0       	ldi	r25, 0x01	; 1
    2334:	cc 54       	subi	r28, 0x4C	; 76
    2336:	df 4f       	sbci	r29, 0xFF	; 255
    2338:	99 83       	std	Y+1, r25	; 0x01
    233a:	88 83       	st	Y, r24
    233c:	c4 5b       	subi	r28, 0xB4	; 180
    233e:	d0 40       	sbci	r29, 0x00	; 0
    2340:	96 e0       	ldi	r25, 0x06	; 6
    2342:	ca 54       	subi	r28, 0x4A	; 74
    2344:	df 4f       	sbci	r29, 0xFF	; 255
    2346:	98 83       	st	Y, r25
    2348:	c6 5b       	subi	r28, 0xB6	; 182
    234a:	d0 40       	sbci	r29, 0x00	; 0
    234c:	cc 54       	subi	r28, 0x4C	; 76
    234e:	df 4f       	sbci	r29, 0xFF	; 255
    2350:	e8 81       	ld	r30, Y
    2352:	f9 81       	ldd	r31, Y+1	; 0x01
    2354:	c4 5b       	subi	r28, 0xB4	; 180
    2356:	d0 40       	sbci	r29, 0x00	; 0
    2358:	00 80       	ld	r0, Z
    235a:	cc 54       	subi	r28, 0x4C	; 76
    235c:	df 4f       	sbci	r29, 0xFF	; 255
    235e:	88 81       	ld	r24, Y
    2360:	99 81       	ldd	r25, Y+1	; 0x01
    2362:	c4 5b       	subi	r28, 0xB4	; 180
    2364:	d0 40       	sbci	r29, 0x00	; 0
    2366:	01 96       	adiw	r24, 0x01	; 1
    2368:	cc 54       	subi	r28, 0x4C	; 76
    236a:	df 4f       	sbci	r29, 0xFF	; 255
    236c:	99 83       	std	Y+1, r25	; 0x01
    236e:	88 83       	st	Y, r24
    2370:	c4 5b       	subi	r28, 0xB4	; 180
    2372:	d0 40       	sbci	r29, 0x00	; 0
    2374:	ce 54       	subi	r28, 0x4E	; 78
    2376:	df 4f       	sbci	r29, 0xFF	; 255
    2378:	e8 81       	ld	r30, Y
    237a:	f9 81       	ldd	r31, Y+1	; 0x01
    237c:	c2 5b       	subi	r28, 0xB2	; 178
    237e:	d0 40       	sbci	r29, 0x00	; 0
    2380:	00 82       	st	Z, r0
    2382:	ce 54       	subi	r28, 0x4E	; 78
    2384:	df 4f       	sbci	r29, 0xFF	; 255
    2386:	88 81       	ld	r24, Y
    2388:	99 81       	ldd	r25, Y+1	; 0x01
    238a:	c2 5b       	subi	r28, 0xB2	; 178
    238c:	d0 40       	sbci	r29, 0x00	; 0
    238e:	01 96       	adiw	r24, 0x01	; 1
    2390:	ce 54       	subi	r28, 0x4E	; 78
    2392:	df 4f       	sbci	r29, 0xFF	; 255
    2394:	99 83       	std	Y+1, r25	; 0x01
    2396:	88 83       	st	Y, r24
    2398:	c2 5b       	subi	r28, 0xB2	; 178
    239a:	d0 40       	sbci	r29, 0x00	; 0
    239c:	ca 54       	subi	r28, 0x4A	; 74
    239e:	df 4f       	sbci	r29, 0xFF	; 255
    23a0:	98 81       	ld	r25, Y
    23a2:	c6 5b       	subi	r28, 0xB6	; 182
    23a4:	d0 40       	sbci	r29, 0x00	; 0
    23a6:	91 50       	subi	r25, 0x01	; 1
    23a8:	ca 54       	subi	r28, 0x4A	; 74
    23aa:	df 4f       	sbci	r29, 0xFF	; 255
    23ac:	98 83       	st	Y, r25
    23ae:	c6 5b       	subi	r28, 0xB6	; 182
    23b0:	d0 40       	sbci	r29, 0x00	; 0
    23b2:	ca 54       	subi	r28, 0x4A	; 74
    23b4:	df 4f       	sbci	r29, 0xFF	; 255
    23b6:	e8 81       	ld	r30, Y
    23b8:	c6 5b       	subi	r28, 0xB6	; 182
    23ba:	d0 40       	sbci	r29, 0x00	; 0
    23bc:	ee 23       	and	r30, r30
    23be:	31 f6       	brne	.-116    	; 0x234c <main+0xa1e>
			Timer1_setCallBack(BuzzerOffCallBack);
    23c0:	88 e2       	ldi	r24, 0x28	; 40
    23c2:	95 e1       	ldi	r25, 0x15	; 21
    23c4:	0e 94 48 08 	call	0x1090	; 0x1090 <Timer1_setCallBack>
			Timer1_init(&config_timer1);
    23c8:	ce 01       	movw	r24, r28
    23ca:	8c 56       	subi	r24, 0x6C	; 108
    23cc:	9f 4f       	sbci	r25, 0xFF	; 255
    23ce:	0e 94 fe 07 	call	0xffc	; 0xffc <Timer1_init>
			while(g_buzzer!=60);
    23d2:	80 91 8d 01 	lds	r24, 0x018D
    23d6:	8c 33       	cpi	r24, 0x3C	; 60
    23d8:	e1 f7       	brne	.-8      	; 0x23d2 <main+0xaa4>
			g_buzzer=0;
    23da:	10 92 8d 01 	sts	0x018D, r1
			Timer1_deInit();
    23de:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Timer1_deInit>
			Buzzer_off();
    23e2:	0e 94 93 08 	call	0x1126	; 0x1126 <Buzzer_off>
    23e6:	20 cb       	rjmp	.-2496   	; 0x1a28 <main+0xfa>
		}else if(message==Check_Password){
    23e8:	fe 01       	movw	r30, r28
    23ea:	e7 57       	subi	r30, 0x77	; 119
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	8f 3f       	cpi	r24, 0xFF	; 255
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <main+0xac8>
    23f4:	b6 c1       	rjmp	.+876    	; 0x2762 <main+0xe34>
			 * get password fom HMI MC
			 * */
			uint16 passwordRead;
			uint16 password;
			uint8 val;
			passwordRead=UART_recieveByte()<<8;
    23f6:	0e 94 40 16 	call	0x2c80	; 0x2c80 <UART_recieveByte>
    23fa:	88 2f       	mov	r24, r24
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	98 2f       	mov	r25, r24
    2400:	88 27       	eor	r24, r24
    2402:	fe 01       	movw	r30, r28
    2404:	ef 57       	subi	r30, 0x7F	; 127
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	91 83       	std	Z+1, r25	; 0x01
    240a:	80 83       	st	Z, r24
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	a0 e2       	ldi	r26, 0x20	; 32
    2412:	b1 e4       	ldi	r27, 0x41	; 65
    2414:	8f a3       	std	Y+39, r24	; 0x27
    2416:	98 a7       	std	Y+40, r25	; 0x28
    2418:	a9 a7       	std	Y+41, r26	; 0x29
    241a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241c:	6f a1       	ldd	r22, Y+39	; 0x27
    241e:	78 a5       	ldd	r23, Y+40	; 0x28
    2420:	89 a5       	ldd	r24, Y+41	; 0x29
    2422:	9a a5       	ldd	r25, Y+42	; 0x2a
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	4a e7       	ldi	r20, 0x7A	; 122
    242a:	55 e4       	ldi	r21, 0x45	; 69
    242c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	8b a3       	std	Y+35, r24	; 0x23
    2436:	9c a3       	std	Y+36, r25	; 0x24
    2438:	ad a3       	std	Y+37, r26	; 0x25
    243a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    243c:	6b a1       	ldd	r22, Y+35	; 0x23
    243e:	7c a1       	ldd	r23, Y+36	; 0x24
    2440:	8d a1       	ldd	r24, Y+37	; 0x25
    2442:	9e a1       	ldd	r25, Y+38	; 0x26
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e8       	ldi	r20, 0x80	; 128
    244a:	5f e3       	ldi	r21, 0x3F	; 63
    244c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2450:	88 23       	and	r24, r24
    2452:	2c f4       	brge	.+10     	; 0x245e <main+0xb30>
		__ticks = 1;
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	9a a3       	std	Y+34, r25	; 0x22
    245a:	89 a3       	std	Y+33, r24	; 0x21
    245c:	3f c0       	rjmp	.+126    	; 0x24dc <main+0xbae>
	else if (__tmp > 65535)
    245e:	6b a1       	ldd	r22, Y+35	; 0x23
    2460:	7c a1       	ldd	r23, Y+36	; 0x24
    2462:	8d a1       	ldd	r24, Y+37	; 0x25
    2464:	9e a1       	ldd	r25, Y+38	; 0x26
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	3f ef       	ldi	r19, 0xFF	; 255
    246a:	4f e7       	ldi	r20, 0x7F	; 127
    246c:	57 e4       	ldi	r21, 0x47	; 71
    246e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2472:	18 16       	cp	r1, r24
    2474:	4c f5       	brge	.+82     	; 0x24c8 <main+0xb9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2476:	6f a1       	ldd	r22, Y+39	; 0x27
    2478:	78 a5       	ldd	r23, Y+40	; 0x28
    247a:	89 a5       	ldd	r24, Y+41	; 0x29
    247c:	9a a5       	ldd	r25, Y+42	; 0x2a
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e2       	ldi	r20, 0x20	; 32
    2484:	51 e4       	ldi	r21, 0x41	; 65
    2486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	bc 01       	movw	r22, r24
    2490:	cd 01       	movw	r24, r26
    2492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	9a a3       	std	Y+34, r25	; 0x22
    249c:	89 a3       	std	Y+33, r24	; 0x21
    249e:	0f c0       	rjmp	.+30     	; 0x24be <main+0xb90>
    24a0:	80 e9       	ldi	r24, 0x90	; 144
    24a2:	91 e0       	ldi	r25, 0x01	; 1
    24a4:	98 a3       	std	Y+32, r25	; 0x20
    24a6:	8f 8f       	std	Y+31, r24	; 0x1f
    24a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24aa:	98 a1       	ldd	r25, Y+32	; 0x20
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <main+0xb7e>
    24b0:	98 a3       	std	Y+32, r25	; 0x20
    24b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b4:	89 a1       	ldd	r24, Y+33	; 0x21
    24b6:	9a a1       	ldd	r25, Y+34	; 0x22
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	9a a3       	std	Y+34, r25	; 0x22
    24bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24be:	89 a1       	ldd	r24, Y+33	; 0x21
    24c0:	9a a1       	ldd	r25, Y+34	; 0x22
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	69 f7       	brne	.-38     	; 0x24a0 <main+0xb72>
    24c6:	14 c0       	rjmp	.+40     	; 0x24f0 <main+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c8:	6b a1       	ldd	r22, Y+35	; 0x23
    24ca:	7c a1       	ldd	r23, Y+36	; 0x24
    24cc:	8d a1       	ldd	r24, Y+37	; 0x25
    24ce:	9e a1       	ldd	r25, Y+38	; 0x26
    24d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	9a a3       	std	Y+34, r25	; 0x22
    24da:	89 a3       	std	Y+33, r24	; 0x21
    24dc:	89 a1       	ldd	r24, Y+33	; 0x21
    24de:	9a a1       	ldd	r25, Y+34	; 0x22
    24e0:	9e 8f       	std	Y+30, r25	; 0x1e
    24e2:	8d 8f       	std	Y+29, r24	; 0x1d
    24e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <main+0xbba>
    24ec:	9e 8f       	std	Y+30, r25	; 0x1e
    24ee:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			passwordRead|=UART_recieveByte();
    24f0:	0e 94 40 16 	call	0x2c80	; 0x2c80 <UART_recieveByte>
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	de 01       	movw	r26, r28
    24fa:	af 57       	subi	r26, 0x7F	; 127
    24fc:	bf 4f       	sbci	r27, 0xFF	; 255
    24fe:	fe 01       	movw	r30, r28
    2500:	ef 57       	subi	r30, 0x7F	; 127
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	80 81       	ld	r24, Z
    2506:	91 81       	ldd	r25, Z+1	; 0x01
    2508:	82 2b       	or	r24, r18
    250a:	93 2b       	or	r25, r19
    250c:	8d 93       	st	X+, r24
    250e:	9c 93       	st	X, r25
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e2       	ldi	r26, 0x20	; 32
    2516:	b1 e4       	ldi	r27, 0x41	; 65
    2518:	89 8f       	std	Y+25, r24	; 0x19
    251a:	9a 8f       	std	Y+26, r25	; 0x1a
    251c:	ab 8f       	std	Y+27, r26	; 0x1b
    251e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2520:	69 8d       	ldd	r22, Y+25	; 0x19
    2522:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2524:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2526:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	4a e7       	ldi	r20, 0x7A	; 122
    252e:	55 e4       	ldi	r21, 0x45	; 69
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	8d 8b       	std	Y+21, r24	; 0x15
    253a:	9e 8b       	std	Y+22, r25	; 0x16
    253c:	af 8b       	std	Y+23, r26	; 0x17
    253e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2540:	6d 89       	ldd	r22, Y+21	; 0x15
    2542:	7e 89       	ldd	r23, Y+22	; 0x16
    2544:	8f 89       	ldd	r24, Y+23	; 0x17
    2546:	98 8d       	ldd	r25, Y+24	; 0x18
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e8       	ldi	r20, 0x80	; 128
    254e:	5f e3       	ldi	r21, 0x3F	; 63
    2550:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2554:	88 23       	and	r24, r24
    2556:	2c f4       	brge	.+10     	; 0x2562 <main+0xc34>
		__ticks = 1;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	9c 8b       	std	Y+20, r25	; 0x14
    255e:	8b 8b       	std	Y+19, r24	; 0x13
    2560:	3f c0       	rjmp	.+126    	; 0x25e0 <main+0xcb2>
	else if (__tmp > 65535)
    2562:	6d 89       	ldd	r22, Y+21	; 0x15
    2564:	7e 89       	ldd	r23, Y+22	; 0x16
    2566:	8f 89       	ldd	r24, Y+23	; 0x17
    2568:	98 8d       	ldd	r25, Y+24	; 0x18
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	3f ef       	ldi	r19, 0xFF	; 255
    256e:	4f e7       	ldi	r20, 0x7F	; 127
    2570:	57 e4       	ldi	r21, 0x47	; 71
    2572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2576:	18 16       	cp	r1, r24
    2578:	4c f5       	brge	.+82     	; 0x25cc <main+0xc9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257a:	69 8d       	ldd	r22, Y+25	; 0x19
    257c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    257e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2580:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e2       	ldi	r20, 0x20	; 32
    2588:	51 e4       	ldi	r21, 0x41	; 65
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	9c 8b       	std	Y+20, r25	; 0x14
    25a0:	8b 8b       	std	Y+19, r24	; 0x13
    25a2:	0f c0       	rjmp	.+30     	; 0x25c2 <main+0xc94>
    25a4:	80 e9       	ldi	r24, 0x90	; 144
    25a6:	91 e0       	ldi	r25, 0x01	; 1
    25a8:	9a 8b       	std	Y+18, r25	; 0x12
    25aa:	89 8b       	std	Y+17, r24	; 0x11
    25ac:	89 89       	ldd	r24, Y+17	; 0x11
    25ae:	9a 89       	ldd	r25, Y+18	; 0x12
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <main+0xc82>
    25b4:	9a 8b       	std	Y+18, r25	; 0x12
    25b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ba:	9c 89       	ldd	r25, Y+20	; 0x14
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	9c 8b       	std	Y+20, r25	; 0x14
    25c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c2:	8b 89       	ldd	r24, Y+19	; 0x13
    25c4:	9c 89       	ldd	r25, Y+20	; 0x14
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	69 f7       	brne	.-38     	; 0x25a4 <main+0xc76>
    25ca:	14 c0       	rjmp	.+40     	; 0x25f4 <main+0xcc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25cc:	6d 89       	ldd	r22, Y+21	; 0x15
    25ce:	7e 89       	ldd	r23, Y+22	; 0x16
    25d0:	8f 89       	ldd	r24, Y+23	; 0x17
    25d2:	98 8d       	ldd	r25, Y+24	; 0x18
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9c 8b       	std	Y+20, r25	; 0x14
    25de:	8b 8b       	std	Y+19, r24	; 0x13
    25e0:	8b 89       	ldd	r24, Y+19	; 0x13
    25e2:	9c 89       	ldd	r25, Y+20	; 0x14
    25e4:	98 8b       	std	Y+16, r25	; 0x10
    25e6:	8f 87       	std	Y+15, r24	; 0x0f
    25e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ea:	98 89       	ldd	r25, Y+16	; 0x10
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <main+0xcbe>
    25f0:	98 8b       	std	Y+16, r25	; 0x10
    25f2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			/*
			 * get password saved in memory
			 * */
			EEPROM_readByte(0x0311, &val);
    25f4:	9e 01       	movw	r18, r28
    25f6:	26 56       	subi	r18, 0x66	; 102
    25f8:	3f 4f       	sbci	r19, 0xFF	; 255
    25fa:	81 e1       	ldi	r24, 0x11	; 17
    25fc:	93 e0       	ldi	r25, 0x03	; 3
    25fe:	b9 01       	movw	r22, r18
    2600:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <EEPROM_readByte>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e2       	ldi	r26, 0x20	; 32
    260a:	b1 e4       	ldi	r27, 0x41	; 65
    260c:	8b 87       	std	Y+11, r24	; 0x0b
    260e:	9c 87       	std	Y+12, r25	; 0x0c
    2610:	ad 87       	std	Y+13, r26	; 0x0d
    2612:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2614:	6b 85       	ldd	r22, Y+11	; 0x0b
    2616:	7c 85       	ldd	r23, Y+12	; 0x0c
    2618:	8d 85       	ldd	r24, Y+13	; 0x0d
    261a:	9e 85       	ldd	r25, Y+14	; 0x0e
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4a e7       	ldi	r20, 0x7A	; 122
    2622:	55 e4       	ldi	r21, 0x45	; 69
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	8f 83       	std	Y+7, r24	; 0x07
    262e:	98 87       	std	Y+8, r25	; 0x08
    2630:	a9 87       	std	Y+9, r26	; 0x09
    2632:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2634:	6f 81       	ldd	r22, Y+7	; 0x07
    2636:	78 85       	ldd	r23, Y+8	; 0x08
    2638:	89 85       	ldd	r24, Y+9	; 0x09
    263a:	9a 85       	ldd	r25, Y+10	; 0x0a
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	2c f4       	brge	.+10     	; 0x2656 <main+0xd28>
		__ticks = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9e 83       	std	Y+6, r25	; 0x06
    2652:	8d 83       	std	Y+5, r24	; 0x05
    2654:	3f c0       	rjmp	.+126    	; 0x26d4 <main+0xda6>
	else if (__tmp > 65535)
    2656:	6f 81       	ldd	r22, Y+7	; 0x07
    2658:	78 85       	ldd	r23, Y+8	; 0x08
    265a:	89 85       	ldd	r24, Y+9	; 0x09
    265c:	9a 85       	ldd	r25, Y+10	; 0x0a
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    266a:	18 16       	cp	r1, r24
    266c:	4c f5       	brge	.+82     	; 0x26c0 <main+0xd92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2670:	7c 85       	ldd	r23, Y+12	; 0x0c
    2672:	8d 85       	ldd	r24, Y+13	; 0x0d
    2674:	9e 85       	ldd	r25, Y+14	; 0x0e
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9e 83       	std	Y+6, r25	; 0x06
    2694:	8d 83       	std	Y+5, r24	; 0x05
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <main+0xd88>
    2698:	80 e9       	ldi	r24, 0x90	; 144
    269a:	91 e0       	ldi	r25, 0x01	; 1
    269c:	9c 83       	std	Y+4, r25	; 0x04
    269e:	8b 83       	std	Y+3, r24	; 0x03
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	9c 81       	ldd	r25, Y+4	; 0x04
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <main+0xd76>
    26a8:	9c 83       	std	Y+4, r25	; 0x04
    26aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
    26ae:	9e 81       	ldd	r25, Y+6	; 0x06
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f7       	brne	.-38     	; 0x2698 <main+0xd6a>
    26be:	14 c0       	rjmp	.+40     	; 0x26e8 <main+0xdba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	6f 81       	ldd	r22, Y+7	; 0x07
    26c2:	78 85       	ldd	r23, Y+8	; 0x08
    26c4:	89 85       	ldd	r24, Y+9	; 0x09
    26c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9e 83       	std	Y+6, r25	; 0x06
    26d2:	8d 83       	std	Y+5, r24	; 0x05
    26d4:	8d 81       	ldd	r24, Y+5	; 0x05
    26d6:	9e 81       	ldd	r25, Y+6	; 0x06
    26d8:	9a 83       	std	Y+2, r25	; 0x02
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	9a 81       	ldd	r25, Y+2	; 0x02
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <main+0xdb2>
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			password=val<<8;
    26e8:	fe 01       	movw	r30, r28
    26ea:	e6 56       	subi	r30, 0x66	; 102
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	80 81       	ld	r24, Z
    26f0:	88 2f       	mov	r24, r24
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	98 2f       	mov	r25, r24
    26f6:	88 27       	eor	r24, r24
    26f8:	fe 01       	movw	r30, r28
    26fa:	e1 58       	subi	r30, 0x81	; 129
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
			EEPROM_readByte(0x0330,&val);
    2702:	9e 01       	movw	r18, r28
    2704:	26 56       	subi	r18, 0x66	; 102
    2706:	3f 4f       	sbci	r19, 0xFF	; 255
    2708:	80 e3       	ldi	r24, 0x30	; 48
    270a:	93 e0       	ldi	r25, 0x03	; 3
    270c:	b9 01       	movw	r22, r18
    270e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <EEPROM_readByte>
			password|=val;
    2712:	fe 01       	movw	r30, r28
    2714:	e6 56       	subi	r30, 0x66	; 102
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	de 01       	movw	r26, r28
    2720:	a1 58       	subi	r26, 0x81	; 129
    2722:	bf 4f       	sbci	r27, 0xFF	; 255
    2724:	fe 01       	movw	r30, r28
    2726:	e1 58       	subi	r30, 0x81	; 129
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	82 2b       	or	r24, r18
    2730:	93 2b       	or	r25, r19
    2732:	8d 93       	st	X+, r24
    2734:	9c 93       	st	X, r25
			/*
			 * if it is the same password return success
			 * */
			if(password==passwordRead){
    2736:	fe 01       	movw	r30, r28
    2738:	e1 58       	subi	r30, 0x81	; 129
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	de 01       	movw	r26, r28
    273e:	af 57       	subi	r26, 0x7F	; 127
    2740:	bf 4f       	sbci	r27, 0xFF	; 255
    2742:	20 81       	ld	r18, Z
    2744:	31 81       	ldd	r19, Z+1	; 0x01
    2746:	8d 91       	ld	r24, X+
    2748:	9c 91       	ld	r25, X
    274a:	11 97       	sbiw	r26, 0x01	; 1
    274c:	28 17       	cp	r18, r24
    274e:	39 07       	cpc	r19, r25
    2750:	21 f4       	brne	.+8      	; 0x275a <main+0xe2c>
				UART_sendByte(SUCCESS);
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	0e 94 29 16 	call	0x2c52	; 0x2c52 <UART_sendByte>
    2758:	67 c9       	rjmp	.-3378   	; 0x1a28 <main+0xfa>
			}else{
				UART_sendByte(ERROR);
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <UART_sendByte>
    2760:	63 c9       	rjmp	.-3386   	; 0x1a28 <main+0xfa>

			}

		}else if(message==rotate_motor_CW){
    2762:	fe 01       	movw	r30, r28
    2764:	e7 57       	subi	r30, 0x77	; 119
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	80 81       	ld	r24, Z
    276a:	8f 3e       	cpi	r24, 0xEF	; 239
    276c:	09 f0       	breq	.+2      	; 0x2770 <main+0xe42>
    276e:	6b c0       	rjmp	.+214    	; 0x2846 <main+0xf18>
			 * start value =0
			 * compare value = 31250  --> count 1 sec
			 * prescalar = 256
			 * mode of time is compare mode
			 * */
			DcMotor_Rotate(CLOCK_WISE,100);
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	64 e6       	ldi	r22, 0x64	; 100
    2774:	0e 94 35 07 	call	0xe6a	; 0xe6a <DcMotor_Rotate>
			Timer1_ConfigType config_timer1={0,31250,CLOCK_256,CTC};
    2778:	ce 01       	movw	r24, r28
    277a:	85 56       	subi	r24, 0x65	; 101
    277c:	9f 4f       	sbci	r25, 0xFF	; 255
    277e:	c9 54       	subi	r28, 0x49	; 73
    2780:	df 4f       	sbci	r29, 0xFF	; 255
    2782:	99 83       	std	Y+1, r25	; 0x01
    2784:	88 83       	st	Y, r24
    2786:	c7 5b       	subi	r28, 0xB7	; 183
    2788:	d0 40       	sbci	r29, 0x00	; 0
    278a:	84 e7       	ldi	r24, 0x74	; 116
    278c:	91 e0       	ldi	r25, 0x01	; 1
    278e:	c7 54       	subi	r28, 0x47	; 71
    2790:	df 4f       	sbci	r29, 0xFF	; 255
    2792:	99 83       	std	Y+1, r25	; 0x01
    2794:	88 83       	st	Y, r24
    2796:	c9 5b       	subi	r28, 0xB9	; 185
    2798:	d0 40       	sbci	r29, 0x00	; 0
    279a:	96 e0       	ldi	r25, 0x06	; 6
    279c:	c5 54       	subi	r28, 0x45	; 69
    279e:	df 4f       	sbci	r29, 0xFF	; 255
    27a0:	98 83       	st	Y, r25
    27a2:	cb 5b       	subi	r28, 0xBB	; 187
    27a4:	d0 40       	sbci	r29, 0x00	; 0
    27a6:	c7 54       	subi	r28, 0x47	; 71
    27a8:	df 4f       	sbci	r29, 0xFF	; 255
    27aa:	e8 81       	ld	r30, Y
    27ac:	f9 81       	ldd	r31, Y+1	; 0x01
    27ae:	c9 5b       	subi	r28, 0xB9	; 185
    27b0:	d0 40       	sbci	r29, 0x00	; 0
    27b2:	00 80       	ld	r0, Z
    27b4:	c7 54       	subi	r28, 0x47	; 71
    27b6:	df 4f       	sbci	r29, 0xFF	; 255
    27b8:	88 81       	ld	r24, Y
    27ba:	99 81       	ldd	r25, Y+1	; 0x01
    27bc:	c9 5b       	subi	r28, 0xB9	; 185
    27be:	d0 40       	sbci	r29, 0x00	; 0
    27c0:	01 96       	adiw	r24, 0x01	; 1
    27c2:	c7 54       	subi	r28, 0x47	; 71
    27c4:	df 4f       	sbci	r29, 0xFF	; 255
    27c6:	99 83       	std	Y+1, r25	; 0x01
    27c8:	88 83       	st	Y, r24
    27ca:	c9 5b       	subi	r28, 0xB9	; 185
    27cc:	d0 40       	sbci	r29, 0x00	; 0
    27ce:	c9 54       	subi	r28, 0x49	; 73
    27d0:	df 4f       	sbci	r29, 0xFF	; 255
    27d2:	e8 81       	ld	r30, Y
    27d4:	f9 81       	ldd	r31, Y+1	; 0x01
    27d6:	c7 5b       	subi	r28, 0xB7	; 183
    27d8:	d0 40       	sbci	r29, 0x00	; 0
    27da:	00 82       	st	Z, r0
    27dc:	c9 54       	subi	r28, 0x49	; 73
    27de:	df 4f       	sbci	r29, 0xFF	; 255
    27e0:	88 81       	ld	r24, Y
    27e2:	99 81       	ldd	r25, Y+1	; 0x01
    27e4:	c7 5b       	subi	r28, 0xB7	; 183
    27e6:	d0 40       	sbci	r29, 0x00	; 0
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	c9 54       	subi	r28, 0x49	; 73
    27ec:	df 4f       	sbci	r29, 0xFF	; 255
    27ee:	99 83       	std	Y+1, r25	; 0x01
    27f0:	88 83       	st	Y, r24
    27f2:	c7 5b       	subi	r28, 0xB7	; 183
    27f4:	d0 40       	sbci	r29, 0x00	; 0
    27f6:	c5 54       	subi	r28, 0x45	; 69
    27f8:	df 4f       	sbci	r29, 0xFF	; 255
    27fa:	98 81       	ld	r25, Y
    27fc:	cb 5b       	subi	r28, 0xBB	; 187
    27fe:	d0 40       	sbci	r29, 0x00	; 0
    2800:	91 50       	subi	r25, 0x01	; 1
    2802:	c5 54       	subi	r28, 0x45	; 69
    2804:	df 4f       	sbci	r29, 0xFF	; 255
    2806:	98 83       	st	Y, r25
    2808:	cb 5b       	subi	r28, 0xBB	; 187
    280a:	d0 40       	sbci	r29, 0x00	; 0
    280c:	c5 54       	subi	r28, 0x45	; 69
    280e:	df 4f       	sbci	r29, 0xFF	; 255
    2810:	e8 81       	ld	r30, Y
    2812:	cb 5b       	subi	r28, 0xBB	; 187
    2814:	d0 40       	sbci	r29, 0x00	; 0
    2816:	ee 23       	and	r30, r30
    2818:	31 f6       	brne	.-116    	; 0x27a6 <main+0xe78>
			Timer1_setCallBack(motorCW_callback);
    281a:	84 e0       	ldi	r24, 0x04	; 4
    281c:	95 e1       	ldi	r25, 0x15	; 21
    281e:	0e 94 48 08 	call	0x1090	; 0x1090 <Timer1_setCallBack>
			Timer1_init(&config_timer1);
    2822:	ce 01       	movw	r24, r28
    2824:	85 56       	subi	r24, 0x65	; 101
    2826:	9f 4f       	sbci	r25, 0xFF	; 255
    2828:	0e 94 fe 07 	call	0xffc	; 0xffc <Timer1_init>
			while(g_locking!=15);
    282c:	80 91 8a 01 	lds	r24, 0x018A
    2830:	8f 30       	cpi	r24, 0x0F	; 15
    2832:	e1 f7       	brne	.-8      	; 0x282c <main+0xefe>
			g_locking=0;
    2834:	10 92 8a 01 	sts	0x018A, r1
			Timer1_deInit();
    2838:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Timer1_deInit>
			DcMotor_Rotate(STOP,0);
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	60 e0       	ldi	r22, 0x00	; 0
    2840:	0e 94 35 07 	call	0xe6a	; 0xe6a <DcMotor_Rotate>
    2844:	f1 c8       	rjmp	.-3614   	; 0x1a28 <main+0xfa>
		}
		else if(message==motor_Hold){
    2846:	fe 01       	movw	r30, r28
    2848:	e7 57       	subi	r30, 0x77	; 119
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	80 81       	ld	r24, Z
    284e:	8f 31       	cpi	r24, 0x1F	; 31
    2850:	09 f0       	breq	.+2      	; 0x2854 <main+0xf26>
    2852:	67 c0       	rjmp	.+206    	; 0x2922 <main+0xff4>
			 * start value =0
			 * compare value = 31250  --> count 1 sec
			 * prescalar = 256
			 * mode of time is compare mode
			 * */
			DcMotor_Rotate(STOP,0);
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	0e 94 35 07 	call	0xe6a	; 0xe6a <DcMotor_Rotate>
			Timer1_ConfigType config_timer1={0,31250,CLOCK_256,CTC};
    285c:	ce 01       	movw	r24, r28
    285e:	8f 55       	subi	r24, 0x5F	; 95
    2860:	9f 4f       	sbci	r25, 0xFF	; 255
    2862:	c4 54       	subi	r28, 0x44	; 68
    2864:	df 4f       	sbci	r29, 0xFF	; 255
    2866:	99 83       	std	Y+1, r25	; 0x01
    2868:	88 83       	st	Y, r24
    286a:	cc 5b       	subi	r28, 0xBC	; 188
    286c:	d0 40       	sbci	r29, 0x00	; 0
    286e:	8e e6       	ldi	r24, 0x6E	; 110
    2870:	91 e0       	ldi	r25, 0x01	; 1
    2872:	c2 54       	subi	r28, 0x42	; 66
    2874:	df 4f       	sbci	r29, 0xFF	; 255
    2876:	99 83       	std	Y+1, r25	; 0x01
    2878:	88 83       	st	Y, r24
    287a:	ce 5b       	subi	r28, 0xBE	; 190
    287c:	d0 40       	sbci	r29, 0x00	; 0
    287e:	96 e0       	ldi	r25, 0x06	; 6
    2880:	c0 54       	subi	r28, 0x40	; 64
    2882:	df 4f       	sbci	r29, 0xFF	; 255
    2884:	98 83       	st	Y, r25
    2886:	c0 5c       	subi	r28, 0xC0	; 192
    2888:	d0 40       	sbci	r29, 0x00	; 0
    288a:	c2 54       	subi	r28, 0x42	; 66
    288c:	df 4f       	sbci	r29, 0xFF	; 255
    288e:	e8 81       	ld	r30, Y
    2890:	f9 81       	ldd	r31, Y+1	; 0x01
    2892:	ce 5b       	subi	r28, 0xBE	; 190
    2894:	d0 40       	sbci	r29, 0x00	; 0
    2896:	00 80       	ld	r0, Z
    2898:	c2 54       	subi	r28, 0x42	; 66
    289a:	df 4f       	sbci	r29, 0xFF	; 255
    289c:	88 81       	ld	r24, Y
    289e:	99 81       	ldd	r25, Y+1	; 0x01
    28a0:	ce 5b       	subi	r28, 0xBE	; 190
    28a2:	d0 40       	sbci	r29, 0x00	; 0
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	c2 54       	subi	r28, 0x42	; 66
    28a8:	df 4f       	sbci	r29, 0xFF	; 255
    28aa:	99 83       	std	Y+1, r25	; 0x01
    28ac:	88 83       	st	Y, r24
    28ae:	ce 5b       	subi	r28, 0xBE	; 190
    28b0:	d0 40       	sbci	r29, 0x00	; 0
    28b2:	c4 54       	subi	r28, 0x44	; 68
    28b4:	df 4f       	sbci	r29, 0xFF	; 255
    28b6:	e8 81       	ld	r30, Y
    28b8:	f9 81       	ldd	r31, Y+1	; 0x01
    28ba:	cc 5b       	subi	r28, 0xBC	; 188
    28bc:	d0 40       	sbci	r29, 0x00	; 0
    28be:	00 82       	st	Z, r0
    28c0:	c4 54       	subi	r28, 0x44	; 68
    28c2:	df 4f       	sbci	r29, 0xFF	; 255
    28c4:	88 81       	ld	r24, Y
    28c6:	99 81       	ldd	r25, Y+1	; 0x01
    28c8:	cc 5b       	subi	r28, 0xBC	; 188
    28ca:	d0 40       	sbci	r29, 0x00	; 0
    28cc:	01 96       	adiw	r24, 0x01	; 1
    28ce:	c4 54       	subi	r28, 0x44	; 68
    28d0:	df 4f       	sbci	r29, 0xFF	; 255
    28d2:	99 83       	std	Y+1, r25	; 0x01
    28d4:	88 83       	st	Y, r24
    28d6:	cc 5b       	subi	r28, 0xBC	; 188
    28d8:	d0 40       	sbci	r29, 0x00	; 0
    28da:	c0 54       	subi	r28, 0x40	; 64
    28dc:	df 4f       	sbci	r29, 0xFF	; 255
    28de:	98 81       	ld	r25, Y
    28e0:	c0 5c       	subi	r28, 0xC0	; 192
    28e2:	d0 40       	sbci	r29, 0x00	; 0
    28e4:	91 50       	subi	r25, 0x01	; 1
    28e6:	c0 54       	subi	r28, 0x40	; 64
    28e8:	df 4f       	sbci	r29, 0xFF	; 255
    28ea:	98 83       	st	Y, r25
    28ec:	c0 5c       	subi	r28, 0xC0	; 192
    28ee:	d0 40       	sbci	r29, 0x00	; 0
    28f0:	c0 54       	subi	r28, 0x40	; 64
    28f2:	df 4f       	sbci	r29, 0xFF	; 255
    28f4:	e8 81       	ld	r30, Y
    28f6:	c0 5c       	subi	r28, 0xC0	; 192
    28f8:	d0 40       	sbci	r29, 0x00	; 0
    28fa:	ee 23       	and	r30, r30
    28fc:	31 f6       	brne	.-116    	; 0x288a <main+0xf5c>
			Timer1_setCallBack(motorhold_callback);
    28fe:	80 e1       	ldi	r24, 0x10	; 16
    2900:	95 e1       	ldi	r25, 0x15	; 21
    2902:	0e 94 48 08 	call	0x1090	; 0x1090 <Timer1_setCallBack>
			Timer1_init(&config_timer1);
    2906:	ce 01       	movw	r24, r28
    2908:	8f 55       	subi	r24, 0x5F	; 95
    290a:	9f 4f       	sbci	r25, 0xFF	; 255
    290c:	0e 94 fe 07 	call	0xffc	; 0xffc <Timer1_init>
			while(g_holding!=3);
    2910:	80 91 8b 01 	lds	r24, 0x018B
    2914:	83 30       	cpi	r24, 0x03	; 3
    2916:	e1 f7       	brne	.-8      	; 0x2910 <main+0xfe2>
			g_holding=0;
    2918:	10 92 8b 01 	sts	0x018B, r1
			Timer1_deInit();
    291c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Timer1_deInit>
    2920:	83 c8       	rjmp	.-3834   	; 0x1a28 <main+0xfa>
		}
		else if(message== ROTATE_MOTOR_ACW){
    2922:	fe 01       	movw	r30, r28
    2924:	e7 57       	subi	r30, 0x77	; 119
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	80 81       	ld	r24, Z
    292a:	8f 3d       	cpi	r24, 0xDF	; 223
    292c:	09 f0       	breq	.+2      	; 0x2930 <main+0x1002>
    292e:	7c c8       	rjmp	.-3848   	; 0x1a28 <main+0xfa>
			 * start value =0
			 * compare value = 31250  --> count 1 sec
			 * prescalar = 256
			 * mode of time is compare mode
			 * */
			DcMotor_Rotate(ANTI_CLOCK_WISE,100);
    2930:	82 e0       	ldi	r24, 0x02	; 2
    2932:	64 e6       	ldi	r22, 0x64	; 100
    2934:	0e 94 35 07 	call	0xe6a	; 0xe6a <DcMotor_Rotate>
			Timer1_ConfigType config_timer1={0,31250,CLOCK_256,CTC};
    2938:	ce 01       	movw	r24, r28
    293a:	89 55       	subi	r24, 0x59	; 89
    293c:	9f 4f       	sbci	r25, 0xFF	; 255
    293e:	cf 53       	subi	r28, 0x3F	; 63
    2940:	df 4f       	sbci	r29, 0xFF	; 255
    2942:	99 83       	std	Y+1, r25	; 0x01
    2944:	88 83       	st	Y, r24
    2946:	c1 5c       	subi	r28, 0xC1	; 193
    2948:	d0 40       	sbci	r29, 0x00	; 0
    294a:	88 e6       	ldi	r24, 0x68	; 104
    294c:	91 e0       	ldi	r25, 0x01	; 1
    294e:	cd 53       	subi	r28, 0x3D	; 61
    2950:	df 4f       	sbci	r29, 0xFF	; 255
    2952:	99 83       	std	Y+1, r25	; 0x01
    2954:	88 83       	st	Y, r24
    2956:	c3 5c       	subi	r28, 0xC3	; 195
    2958:	d0 40       	sbci	r29, 0x00	; 0
    295a:	96 e0       	ldi	r25, 0x06	; 6
    295c:	cb 53       	subi	r28, 0x3B	; 59
    295e:	df 4f       	sbci	r29, 0xFF	; 255
    2960:	98 83       	st	Y, r25
    2962:	c5 5c       	subi	r28, 0xC5	; 197
    2964:	d0 40       	sbci	r29, 0x00	; 0
    2966:	cd 53       	subi	r28, 0x3D	; 61
    2968:	df 4f       	sbci	r29, 0xFF	; 255
    296a:	e8 81       	ld	r30, Y
    296c:	f9 81       	ldd	r31, Y+1	; 0x01
    296e:	c3 5c       	subi	r28, 0xC3	; 195
    2970:	d0 40       	sbci	r29, 0x00	; 0
    2972:	00 80       	ld	r0, Z
    2974:	cd 53       	subi	r28, 0x3D	; 61
    2976:	df 4f       	sbci	r29, 0xFF	; 255
    2978:	88 81       	ld	r24, Y
    297a:	99 81       	ldd	r25, Y+1	; 0x01
    297c:	c3 5c       	subi	r28, 0xC3	; 195
    297e:	d0 40       	sbci	r29, 0x00	; 0
    2980:	01 96       	adiw	r24, 0x01	; 1
    2982:	cd 53       	subi	r28, 0x3D	; 61
    2984:	df 4f       	sbci	r29, 0xFF	; 255
    2986:	99 83       	std	Y+1, r25	; 0x01
    2988:	88 83       	st	Y, r24
    298a:	c3 5c       	subi	r28, 0xC3	; 195
    298c:	d0 40       	sbci	r29, 0x00	; 0
    298e:	cf 53       	subi	r28, 0x3F	; 63
    2990:	df 4f       	sbci	r29, 0xFF	; 255
    2992:	e8 81       	ld	r30, Y
    2994:	f9 81       	ldd	r31, Y+1	; 0x01
    2996:	c1 5c       	subi	r28, 0xC1	; 193
    2998:	d0 40       	sbci	r29, 0x00	; 0
    299a:	00 82       	st	Z, r0
    299c:	cf 53       	subi	r28, 0x3F	; 63
    299e:	df 4f       	sbci	r29, 0xFF	; 255
    29a0:	88 81       	ld	r24, Y
    29a2:	99 81       	ldd	r25, Y+1	; 0x01
    29a4:	c1 5c       	subi	r28, 0xC1	; 193
    29a6:	d0 40       	sbci	r29, 0x00	; 0
    29a8:	01 96       	adiw	r24, 0x01	; 1
    29aa:	cf 53       	subi	r28, 0x3F	; 63
    29ac:	df 4f       	sbci	r29, 0xFF	; 255
    29ae:	99 83       	std	Y+1, r25	; 0x01
    29b0:	88 83       	st	Y, r24
    29b2:	c1 5c       	subi	r28, 0xC1	; 193
    29b4:	d0 40       	sbci	r29, 0x00	; 0
    29b6:	cb 53       	subi	r28, 0x3B	; 59
    29b8:	df 4f       	sbci	r29, 0xFF	; 255
    29ba:	98 81       	ld	r25, Y
    29bc:	c5 5c       	subi	r28, 0xC5	; 197
    29be:	d0 40       	sbci	r29, 0x00	; 0
    29c0:	91 50       	subi	r25, 0x01	; 1
    29c2:	cb 53       	subi	r28, 0x3B	; 59
    29c4:	df 4f       	sbci	r29, 0xFF	; 255
    29c6:	98 83       	st	Y, r25
    29c8:	c5 5c       	subi	r28, 0xC5	; 197
    29ca:	d0 40       	sbci	r29, 0x00	; 0
    29cc:	cb 53       	subi	r28, 0x3B	; 59
    29ce:	df 4f       	sbci	r29, 0xFF	; 255
    29d0:	e8 81       	ld	r30, Y
    29d2:	c5 5c       	subi	r28, 0xC5	; 197
    29d4:	d0 40       	sbci	r29, 0x00	; 0
    29d6:	ee 23       	and	r30, r30
    29d8:	31 f6       	brne	.-116    	; 0x2966 <main+0x1038>
			Timer1_setCallBack(motorACW_callback);
    29da:	8c e1       	ldi	r24, 0x1C	; 28
    29dc:	95 e1       	ldi	r25, 0x15	; 21
    29de:	0e 94 48 08 	call	0x1090	; 0x1090 <Timer1_setCallBack>
			Timer1_init(&config_timer1);
    29e2:	ce 01       	movw	r24, r28
    29e4:	89 55       	subi	r24, 0x59	; 89
    29e6:	9f 4f       	sbci	r25, 0xFF	; 255
    29e8:	0e 94 fe 07 	call	0xffc	; 0xffc <Timer1_init>
			while(g_unlocking!=15);
    29ec:	80 91 8c 01 	lds	r24, 0x018C
    29f0:	8f 30       	cpi	r24, 0x0F	; 15
    29f2:	e1 f7       	brne	.-8      	; 0x29ec <main+0x10be>
			g_unlocking=0;
    29f4:	10 92 8c 01 	sts	0x018C, r1
			Timer1_deInit();
    29f8:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Timer1_deInit>
			DcMotor_Rotate(STOP,0);
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	0e 94 35 07 	call	0xe6a	; 0xe6a <DcMotor_Rotate>
    2a04:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <main+0xfa>

00002a08 <motorCW_callback>:
		}

	}

}
void motorCW_callback(void){
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
	/*COUNT 1 SEC
	 * */
	g_locking++;
    2a10:	80 91 8a 01 	lds	r24, 0x018A
    2a14:	8f 5f       	subi	r24, 0xFF	; 255
    2a16:	80 93 8a 01 	sts	0x018A, r24
}
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <motorhold_callback>:
/*Call Back Function after the timer counts 3 secs to hold motor */
void motorhold_callback(void){
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
	/*COUNT 1 SEC
	 * */
	g_holding++;
    2a28:	80 91 8b 01 	lds	r24, 0x018B
    2a2c:	8f 5f       	subi	r24, 0xFF	; 255
    2a2e:	80 93 8b 01 	sts	0x018B, r24
}
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <motorACW_callback>:
/*Call Back Function after the timer counts 15 secs to rotate motor anti clock wise*/
void motorACW_callback(void){
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
	/*COUNT 1 SEC
	 * */
	g_unlocking++;
    2a40:	80 91 8c 01 	lds	r24, 0x018C
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	80 93 8c 01 	sts	0x018C, r24
}
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	08 95       	ret

00002a50 <BuzzerOffCallBack>:
/*Buzzer Callback function */
void BuzzerOffCallBack(void){
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
	/*COUNT 1 SEC
	 * */
	g_buzzer++;
    2a58:	80 91 8d 01 	lds	r24, 0x018D
    2a5c:	8f 5f       	subi	r24, 0xFF	; 255
    2a5e:	80 93 8d 01 	sts	0x018D, r24
}
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <TWI_init>:
#include "twi.h"
#include <avr/io.h>
#include "common_macros.h"


void TWI_init(TWI_ConfigType*config_ptr){
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	00 d0       	rcall	.+0      	; 0x2a6e <TWI_init+0x6>
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
    2a72:	9a 83       	std	Y+2, r25	; 0x02
    2a74:	89 83       	std	Y+1, r24	; 0x01
	/* Set Bit Rate Value */
	TWBR=config_ptr->bit_rate;
    2a76:	a0 e2       	ldi	r26, 0x20	; 32
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a7e:	81 81       	ldd	r24, Z+1	; 0x01
    2a80:	8c 93       	st	X, r24
	/* Prescalar value = 0 (TWPS) */
	TWSR = 0x00;
    2a82:	e1 e2       	ldi	r30, 0x21	; 33
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	10 82       	st	Z, r1
	TWAR =config_ptr->address;
    2a88:	a2 e2       	ldi	r26, 0x22	; 34
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a90:	80 81       	ld	r24, Z
    2a92:	8c 93       	st	X, r24

	/* Enable I2C */
	TWCR=(1<<TWEN);
    2a94:	e6 e5       	ldi	r30, 0x56	; 86
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	84 e0       	ldi	r24, 0x04	; 4
    2a9a:	80 83       	st	Z, r24


}
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <TWI_start>:

void TWI_start(void){
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62

	TWCR=(1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2aae:	e6 e5       	ldi	r30, 0x56	; 86
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	84 ea       	ldi	r24, 0xA4	; 164
    2ab4:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT));
    2ab6:	e6 e5       	ldi	r30, 0x56	; 86
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	88 23       	and	r24, r24
    2abe:	dc f7       	brge	.-10     	; 0x2ab6 <TWI_start+0x10>
}
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	08 95       	ret

00002ac6 <TWI_stop>:

void TWI_stop(void){
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);
    2ace:	e6 e5       	ldi	r30, 0x56	; 86
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	84 e9       	ldi	r24, 0x94	; 148
    2ad4:	80 83       	st	Z, r24

}
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <TWI_writeByte>:

void TWI_writeByte(uint8 data){
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	0f 92       	push	r0
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;
    2ae8:	e3 e2       	ldi	r30, 0x23	; 35
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	80 83       	st	Z, r24

	TWCR = (1 << TWINT) | (1 << TWEN);
    2af0:	e6 e5       	ldi	r30, 0x56	; 86
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	84 e8       	ldi	r24, 0x84	; 132
    2af6:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2af8:	e6 e5       	ldi	r30, 0x56	; 86
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	88 23       	and	r24, r24
    2b00:	dc f7       	brge	.-10     	; 0x2af8 <TWI_writeByte+0x1c>
}
    2b02:	0f 90       	pop	r0
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <TWI_readByteWithACK>:
uint8 TWI_readByteWithACK(void){
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2b12:	e6 e5       	ldi	r30, 0x56	; 86
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	84 ec       	ldi	r24, 0xC4	; 196
    2b18:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2b1a:	e6 e5       	ldi	r30, 0x56	; 86
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	88 23       	and	r24, r24
    2b22:	dc f7       	brge	.-10     	; 0x2b1a <TWI_readByteWithACK+0x10>
	return TWDR;
    2b24:	e3 e2       	ldi	r30, 0x23	; 35
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
}
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <TWI_readByteWithNACK>:
uint8 TWI_readByteWithNACK(void){
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1 << TWINT) | (1 << TWEN);
    2b38:	e6 e5       	ldi	r30, 0x56	; 86
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	84 e8       	ldi	r24, 0x84	; 132
    2b3e:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2b40:	e6 e5       	ldi	r30, 0x56	; 86
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	80 81       	ld	r24, Z
    2b46:	88 23       	and	r24, r24
    2b48:	dc f7       	brge	.-10     	; 0x2b40 <TWI_readByteWithNACK+0x10>
	return TWDR;
    2b4a:	e3 e2       	ldi	r30, 0x23	; 35
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
}
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	08 95       	ret

00002b56 <TWI_getStatus>:
uint8 TWI_getStatus(void)
{
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	0f 92       	push	r0
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	status=TWSR&(0xf8);
    2b60:	e1 e2       	ldi	r30, 0x21	; 33
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	88 7f       	andi	r24, 0xF8	; 248
    2b68:	89 83       	std	Y+1, r24	; 0x01
	return status;
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b6c:	0f 90       	pop	r0
    2b6e:	cf 91       	pop	r28
    2b70:	df 91       	pop	r29
    2b72:	08 95       	ret

00002b74 <UART_init>:
#include <avr/io.h>
#include "common_macros.h"



void UART_init(Config_Uart*config_ptr){
    2b74:	df 93       	push	r29
    2b76:	cf 93       	push	r28
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <UART_init+0x6>
    2b7a:	00 d0       	rcall	.+0      	; 0x2b7c <UART_init+0x8>
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	9c 83       	std	Y+4, r25	; 0x04
    2b82:	8b 83       	std	Y+3, r24	; 0x03
	/* Set Double Transmission Speed */
	UCSRA=(1<<U2X);
    2b84:	eb e2       	ldi	r30, 0x2B	; 43
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	82 e0       	ldi	r24, 0x02	; 2
    2b8a:	80 83       	st	Z, r24
	/*Set Enable Transmitter
	 *Set Enable Receiver
	 *Set UCSZ2 Character Size
	 * */

	UCSRB=(1<<RXEN) | (1<<TXEN)|(config_ptr->dataSize&0x04);
    2b8c:	aa e2       	ldi	r26, 0x2A	; 42
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	eb 81       	ldd	r30, Y+3	; 0x03
    2b92:	fc 81       	ldd	r31, Y+4	; 0x04
    2b94:	82 81       	ldd	r24, Z+2	; 0x02
    2b96:	84 70       	andi	r24, 0x04	; 4
    2b98:	88 61       	ori	r24, 0x18	; 24
    2b9a:	8c 93       	st	X, r24
	 * set parity bit
	 * set stop bit
	 * set data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
     * */
	UCSRC= (1<<URSEL) | (config_ptr->parity<<4)| (config_ptr->StopSelect<<3)
    2b9c:	a0 e4       	ldi	r26, 0x40	; 64
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba4:	80 81       	ld	r24, Z
    2ba6:	88 2f       	mov	r24, r24
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	82 95       	swap	r24
    2bac:	92 95       	swap	r25
    2bae:	90 7f       	andi	r25, 0xF0	; 240
    2bb0:	98 27       	eor	r25, r24
    2bb2:	80 7f       	andi	r24, 0xF0	; 240
    2bb4:	98 27       	eor	r25, r24
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	20 68       	ori	r18, 0x80	; 128
    2bba:	eb 81       	ldd	r30, Y+3	; 0x03
    2bbc:	fc 81       	ldd	r31, Y+4	; 0x04
    2bbe:	81 81       	ldd	r24, Z+1	; 0x01
    2bc0:	88 2f       	mov	r24, r24
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	88 0f       	add	r24, r24
    2bca:	99 1f       	adc	r25, r25
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	28 2b       	or	r18, r24
    2bd2:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd4:	fc 81       	ldd	r31, Y+4	; 0x04
    2bd6:	82 81       	ldd	r24, Z+2	; 0x02
    2bd8:	88 2f       	mov	r24, r24
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	83 70       	andi	r24, 0x03	; 3
    2bde:	90 70       	andi	r25, 0x00	; 0
    2be0:	88 0f       	add	r24, r24
    2be2:	99 1f       	adc	r25, r25
    2be4:	82 2b       	or	r24, r18
    2be6:	8c 93       	st	X, r24
			| ((config_ptr->dataSize&0x03)<<1);

	uint16 ubrr_value = 0;
    2be8:	1a 82       	std	Y+2, r1	; 0x02
    2bea:	19 82       	std	Y+1, r1	; 0x01
	/*calculate the value of ubrr from mu baudrate and fcpu */
	ubrr_value = (uint16)(((F_CPU / (config_ptr->baud_rate* 8UL))) - 1);
    2bec:	eb 81       	ldd	r30, Y+3	; 0x03
    2bee:	fc 81       	ldd	r31, Y+4	; 0x04
    2bf0:	83 81       	ldd	r24, Z+3	; 0x03
    2bf2:	94 81       	ldd	r25, Z+4	; 0x04
    2bf4:	a5 81       	ldd	r26, Z+5	; 0x05
    2bf6:	b6 81       	ldd	r27, Z+6	; 0x06
    2bf8:	88 0f       	add	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	aa 1f       	adc	r26, r26
    2bfe:	bb 1f       	adc	r27, r27
    2c00:	88 0f       	add	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	aa 1f       	adc	r26, r26
    2c06:	bb 1f       	adc	r27, r27
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	aa 1f       	adc	r26, r26
    2c0e:	bb 1f       	adc	r27, r27
    2c10:	9c 01       	movw	r18, r24
    2c12:	ad 01       	movw	r20, r26
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	94 e2       	ldi	r25, 0x24	; 36
    2c18:	a4 ef       	ldi	r26, 0xF4	; 244
    2c1a:	b0 e0       	ldi	r27, 0x00	; 0
    2c1c:	bc 01       	movw	r22, r24
    2c1e:	cd 01       	movw	r24, r26
    2c20:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__udivmodsi4>
    2c24:	da 01       	movw	r26, r20
    2c26:	c9 01       	movw	r24, r18
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	9a 83       	std	Y+2, r25	; 0x02
    2c2c:	89 83       	std	Y+1, r24	; 0x01

	UBRRL=ubrr_value;
    2c2e:	e9 e2       	ldi	r30, 0x29	; 41
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	80 83       	st	Z, r24
	UBRRH=ubrr_value>>8;
    2c36:	e0 e4       	ldi	r30, 0x40	; 64
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3e:	89 2f       	mov	r24, r25
    2c40:	99 27       	eor	r25, r25
    2c42:	80 83       	st	Z, r24

}
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	cf 91       	pop	r28
    2c4e:	df 91       	pop	r29
    2c50:	08 95       	ret

00002c52 <UART_sendByte>:

void UART_sendByte(uint8 data){
    2c52:	df 93       	push	r29
    2c54:	cf 93       	push	r28
    2c56:	0f 92       	push	r0
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	89 83       	std	Y+1, r24	; 0x01

	/*polling until TX buffer is empty to start sending byte
	 * */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2c5e:	eb e2       	ldi	r30, 0x2B	; 43
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	88 2f       	mov	r24, r24
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	80 72       	andi	r24, 0x20	; 32
    2c6a:	90 70       	andi	r25, 0x00	; 0
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	b9 f3       	breq	.-18     	; 0x2c5e <UART_sendByte+0xc>
    /*putting my data on UDR reg
     * */
	UDR=data;
    2c70:	ec e2       	ldi	r30, 0x2C	; 44
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	80 83       	st	Z, r24
}
    2c78:	0f 90       	pop	r0
    2c7a:	cf 91       	pop	r28
    2c7c:	df 91       	pop	r29
    2c7e:	08 95       	ret

00002c80 <UART_recieveByte>:

uint8 UART_recieveByte(){
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
	/*polling until RXC buffer is empty to start sending byte
		 * */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2c88:	eb e2       	ldi	r30, 0x2B	; 43
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	88 23       	and	r24, r24
    2c90:	dc f7       	brge	.-10     	; 0x2c88 <UART_recieveByte+0x8>
	/*putting my data on UDR reg
	     * */
	return UDR;
    2c92:	ec e2       	ldi	r30, 0x2C	; 44
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
}
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	08 95       	ret

00002c9e <UART_sendString>:

void UART_sendString(char*str){
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <UART_sendString+0x6>
    2ca4:	0f 92       	push	r0
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	9b 83       	std	Y+3, r25	; 0x03
    2cac:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    2cae:	19 82       	std	Y+1, r1	; 0x01
    2cb0:	0e c0       	rjmp	.+28     	; 0x2cce <UART_sendString+0x30>

	while(str[i]!='\0'){
		UART_sendByte(str[i]);
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	28 2f       	mov	r18, r24
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	e2 0f       	add	r30, r18
    2cc0:	f3 1f       	adc	r31, r19
    2cc2:	80 81       	ld	r24, Z
    2cc4:	0e 94 29 16 	call	0x2c52	; 0x2c52 <UART_sendByte>
		i++;
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	8f 5f       	subi	r24, 0xFF	; 255
    2ccc:	89 83       	std	Y+1, r24	; 0x01

void UART_sendString(char*str){

	uint8 i=0;

	while(str[i]!='\0'){
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd8:	fc 01       	movw	r30, r24
    2cda:	e2 0f       	add	r30, r18
    2cdc:	f3 1f       	adc	r31, r19
    2cde:	80 81       	ld	r24, Z
    2ce0:	88 23       	and	r24, r24
    2ce2:	39 f7       	brne	.-50     	; 0x2cb2 <UART_sendString+0x14>
		UART_sendByte(str[i]);
		i++;
	}


}
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	cf 91       	pop	r28
    2cec:	df 91       	pop	r29
    2cee:	08 95       	ret

00002cf0 <UART_recieveString>:

void UART_recieveString(char*str){
    2cf0:	0f 93       	push	r16
    2cf2:	1f 93       	push	r17
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <UART_recieveString+0xa>
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <UART_recieveString+0xc>
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	9b 83       	std	Y+3, r25	; 0x03
    2d02:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2d04:	19 82       	std	Y+1, r1	; 0x01

	do{
		str[i]=UART_recieveByte();
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	28 2f       	mov	r18, r24
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d10:	8c 01       	movw	r16, r24
    2d12:	02 0f       	add	r16, r18
    2d14:	13 1f       	adc	r17, r19
    2d16:	0e 94 40 16 	call	0x2c80	; 0x2c80 <UART_recieveByte>
    2d1a:	f8 01       	movw	r30, r16
    2d1c:	80 83       	st	Z, r24
	}while(str[i++]!='#');
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	28 2f       	mov	r18, r24
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	9b 81       	ldd	r25, Y+3	; 0x03
    2d28:	fc 01       	movw	r30, r24
    2d2a:	e2 0f       	add	r30, r18
    2d2c:	f3 1f       	adc	r31, r19
    2d2e:	80 81       	ld	r24, Z
    2d30:	1c 82       	std	Y+4, r1	; 0x04
    2d32:	83 32       	cpi	r24, 0x23	; 35
    2d34:	11 f0       	breq	.+4      	; 0x2d3a <UART_recieveString+0x4a>
    2d36:	f1 e0       	ldi	r31, 0x01	; 1
    2d38:	fc 83       	std	Y+4, r31	; 0x04
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	8f 5f       	subi	r24, 0xFF	; 255
    2d3e:	89 83       	std	Y+1, r24	; 0x01
    2d40:	8c 81       	ldd	r24, Y+4	; 0x04
    2d42:	88 23       	and	r24, r24
    2d44:	01 f7       	brne	.-64     	; 0x2d06 <UART_recieveString+0x16>

	str[i-1]='\0';
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	88 2f       	mov	r24, r24
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	9c 01       	movw	r18, r24
    2d4e:	21 50       	subi	r18, 0x01	; 1
    2d50:	30 40       	sbci	r19, 0x00	; 0
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	9b 81       	ldd	r25, Y+3	; 0x03
    2d56:	fc 01       	movw	r30, r24
    2d58:	e2 0f       	add	r30, r18
    2d5a:	f3 1f       	adc	r31, r19
    2d5c:	10 82       	st	Z, r1
}
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	1f 91       	pop	r17
    2d6c:	0f 91       	pop	r16
    2d6e:	08 95       	ret

00002d70 <__udivmodsi4>:
    2d70:	a1 e2       	ldi	r26, 0x21	; 33
    2d72:	1a 2e       	mov	r1, r26
    2d74:	aa 1b       	sub	r26, r26
    2d76:	bb 1b       	sub	r27, r27
    2d78:	fd 01       	movw	r30, r26
    2d7a:	0d c0       	rjmp	.+26     	; 0x2d96 <__udivmodsi4_ep>

00002d7c <__udivmodsi4_loop>:
    2d7c:	aa 1f       	adc	r26, r26
    2d7e:	bb 1f       	adc	r27, r27
    2d80:	ee 1f       	adc	r30, r30
    2d82:	ff 1f       	adc	r31, r31
    2d84:	a2 17       	cp	r26, r18
    2d86:	b3 07       	cpc	r27, r19
    2d88:	e4 07       	cpc	r30, r20
    2d8a:	f5 07       	cpc	r31, r21
    2d8c:	20 f0       	brcs	.+8      	; 0x2d96 <__udivmodsi4_ep>
    2d8e:	a2 1b       	sub	r26, r18
    2d90:	b3 0b       	sbc	r27, r19
    2d92:	e4 0b       	sbc	r30, r20
    2d94:	f5 0b       	sbc	r31, r21

00002d96 <__udivmodsi4_ep>:
    2d96:	66 1f       	adc	r22, r22
    2d98:	77 1f       	adc	r23, r23
    2d9a:	88 1f       	adc	r24, r24
    2d9c:	99 1f       	adc	r25, r25
    2d9e:	1a 94       	dec	r1
    2da0:	69 f7       	brne	.-38     	; 0x2d7c <__udivmodsi4_loop>
    2da2:	60 95       	com	r22
    2da4:	70 95       	com	r23
    2da6:	80 95       	com	r24
    2da8:	90 95       	com	r25
    2daa:	9b 01       	movw	r18, r22
    2dac:	ac 01       	movw	r20, r24
    2dae:	bd 01       	movw	r22, r26
    2db0:	cf 01       	movw	r24, r30
    2db2:	08 95       	ret

00002db4 <__prologue_saves__>:
    2db4:	2f 92       	push	r2
    2db6:	3f 92       	push	r3
    2db8:	4f 92       	push	r4
    2dba:	5f 92       	push	r5
    2dbc:	6f 92       	push	r6
    2dbe:	7f 92       	push	r7
    2dc0:	8f 92       	push	r8
    2dc2:	9f 92       	push	r9
    2dc4:	af 92       	push	r10
    2dc6:	bf 92       	push	r11
    2dc8:	cf 92       	push	r12
    2dca:	df 92       	push	r13
    2dcc:	ef 92       	push	r14
    2dce:	ff 92       	push	r15
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
    2ddc:	ca 1b       	sub	r28, r26
    2dde:	db 0b       	sbc	r29, r27
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	f8 94       	cli
    2de4:	de bf       	out	0x3e, r29	; 62
    2de6:	0f be       	out	0x3f, r0	; 63
    2de8:	cd bf       	out	0x3d, r28	; 61
    2dea:	09 94       	ijmp

00002dec <__epilogue_restores__>:
    2dec:	2a 88       	ldd	r2, Y+18	; 0x12
    2dee:	39 88       	ldd	r3, Y+17	; 0x11
    2df0:	48 88       	ldd	r4, Y+16	; 0x10
    2df2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2df4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2df6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2df8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dfa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dfc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dfe:	b9 84       	ldd	r11, Y+9	; 0x09
    2e00:	c8 84       	ldd	r12, Y+8	; 0x08
    2e02:	df 80       	ldd	r13, Y+7	; 0x07
    2e04:	ee 80       	ldd	r14, Y+6	; 0x06
    2e06:	fd 80       	ldd	r15, Y+5	; 0x05
    2e08:	0c 81       	ldd	r16, Y+4	; 0x04
    2e0a:	1b 81       	ldd	r17, Y+3	; 0x03
    2e0c:	aa 81       	ldd	r26, Y+2	; 0x02
    2e0e:	b9 81       	ldd	r27, Y+1	; 0x01
    2e10:	ce 0f       	add	r28, r30
    2e12:	d1 1d       	adc	r29, r1
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	ed 01       	movw	r28, r26
    2e20:	08 95       	ret

00002e22 <_exit>:
    2e22:	f8 94       	cli

00002e24 <__stop_program>:
    2e24:	ff cf       	rjmp	.-2      	; 0x2e24 <__stop_program>
