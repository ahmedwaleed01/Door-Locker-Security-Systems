
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000435c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  0000435c  000043f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080011a  0080011a  000044aa  2**0
                  ALLOC
  3 .stab         00003804  00000000  00000000  000044ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000122c  00000000  00000000  00007cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000add5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bcc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ca70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ce5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d62b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 32       	cpi	r26, 0x20	; 32
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <main>
      8a:	0c 94 ac 21 	jmp	0x4358	; 0x4358 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 30 21 	jmp	0x4260	; 0x4260 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ef       	ldi	r26, 0xFF	; 255
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4c 21 	jmp	0x4298	; 0x4298 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 58 21 	jmp	0x42b0	; 0x42b0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 58 21 	jmp	0x42b0	; 0x42b0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 30 21 	jmp	0x4260	; 0x4260 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4c 21 	jmp	0x4298	; 0x4298 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 58 21 	jmp	0x42b0	; 0x42b0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 58 21 	jmp	0x42b0	; 0x42b0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 58 21 	jmp	0x42b0	; 0x42b0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 40 21 	jmp	0x4280	; 0x4280 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5c 21 	jmp	0x42b8	; 0x42b8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KEYPAD_getPressedKey>:
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number);
#endif

uint8 KEYPAD_getPressedKey(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	60 97       	sbiw	r28, 0x10	; 16
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	64 e0       	ldi	r22, 0x04	; 4
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	65 e0       	ldi	r22, 0x05	; 5
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	66 e0       	ldi	r22, 0x06	; 6
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	67 e0       	ldi	r22, 0x07	; 7
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	62 e0       	ldi	r22, 0x02	; 2
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	63 e0       	ldi	r22, 0x03	; 3
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
     b96:	83 e0       	ldi	r24, 0x03	; 3
     b98:	64 e0       	ldi	r22, 0x04	; 4
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	65 e0       	ldi	r22, 0x05	; 5
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     baa:	1f 86       	std	Y+15, r1	; 0x0f
     bac:	b4 c0       	rjmp	.+360    	; 0xd16 <KEYPAD_getPressedKey+0x1d0>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
     bae:	8f 85       	ldd	r24, Y+15	; 0x0f
     bb0:	98 2f       	mov	r25, r24
     bb2:	9c 5f       	subi	r25, 0xFC	; 252
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	69 2f       	mov	r22, r25
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
     bbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc0:	98 2f       	mov	r25, r24
     bc2:	9c 5f       	subi	r25, 0xFC	; 252
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	69 2f       	mov	r22, r25
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     bce:	18 8a       	std	Y+16, r1	; 0x10
     bd0:	22 c0       	rjmp	.+68     	; 0xc16 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
     bd2:	88 89       	ldd	r24, Y+16	; 0x10
     bd4:	98 2f       	mov	r25, r24
     bd6:	9e 5f       	subi	r25, 0xFE	; 254
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	69 2f       	mov	r22, r25
     bdc:	0e 94 44 14 	call	0x2888	; 0x2888 <GPIO_readPin>
     be0:	88 23       	and	r24, r24
     be2:	b1 f4       	brne	.+44     	; 0xc10 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     be4:	8f 85       	ldd	r24, Y+15	; 0x0f
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	98 2f       	mov	r25, r24
     bf4:	88 89       	ldd	r24, Y+16	; 0x10
     bf6:	89 0f       	add	r24, r25
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	0e 94 90 06 	call	0xd20	; 0xd20 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
     bfe:	60 96       	adiw	r28, 0x10	; 16
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     c10:	88 89       	ldd	r24, Y+16	; 0x10
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	88 8b       	std	Y+16, r24	; 0x10
     c16:	88 89       	ldd	r24, Y+16	; 0x10
     c18:	84 30       	cpi	r24, 0x04	; 4
     c1a:	d8 f2       	brcs	.-74     	; 0xbd2 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
     c1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c1e:	98 2f       	mov	r25, r24
     c20:	9c 5f       	subi	r25, 0xFC	; 252
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	69 2f       	mov	r22, r25
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 ea       	ldi	r26, 0xA0	; 160
     c32:	b0 e4       	ldi	r27, 0x40	; 64
     c34:	8b 87       	std	Y+11, r24	; 0x0b
     c36:	9c 87       	std	Y+12, r25	; 0x0c
     c38:	ad 87       	std	Y+13, r26	; 0x0d
     c3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     c40:	8d 85       	ldd	r24, Y+13	; 0x0d
     c42:	9e 85       	ldd	r25, Y+14	; 0x0e
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	4a ef       	ldi	r20, 0xFA	; 250
     c4a:	54 e4       	ldi	r21, 0x44	; 68
     c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	8f 83       	std	Y+7, r24	; 0x07
     c56:	98 87       	std	Y+8, r25	; 0x08
     c58:	a9 87       	std	Y+9, r26	; 0x09
     c5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c5c:	6f 81       	ldd	r22, Y+7	; 0x07
     c5e:	78 85       	ldd	r23, Y+8	; 0x08
     c60:	89 85       	ldd	r24, Y+9	; 0x09
     c62:	9a 85       	ldd	r25, Y+10	; 0x0a
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	40 e8       	ldi	r20, 0x80	; 128
     c6a:	5f e3       	ldi	r21, 0x3F	; 63
     c6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c70:	88 23       	and	r24, r24
     c72:	2c f4       	brge	.+10     	; 0xc7e <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	9e 83       	std	Y+6, r25	; 0x06
     c7a:	8d 83       	std	Y+5, r24	; 0x05
     c7c:	3f c0       	rjmp	.+126    	; 0xcfc <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
     c7e:	6f 81       	ldd	r22, Y+7	; 0x07
     c80:	78 85       	ldd	r23, Y+8	; 0x08
     c82:	89 85       	ldd	r24, Y+9	; 0x09
     c84:	9a 85       	ldd	r25, Y+10	; 0x0a
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	3f ef       	ldi	r19, 0xFF	; 255
     c8a:	4f e7       	ldi	r20, 0x7F	; 127
     c8c:	57 e4       	ldi	r21, 0x47	; 71
     c8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c92:	18 16       	cp	r1, r24
     c94:	4c f5       	brge	.+82     	; 0xce8 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c96:	6b 85       	ldd	r22, Y+11	; 0x0b
     c98:	7c 85       	ldd	r23, Y+12	; 0x0c
     c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	40 e2       	ldi	r20, 0x20	; 32
     ca4:	51 e4       	ldi	r21, 0x41	; 65
     ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	bc 01       	movw	r22, r24
     cb0:	cd 01       	movw	r24, r26
     cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	9e 83       	std	Y+6, r25	; 0x06
     cbc:	8d 83       	std	Y+5, r24	; 0x05
     cbe:	0f c0       	rjmp	.+30     	; 0xcde <KEYPAD_getPressedKey+0x198>
     cc0:	88 ec       	ldi	r24, 0xC8	; 200
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	9c 83       	std	Y+4, r25	; 0x04
     cc6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	9c 81       	ldd	r25, Y+4	; 0x04
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <KEYPAD_getPressedKey+0x186>
     cd0:	9c 83       	std	Y+4, r25	; 0x04
     cd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd4:	8d 81       	ldd	r24, Y+5	; 0x05
     cd6:	9e 81       	ldd	r25, Y+6	; 0x06
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	9e 83       	std	Y+6, r25	; 0x06
     cdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cde:	8d 81       	ldd	r24, Y+5	; 0x05
     ce0:	9e 81       	ldd	r25, Y+6	; 0x06
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	69 f7       	brne	.-38     	; 0xcc0 <KEYPAD_getPressedKey+0x17a>
     ce6:	14 c0       	rjmp	.+40     	; 0xd10 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce8:	6f 81       	ldd	r22, Y+7	; 0x07
     cea:	78 85       	ldd	r23, Y+8	; 0x08
     cec:	89 85       	ldd	r24, Y+9	; 0x09
     cee:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	9e 83       	std	Y+6, r25	; 0x06
     cfa:	8d 83       	std	Y+5, r24	; 0x05
     cfc:	8d 81       	ldd	r24, Y+5	; 0x05
     cfe:	9e 81       	ldd	r25, Y+6	; 0x06
     d00:	9a 83       	std	Y+2, r25	; 0x02
     d02:	89 83       	std	Y+1, r24	; 0x01
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	9a 81       	ldd	r25, Y+2	; 0x02
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <KEYPAD_getPressedKey+0x1c2>
     d0c:	9a 83       	std	Y+2, r25	; 0x02
     d0e:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     d10:	8f 85       	ldd	r24, Y+15	; 0x0f
     d12:	8f 5f       	subi	r24, 0xFF	; 255
     d14:	8f 87       	std	Y+15, r24	; 0x0f
     d16:	8f 85       	ldd	r24, Y+15	; 0x0f
     d18:	84 30       	cpi	r24, 0x04	; 4
     d1a:	08 f4       	brcc	.+2      	; 0xd1e <KEYPAD_getPressedKey+0x1d8>
     d1c:	48 cf       	rjmp	.-368    	; 0xbae <KEYPAD_getPressedKey+0x68>
     d1e:	45 cf       	rjmp	.-374    	; 0xbaa <KEYPAD_getPressedKey+0x64>

00000d20 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x6>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <KEYPAD_4x4_adjustKeyNumber+0x8>
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
     d2e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	3c 83       	std	Y+4, r19	; 0x04
     d38:	2b 83       	std	Y+3, r18	; 0x03
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	9c 81       	ldd	r25, Y+4	; 0x04
     d3e:	88 30       	cpi	r24, 0x08	; 8
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <KEYPAD_4x4_adjustKeyNumber+0x26>
     d44:	70 c0       	rjmp	.+224    	; 0xe26 <KEYPAD_4x4_adjustKeyNumber+0x106>
     d46:	2b 81       	ldd	r18, Y+3	; 0x03
     d48:	3c 81       	ldd	r19, Y+4	; 0x04
     d4a:	29 30       	cpi	r18, 0x09	; 9
     d4c:	31 05       	cpc	r19, r1
     d4e:	5c f5       	brge	.+86     	; 0xda6 <KEYPAD_4x4_adjustKeyNumber+0x86>
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	9c 81       	ldd	r25, Y+4	; 0x04
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	91 05       	cpc	r25, r1
     d58:	09 f4       	brne	.+2      	; 0xd5c <KEYPAD_4x4_adjustKeyNumber+0x3c>
     d5a:	59 c0       	rjmp	.+178    	; 0xe0e <KEYPAD_4x4_adjustKeyNumber+0xee>
     d5c:	2b 81       	ldd	r18, Y+3	; 0x03
     d5e:	3c 81       	ldd	r19, Y+4	; 0x04
     d60:	25 30       	cpi	r18, 0x05	; 5
     d62:	31 05       	cpc	r19, r1
     d64:	9c f4       	brge	.+38     	; 0xd8c <KEYPAD_4x4_adjustKeyNumber+0x6c>
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	9c 81       	ldd	r25, Y+4	; 0x04
     d6a:	82 30       	cpi	r24, 0x02	; 2
     d6c:	91 05       	cpc	r25, r1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <KEYPAD_4x4_adjustKeyNumber+0x52>
     d70:	48 c0       	rjmp	.+144    	; 0xe02 <KEYPAD_4x4_adjustKeyNumber+0xe2>
     d72:	2b 81       	ldd	r18, Y+3	; 0x03
     d74:	3c 81       	ldd	r19, Y+4	; 0x04
     d76:	23 30       	cpi	r18, 0x03	; 3
     d78:	31 05       	cpc	r19, r1
     d7a:	0c f0       	brlt	.+2      	; 0xd7e <KEYPAD_4x4_adjustKeyNumber+0x5e>
     d7c:	45 c0       	rjmp	.+138    	; 0xe08 <KEYPAD_4x4_adjustKeyNumber+0xe8>
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	9c 81       	ldd	r25, Y+4	; 0x04
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	91 05       	cpc	r25, r1
     d86:	09 f4       	brne	.+2      	; 0xd8a <KEYPAD_4x4_adjustKeyNumber+0x6a>
     d88:	39 c0       	rjmp	.+114    	; 0xdfc <KEYPAD_4x4_adjustKeyNumber+0xdc>
     d8a:	67 c0       	rjmp	.+206    	; 0xe5a <KEYPAD_4x4_adjustKeyNumber+0x13a>
     d8c:	2b 81       	ldd	r18, Y+3	; 0x03
     d8e:	3c 81       	ldd	r19, Y+4	; 0x04
     d90:	26 30       	cpi	r18, 0x06	; 6
     d92:	31 05       	cpc	r19, r1
     d94:	09 f4       	brne	.+2      	; 0xd98 <KEYPAD_4x4_adjustKeyNumber+0x78>
     d96:	41 c0       	rjmp	.+130    	; 0xe1a <KEYPAD_4x4_adjustKeyNumber+0xfa>
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	87 30       	cpi	r24, 0x07	; 7
     d9e:	91 05       	cpc	r25, r1
     da0:	0c f0       	brlt	.+2      	; 0xda4 <KEYPAD_4x4_adjustKeyNumber+0x84>
     da2:	3e c0       	rjmp	.+124    	; 0xe20 <KEYPAD_4x4_adjustKeyNumber+0x100>
     da4:	37 c0       	rjmp	.+110    	; 0xe14 <KEYPAD_4x4_adjustKeyNumber+0xf4>
     da6:	2b 81       	ldd	r18, Y+3	; 0x03
     da8:	3c 81       	ldd	r19, Y+4	; 0x04
     daa:	2c 30       	cpi	r18, 0x0C	; 12
     dac:	31 05       	cpc	r19, r1
     dae:	09 f4       	brne	.+2      	; 0xdb2 <KEYPAD_4x4_adjustKeyNumber+0x92>
     db0:	46 c0       	rjmp	.+140    	; 0xe3e <KEYPAD_4x4_adjustKeyNumber+0x11e>
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	8d 30       	cpi	r24, 0x0D	; 13
     db8:	91 05       	cpc	r25, r1
     dba:	5c f4       	brge	.+22     	; 0xdd2 <KEYPAD_4x4_adjustKeyNumber+0xb2>
     dbc:	2b 81       	ldd	r18, Y+3	; 0x03
     dbe:	3c 81       	ldd	r19, Y+4	; 0x04
     dc0:	2a 30       	cpi	r18, 0x0A	; 10
     dc2:	31 05       	cpc	r19, r1
     dc4:	b1 f1       	breq	.+108    	; 0xe32 <KEYPAD_4x4_adjustKeyNumber+0x112>
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	8b 30       	cpi	r24, 0x0B	; 11
     dcc:	91 05       	cpc	r25, r1
     dce:	a4 f5       	brge	.+104    	; 0xe38 <KEYPAD_4x4_adjustKeyNumber+0x118>
     dd0:	2d c0       	rjmp	.+90     	; 0xe2c <KEYPAD_4x4_adjustKeyNumber+0x10c>
     dd2:	2b 81       	ldd	r18, Y+3	; 0x03
     dd4:	3c 81       	ldd	r19, Y+4	; 0x04
     dd6:	2e 30       	cpi	r18, 0x0E	; 14
     dd8:	31 05       	cpc	r19, r1
     dda:	b9 f1       	breq	.+110    	; 0xe4a <KEYPAD_4x4_adjustKeyNumber+0x12a>
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	8e 30       	cpi	r24, 0x0E	; 14
     de2:	91 05       	cpc	r25, r1
     de4:	7c f1       	brlt	.+94     	; 0xe44 <KEYPAD_4x4_adjustKeyNumber+0x124>
     de6:	2b 81       	ldd	r18, Y+3	; 0x03
     de8:	3c 81       	ldd	r19, Y+4	; 0x04
     dea:	2f 30       	cpi	r18, 0x0F	; 15
     dec:	31 05       	cpc	r19, r1
     dee:	79 f1       	breq	.+94     	; 0xe4e <KEYPAD_4x4_adjustKeyNumber+0x12e>
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	9c 81       	ldd	r25, Y+4	; 0x04
     df4:	80 31       	cpi	r24, 0x10	; 16
     df6:	91 05       	cpc	r25, r1
     df8:	69 f1       	breq	.+90     	; 0xe54 <KEYPAD_4x4_adjustKeyNumber+0x134>
     dfa:	2f c0       	rjmp	.+94     	; 0xe5a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
     dfc:	87 e0       	ldi	r24, 0x07	; 7
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	2e c0       	rjmp	.+92     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
     e02:	88 e0       	ldi	r24, 0x08	; 8
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	2b c0       	rjmp	.+86     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
     e08:	89 e0       	ldi	r24, 0x09	; 9
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	28 c0       	rjmp	.+80     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
     e0e:	85 e2       	ldi	r24, 0x25	; 37
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	25 c0       	rjmp	.+74     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
     e14:	84 e0       	ldi	r24, 0x04	; 4
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	22 c0       	rjmp	.+68     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
     e1a:	85 e0       	ldi	r24, 0x05	; 5
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	1f c0       	rjmp	.+62     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
     e20:	86 e0       	ldi	r24, 0x06	; 6
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	1c c0       	rjmp	.+56     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
     e26:	8a e2       	ldi	r24, 0x2A	; 42
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	19 c0       	rjmp	.+50     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	16 c0       	rjmp	.+44     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	13 c0       	rjmp	.+38     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
     e38:	83 e0       	ldi	r24, 0x03	; 3
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	10 c0       	rjmp	.+32     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
     e3e:	8d e2       	ldi	r24, 0x2D	; 45
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	0d c0       	rjmp	.+26     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
     e44:	8d e0       	ldi	r24, 0x0D	; 13
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	0a c0       	rjmp	.+20     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
     e4a:	19 82       	std	Y+1, r1	; 0x01
     e4c:	08 c0       	rjmp	.+16     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
     e4e:	8d e3       	ldi	r24, 0x3D	; 61
     e50:	89 83       	std	Y+1, r24	; 0x01
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
     e54:	8b e2       	ldi	r24, 0x2B	; 43
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <LCD_SendCommand>:
#include "gpio.h"
#include "std_types.h"
#include "common_macros.h"
#include <util/delay.h>

void LCD_SendCommand(uint8 command){
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	c3 56       	subi	r28, 0x63	; 99
     e7c:	d0 40       	sbci	r29, 0x00	; 0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	fe 01       	movw	r30, r28
     e8a:	ed 59       	subi	r30, 0x9D	; 157
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	80 83       	st	Z, r24
	/*    Make RS equal ZERO      */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	40 e0       	ldi	r20, 0x00	; 0
     e96:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
     e9a:	fe 01       	movw	r30, r28
     e9c:	e1 5a       	subi	r30, 0xA1	; 161
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	a0 e8       	ldi	r26, 0x80	; 128
     ea6:	bf e3       	ldi	r27, 0x3F	; 63
     ea8:	80 83       	st	Z, r24
     eaa:	91 83       	std	Z+1, r25	; 0x01
     eac:	a2 83       	std	Z+2, r26	; 0x02
     eae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb0:	8e 01       	movw	r16, r28
     eb2:	05 5a       	subi	r16, 0xA5	; 165
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
     eb6:	fe 01       	movw	r30, r28
     eb8:	e1 5a       	subi	r30, 0xA1	; 161
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	4a ef       	ldi	r20, 0xFA	; 250
     eca:	54 e4       	ldi	r21, 0x44	; 68
     ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	f8 01       	movw	r30, r16
     ed6:	80 83       	st	Z, r24
     ed8:	91 83       	std	Z+1, r25	; 0x01
     eda:	a2 83       	std	Z+2, r26	; 0x02
     edc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ede:	fe 01       	movw	r30, r28
     ee0:	e5 5a       	subi	r30, 0xA5	; 165
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	60 81       	ld	r22, Z
     ee6:	71 81       	ldd	r23, Z+1	; 0x01
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e8       	ldi	r20, 0x80	; 128
     ef2:	5f e3       	ldi	r21, 0x3F	; 63
     ef4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ef8:	88 23       	and	r24, r24
     efa:	44 f4       	brge	.+16     	; 0xf0c <LCD_SendCommand+0x9e>
		__ticks = 1;
     efc:	fe 01       	movw	r30, r28
     efe:	e7 5a       	subi	r30, 0xA7	; 167
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	91 83       	std	Z+1, r25	; 0x01
     f08:	80 83       	st	Z, r24
     f0a:	64 c0       	rjmp	.+200    	; 0xfd4 <LCD_SendCommand+0x166>
	else if (__tmp > 65535)
     f0c:	fe 01       	movw	r30, r28
     f0e:	e5 5a       	subi	r30, 0xA5	; 165
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	60 81       	ld	r22, Z
     f14:	71 81       	ldd	r23, Z+1	; 0x01
     f16:	82 81       	ldd	r24, Z+2	; 0x02
     f18:	93 81       	ldd	r25, Z+3	; 0x03
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	3f ef       	ldi	r19, 0xFF	; 255
     f1e:	4f e7       	ldi	r20, 0x7F	; 127
     f20:	57 e4       	ldi	r21, 0x47	; 71
     f22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f26:	18 16       	cp	r1, r24
     f28:	0c f0       	brlt	.+2      	; 0xf2c <LCD_SendCommand+0xbe>
     f2a:	43 c0       	rjmp	.+134    	; 0xfb2 <LCD_SendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2c:	fe 01       	movw	r30, r28
     f2e:	e1 5a       	subi	r30, 0xA1	; 161
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	60 81       	ld	r22, Z
     f34:	71 81       	ldd	r23, Z+1	; 0x01
     f36:	82 81       	ldd	r24, Z+2	; 0x02
     f38:	93 81       	ldd	r25, Z+3	; 0x03
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e2       	ldi	r20, 0x20	; 32
     f40:	51 e4       	ldi	r21, 0x41	; 65
     f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	8e 01       	movw	r16, r28
     f4c:	07 5a       	subi	r16, 0xA7	; 167
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	bc 01       	movw	r22, r24
     f52:	cd 01       	movw	r24, r26
     f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	f8 01       	movw	r30, r16
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	80 83       	st	Z, r24
     f62:	1f c0       	rjmp	.+62     	; 0xfa2 <LCD_SendCommand+0x134>
     f64:	fe 01       	movw	r30, r28
     f66:	e9 5a       	subi	r30, 0xA9	; 169
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	88 ec       	ldi	r24, 0xC8	; 200
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	91 83       	std	Z+1, r25	; 0x01
     f70:	80 83       	st	Z, r24
     f72:	fe 01       	movw	r30, r28
     f74:	e9 5a       	subi	r30, 0xA9	; 169
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	80 81       	ld	r24, Z
     f7a:	91 81       	ldd	r25, Z+1	; 0x01
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <LCD_SendCommand+0x10e>
     f80:	fe 01       	movw	r30, r28
     f82:	e9 5a       	subi	r30, 0xA9	; 169
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8a:	de 01       	movw	r26, r28
     f8c:	a7 5a       	subi	r26, 0xA7	; 167
     f8e:	bf 4f       	sbci	r27, 0xFF	; 255
     f90:	fe 01       	movw	r30, r28
     f92:	e7 5a       	subi	r30, 0xA7	; 167
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	11 96       	adiw	r26, 0x01	; 1
     f9e:	9c 93       	st	X, r25
     fa0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa2:	fe 01       	movw	r30, r28
     fa4:	e7 5a       	subi	r30, 0xA7	; 167
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	80 81       	ld	r24, Z
     faa:	91 81       	ldd	r25, Z+1	; 0x01
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	d1 f6       	brne	.-76     	; 0xf64 <LCD_SendCommand+0xf6>
     fb0:	27 c0       	rjmp	.+78     	; 0x1000 <LCD_SendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb2:	8e 01       	movw	r16, r28
     fb4:	07 5a       	subi	r16, 0xA7	; 167
     fb6:	1f 4f       	sbci	r17, 0xFF	; 255
     fb8:	fe 01       	movw	r30, r28
     fba:	e5 5a       	subi	r30, 0xA5	; 165
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	60 81       	ld	r22, Z
     fc0:	71 81       	ldd	r23, Z+1	; 0x01
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	93 81       	ldd	r25, Z+3	; 0x03
     fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	f8 01       	movw	r30, r16
     fd0:	91 83       	std	Z+1, r25	; 0x01
     fd2:	80 83       	st	Z, r24
     fd4:	de 01       	movw	r26, r28
     fd6:	ab 5a       	subi	r26, 0xAB	; 171
     fd8:	bf 4f       	sbci	r27, 0xFF	; 255
     fda:	fe 01       	movw	r30, r28
     fdc:	e7 5a       	subi	r30, 0xA7	; 167
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	8d 93       	st	X+, r24
     fe6:	9c 93       	st	X, r25
     fe8:	fe 01       	movw	r30, r28
     fea:	eb 5a       	subi	r30, 0xAB	; 171
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	80 81       	ld	r24, Z
     ff0:	91 81       	ldd	r25, Z+1	; 0x01
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <LCD_SendCommand+0x184>
     ff6:	fe 01       	movw	r30, r28
     ff8:	eb 5a       	subi	r30, 0xAB	; 171
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	80 83       	st	Z, r24
	_delay_ms(1);                                           /*  delay for T(as)= 50nsec  */
	/*  make enable equal one    */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	62 e0       	ldi	r22, 0x02	; 2
    1004:	41 e0       	ldi	r20, 0x01	; 1
    1006:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
    100a:	fe 01       	movw	r30, r28
    100c:	ef 5a       	subi	r30, 0xAF	; 175
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	a0 e8       	ldi	r26, 0x80	; 128
    1016:	bf e3       	ldi	r27, 0x3F	; 63
    1018:	80 83       	st	Z, r24
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	a2 83       	std	Z+2, r26	; 0x02
    101e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1020:	8e 01       	movw	r16, r28
    1022:	03 5b       	subi	r16, 0xB3	; 179
    1024:	1f 4f       	sbci	r17, 0xFF	; 255
    1026:	fe 01       	movw	r30, r28
    1028:	ef 5a       	subi	r30, 0xAF	; 175
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	60 81       	ld	r22, Z
    102e:	71 81       	ldd	r23, Z+1	; 0x01
    1030:	82 81       	ldd	r24, Z+2	; 0x02
    1032:	93 81       	ldd	r25, Z+3	; 0x03
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	4a ef       	ldi	r20, 0xFA	; 250
    103a:	54 e4       	ldi	r21, 0x44	; 68
    103c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	f8 01       	movw	r30, r16
    1046:	80 83       	st	Z, r24
    1048:	91 83       	std	Z+1, r25	; 0x01
    104a:	a2 83       	std	Z+2, r26	; 0x02
    104c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    104e:	fe 01       	movw	r30, r28
    1050:	e3 5b       	subi	r30, 0xB3	; 179
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	60 81       	ld	r22, Z
    1056:	71 81       	ldd	r23, Z+1	; 0x01
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	93 81       	ldd	r25, Z+3	; 0x03
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e8       	ldi	r20, 0x80	; 128
    1062:	5f e3       	ldi	r21, 0x3F	; 63
    1064:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1068:	88 23       	and	r24, r24
    106a:	44 f4       	brge	.+16     	; 0x107c <LCD_SendCommand+0x20e>
		__ticks = 1;
    106c:	fe 01       	movw	r30, r28
    106e:	e5 5b       	subi	r30, 0xB5	; 181
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	91 83       	std	Z+1, r25	; 0x01
    1078:	80 83       	st	Z, r24
    107a:	64 c0       	rjmp	.+200    	; 0x1144 <LCD_SendCommand+0x2d6>
	else if (__tmp > 65535)
    107c:	fe 01       	movw	r30, r28
    107e:	e3 5b       	subi	r30, 0xB3	; 179
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	60 81       	ld	r22, Z
    1084:	71 81       	ldd	r23, Z+1	; 0x01
    1086:	82 81       	ldd	r24, Z+2	; 0x02
    1088:	93 81       	ldd	r25, Z+3	; 0x03
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	3f ef       	ldi	r19, 0xFF	; 255
    108e:	4f e7       	ldi	r20, 0x7F	; 127
    1090:	57 e4       	ldi	r21, 0x47	; 71
    1092:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1096:	18 16       	cp	r1, r24
    1098:	0c f0       	brlt	.+2      	; 0x109c <LCD_SendCommand+0x22e>
    109a:	43 c0       	rjmp	.+134    	; 0x1122 <LCD_SendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109c:	fe 01       	movw	r30, r28
    109e:	ef 5a       	subi	r30, 0xAF	; 175
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	60 81       	ld	r22, Z
    10a4:	71 81       	ldd	r23, Z+1	; 0x01
    10a6:	82 81       	ldd	r24, Z+2	; 0x02
    10a8:	93 81       	ldd	r25, Z+3	; 0x03
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	40 e2       	ldi	r20, 0x20	; 32
    10b0:	51 e4       	ldi	r21, 0x41	; 65
    10b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	8e 01       	movw	r16, r28
    10bc:	05 5b       	subi	r16, 0xB5	; 181
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	f8 01       	movw	r30, r16
    10ce:	91 83       	std	Z+1, r25	; 0x01
    10d0:	80 83       	st	Z, r24
    10d2:	1f c0       	rjmp	.+62     	; 0x1112 <LCD_SendCommand+0x2a4>
    10d4:	fe 01       	movw	r30, r28
    10d6:	e7 5b       	subi	r30, 0xB7	; 183
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	88 ec       	ldi	r24, 0xC8	; 200
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	91 83       	std	Z+1, r25	; 0x01
    10e0:	80 83       	st	Z, r24
    10e2:	fe 01       	movw	r30, r28
    10e4:	e7 5b       	subi	r30, 0xB7	; 183
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	80 81       	ld	r24, Z
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <LCD_SendCommand+0x27e>
    10f0:	fe 01       	movw	r30, r28
    10f2:	e7 5b       	subi	r30, 0xB7	; 183
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fa:	de 01       	movw	r26, r28
    10fc:	a5 5b       	subi	r26, 0xB5	; 181
    10fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1100:	fe 01       	movw	r30, r28
    1102:	e5 5b       	subi	r30, 0xB5	; 181
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	80 81       	ld	r24, Z
    1108:	91 81       	ldd	r25, Z+1	; 0x01
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	9c 93       	st	X, r25
    1110:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1112:	fe 01       	movw	r30, r28
    1114:	e5 5b       	subi	r30, 0xB5	; 181
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	80 81       	ld	r24, Z
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	d1 f6       	brne	.-76     	; 0x10d4 <LCD_SendCommand+0x266>
    1120:	27 c0       	rjmp	.+78     	; 0x1170 <LCD_SendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1122:	8e 01       	movw	r16, r28
    1124:	05 5b       	subi	r16, 0xB5	; 181
    1126:	1f 4f       	sbci	r17, 0xFF	; 255
    1128:	fe 01       	movw	r30, r28
    112a:	e3 5b       	subi	r30, 0xB3	; 179
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	60 81       	ld	r22, Z
    1130:	71 81       	ldd	r23, Z+1	; 0x01
    1132:	82 81       	ldd	r24, Z+2	; 0x02
    1134:	93 81       	ldd	r25, Z+3	; 0x03
    1136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	f8 01       	movw	r30, r16
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	80 83       	st	Z, r24
    1144:	de 01       	movw	r26, r28
    1146:	a9 5b       	subi	r26, 0xB9	; 185
    1148:	bf 4f       	sbci	r27, 0xFF	; 255
    114a:	fe 01       	movw	r30, r28
    114c:	e5 5b       	subi	r30, 0xB5	; 181
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
    1154:	8d 93       	st	X+, r24
    1156:	9c 93       	st	X, r25
    1158:	fe 01       	movw	r30, r28
    115a:	e9 5b       	subi	r30, 0xB9	; 185
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	80 81       	ld	r24, Z
    1160:	91 81       	ldd	r25, Z+1	; 0x01
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <LCD_SendCommand+0x2f4>
    1166:	fe 01       	movw	r30, r28
    1168:	e9 5b       	subi	r30, 0xB9	; 185
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	91 83       	std	Z+1, r25	; 0x01
    116e:	80 83       	st	Z, r24
	_delay_ms(1);                                           /*  delay for T(dsw)= 50nsec */
	/*     disable enable        */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#elif(LCD_DATA_BITS_MODE==4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1170:	fe 01       	movw	r30, r28
    1172:	ed 59       	subi	r30, 0x9D	; 157
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	80 81       	ld	r24, Z
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	80 71       	andi	r24, 0x10	; 16
    117e:	90 70       	andi	r25, 0x00	; 0
    1180:	95 95       	asr	r25
    1182:	87 95       	ror	r24
    1184:	95 95       	asr	r25
    1186:	87 95       	ror	r24
    1188:	95 95       	asr	r25
    118a:	87 95       	ror	r24
    118c:	95 95       	asr	r25
    118e:	87 95       	ror	r24
    1190:	98 2f       	mov	r25, r24
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	63 e0       	ldi	r22, 0x03	; 3
    1196:	49 2f       	mov	r20, r25
    1198:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    119c:	fe 01       	movw	r30, r28
    119e:	ed 59       	subi	r30, 0x9D	; 157
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	80 81       	ld	r24, Z
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	80 72       	andi	r24, 0x20	; 32
    11aa:	90 70       	andi	r25, 0x00	; 0
    11ac:	95 95       	asr	r25
    11ae:	87 95       	ror	r24
    11b0:	95 95       	asr	r25
    11b2:	87 95       	ror	r24
    11b4:	95 95       	asr	r25
    11b6:	87 95       	ror	r24
    11b8:	95 95       	asr	r25
    11ba:	87 95       	ror	r24
    11bc:	95 95       	asr	r25
    11be:	87 95       	ror	r24
    11c0:	98 2f       	mov	r25, r24
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	64 e0       	ldi	r22, 0x04	; 4
    11c6:	49 2f       	mov	r20, r25
    11c8:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    11cc:	fe 01       	movw	r30, r28
    11ce:	ed 59       	subi	r30, 0x9D	; 157
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	80 81       	ld	r24, Z
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	80 74       	andi	r24, 0x40	; 64
    11da:	90 70       	andi	r25, 0x00	; 0
    11dc:	08 2e       	mov	r0, r24
    11de:	89 2f       	mov	r24, r25
    11e0:	00 0c       	add	r0, r0
    11e2:	88 1f       	adc	r24, r24
    11e4:	99 0b       	sbc	r25, r25
    11e6:	00 0c       	add	r0, r0
    11e8:	88 1f       	adc	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	98 2f       	mov	r25, r24
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	65 e0       	ldi	r22, 0x05	; 5
    11f2:	49 2f       	mov	r20, r25
    11f4:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    11f8:	fe 01       	movw	r30, r28
    11fa:	ed 59       	subi	r30, 0x9D	; 157
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	80 81       	ld	r24, Z
    1200:	98 2f       	mov	r25, r24
    1202:	99 1f       	adc	r25, r25
    1204:	99 27       	eor	r25, r25
    1206:	99 1f       	adc	r25, r25
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	66 e0       	ldi	r22, 0x06	; 6
    120c:	49 2f       	mov	r20, r25
    120e:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
    1212:	fe 01       	movw	r30, r28
    1214:	ed 5b       	subi	r30, 0xBD	; 189
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	a0 e8       	ldi	r26, 0x80	; 128
    121e:	bf e3       	ldi	r27, 0x3F	; 63
    1220:	80 83       	st	Z, r24
    1222:	91 83       	std	Z+1, r25	; 0x01
    1224:	a2 83       	std	Z+2, r26	; 0x02
    1226:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1228:	8e 01       	movw	r16, r28
    122a:	01 5c       	subi	r16, 0xC1	; 193
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	fe 01       	movw	r30, r28
    1230:	ed 5b       	subi	r30, 0xBD	; 189
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	60 81       	ld	r22, Z
    1236:	71 81       	ldd	r23, Z+1	; 0x01
    1238:	82 81       	ldd	r24, Z+2	; 0x02
    123a:	93 81       	ldd	r25, Z+3	; 0x03
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	4a ef       	ldi	r20, 0xFA	; 250
    1242:	54 e4       	ldi	r21, 0x44	; 68
    1244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	f8 01       	movw	r30, r16
    124e:	80 83       	st	Z, r24
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	a2 83       	std	Z+2, r26	; 0x02
    1254:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1256:	fe 01       	movw	r30, r28
    1258:	ff 96       	adiw	r30, 0x3f	; 63
    125a:	60 81       	ld	r22, Z
    125c:	71 81       	ldd	r23, Z+1	; 0x01
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e8       	ldi	r20, 0x80	; 128
    1268:	5f e3       	ldi	r21, 0x3F	; 63
    126a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    126e:	88 23       	and	r24, r24
    1270:	2c f4       	brge	.+10     	; 0x127c <LCD_SendCommand+0x40e>
		__ticks = 1;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9e af       	std	Y+62, r25	; 0x3e
    1278:	8d af       	std	Y+61, r24	; 0x3d
    127a:	46 c0       	rjmp	.+140    	; 0x1308 <LCD_SendCommand+0x49a>
	else if (__tmp > 65535)
    127c:	fe 01       	movw	r30, r28
    127e:	ff 96       	adiw	r30, 0x3f	; 63
    1280:	60 81       	ld	r22, Z
    1282:	71 81       	ldd	r23, Z+1	; 0x01
    1284:	82 81       	ldd	r24, Z+2	; 0x02
    1286:	93 81       	ldd	r25, Z+3	; 0x03
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	3f ef       	ldi	r19, 0xFF	; 255
    128c:	4f e7       	ldi	r20, 0x7F	; 127
    128e:	57 e4       	ldi	r21, 0x47	; 71
    1290:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1294:	18 16       	cp	r1, r24
    1296:	64 f5       	brge	.+88     	; 0x12f0 <LCD_SendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1298:	fe 01       	movw	r30, r28
    129a:	ed 5b       	subi	r30, 0xBD	; 189
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e2       	ldi	r20, 0x20	; 32
    12ac:	51 e4       	ldi	r21, 0x41	; 65
    12ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9e af       	std	Y+62, r25	; 0x3e
    12c4:	8d af       	std	Y+61, r24	; 0x3d
    12c6:	0f c0       	rjmp	.+30     	; 0x12e6 <LCD_SendCommand+0x478>
    12c8:	88 ec       	ldi	r24, 0xC8	; 200
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9c af       	std	Y+60, r25	; 0x3c
    12ce:	8b af       	std	Y+59, r24	; 0x3b
    12d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    12d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <LCD_SendCommand+0x466>
    12d8:	9c af       	std	Y+60, r25	; 0x3c
    12da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    12de:	9e ad       	ldd	r25, Y+62	; 0x3e
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9e af       	std	Y+62, r25	; 0x3e
    12e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    12e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	69 f7       	brne	.-38     	; 0x12c8 <LCD_SendCommand+0x45a>
    12ee:	16 c0       	rjmp	.+44     	; 0x131c <LCD_SendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f0:	fe 01       	movw	r30, r28
    12f2:	ff 96       	adiw	r30, 0x3f	; 63
    12f4:	60 81       	ld	r22, Z
    12f6:	71 81       	ldd	r23, Z+1	; 0x01
    12f8:	82 81       	ldd	r24, Z+2	; 0x02
    12fa:	93 81       	ldd	r25, Z+3	; 0x03
    12fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9e af       	std	Y+62, r25	; 0x3e
    1306:	8d af       	std	Y+61, r24	; 0x3d
    1308:	8d ad       	ldd	r24, Y+61	; 0x3d
    130a:	9e ad       	ldd	r25, Y+62	; 0x3e
    130c:	9a af       	std	Y+58, r25	; 0x3a
    130e:	89 af       	std	Y+57, r24	; 0x39
    1310:	89 ad       	ldd	r24, Y+57	; 0x39
    1312:	9a ad       	ldd	r25, Y+58	; 0x3a
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <LCD_SendCommand+0x4a6>
    1318:	9a af       	std	Y+58, r25	; 0x3a
    131a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	/*     disable enable        */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	62 e0       	ldi	r22, 0x02	; 2
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e8       	ldi	r26, 0x80	; 128
    132c:	bf e3       	ldi	r27, 0x3F	; 63
    132e:	8d ab       	std	Y+53, r24	; 0x35
    1330:	9e ab       	std	Y+54, r25	; 0x36
    1332:	af ab       	std	Y+55, r26	; 0x37
    1334:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1336:	6d a9       	ldd	r22, Y+53	; 0x35
    1338:	7e a9       	ldd	r23, Y+54	; 0x36
    133a:	8f a9       	ldd	r24, Y+55	; 0x37
    133c:	98 ad       	ldd	r25, Y+56	; 0x38
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	4a ef       	ldi	r20, 0xFA	; 250
    1344:	54 e4       	ldi	r21, 0x44	; 68
    1346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	89 ab       	std	Y+49, r24	; 0x31
    1350:	9a ab       	std	Y+50, r25	; 0x32
    1352:	ab ab       	std	Y+51, r26	; 0x33
    1354:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1356:	69 a9       	ldd	r22, Y+49	; 0x31
    1358:	7a a9       	ldd	r23, Y+50	; 0x32
    135a:	8b a9       	ldd	r24, Y+51	; 0x33
    135c:	9c a9       	ldd	r25, Y+52	; 0x34
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	40 e8       	ldi	r20, 0x80	; 128
    1364:	5f e3       	ldi	r21, 0x3F	; 63
    1366:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    136a:	88 23       	and	r24, r24
    136c:	2c f4       	brge	.+10     	; 0x1378 <LCD_SendCommand+0x50a>
		__ticks = 1;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	98 ab       	std	Y+48, r25	; 0x30
    1374:	8f a7       	std	Y+47, r24	; 0x2f
    1376:	3f c0       	rjmp	.+126    	; 0x13f6 <LCD_SendCommand+0x588>
	else if (__tmp > 65535)
    1378:	69 a9       	ldd	r22, Y+49	; 0x31
    137a:	7a a9       	ldd	r23, Y+50	; 0x32
    137c:	8b a9       	ldd	r24, Y+51	; 0x33
    137e:	9c a9       	ldd	r25, Y+52	; 0x34
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	3f ef       	ldi	r19, 0xFF	; 255
    1384:	4f e7       	ldi	r20, 0x7F	; 127
    1386:	57 e4       	ldi	r21, 0x47	; 71
    1388:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    138c:	18 16       	cp	r1, r24
    138e:	4c f5       	brge	.+82     	; 0x13e2 <LCD_SendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1390:	6d a9       	ldd	r22, Y+53	; 0x35
    1392:	7e a9       	ldd	r23, Y+54	; 0x36
    1394:	8f a9       	ldd	r24, Y+55	; 0x37
    1396:	98 ad       	ldd	r25, Y+56	; 0x38
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	40 e2       	ldi	r20, 0x20	; 32
    139e:	51 e4       	ldi	r21, 0x41	; 65
    13a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	bc 01       	movw	r22, r24
    13aa:	cd 01       	movw	r24, r26
    13ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	98 ab       	std	Y+48, r25	; 0x30
    13b6:	8f a7       	std	Y+47, r24	; 0x2f
    13b8:	0f c0       	rjmp	.+30     	; 0x13d8 <LCD_SendCommand+0x56a>
    13ba:	88 ec       	ldi	r24, 0xC8	; 200
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9e a7       	std	Y+46, r25	; 0x2e
    13c0:	8d a7       	std	Y+45, r24	; 0x2d
    13c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    13c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <LCD_SendCommand+0x558>
    13ca:	9e a7       	std	Y+46, r25	; 0x2e
    13cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    13d0:	98 a9       	ldd	r25, Y+48	; 0x30
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	98 ab       	std	Y+48, r25	; 0x30
    13d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13da:	98 a9       	ldd	r25, Y+48	; 0x30
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	69 f7       	brne	.-38     	; 0x13ba <LCD_SendCommand+0x54c>
    13e0:	14 c0       	rjmp	.+40     	; 0x140a <LCD_SendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e2:	69 a9       	ldd	r22, Y+49	; 0x31
    13e4:	7a a9       	ldd	r23, Y+50	; 0x32
    13e6:	8b a9       	ldd	r24, Y+51	; 0x33
    13e8:	9c a9       	ldd	r25, Y+52	; 0x34
    13ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	98 ab       	std	Y+48, r25	; 0x30
    13f4:	8f a7       	std	Y+47, r24	; 0x2f
    13f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13f8:	98 a9       	ldd	r25, Y+48	; 0x30
    13fa:	9c a7       	std	Y+44, r25	; 0x2c
    13fc:	8b a7       	std	Y+43, r24	; 0x2b
    13fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1400:	9c a5       	ldd	r25, Y+44	; 0x2c
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <LCD_SendCommand+0x594>
    1406:	9c a7       	std	Y+44, r25	; 0x2c
    1408:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/*  make enable equal one    */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	62 e0       	ldi	r22, 0x02	; 2
    140e:	41 e0       	ldi	r20, 0x01	; 1
    1410:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a0 e8       	ldi	r26, 0x80	; 128
    141a:	bf e3       	ldi	r27, 0x3F	; 63
    141c:	8f a3       	std	Y+39, r24	; 0x27
    141e:	98 a7       	std	Y+40, r25	; 0x28
    1420:	a9 a7       	std	Y+41, r26	; 0x29
    1422:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1424:	6f a1       	ldd	r22, Y+39	; 0x27
    1426:	78 a5       	ldd	r23, Y+40	; 0x28
    1428:	89 a5       	ldd	r24, Y+41	; 0x29
    142a:	9a a5       	ldd	r25, Y+42	; 0x2a
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	4a ef       	ldi	r20, 0xFA	; 250
    1432:	54 e4       	ldi	r21, 0x44	; 68
    1434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	8b a3       	std	Y+35, r24	; 0x23
    143e:	9c a3       	std	Y+36, r25	; 0x24
    1440:	ad a3       	std	Y+37, r26	; 0x25
    1442:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1444:	6b a1       	ldd	r22, Y+35	; 0x23
    1446:	7c a1       	ldd	r23, Y+36	; 0x24
    1448:	8d a1       	ldd	r24, Y+37	; 0x25
    144a:	9e a1       	ldd	r25, Y+38	; 0x26
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1458:	88 23       	and	r24, r24
    145a:	2c f4       	brge	.+10     	; 0x1466 <LCD_SendCommand+0x5f8>
		__ticks = 1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9a a3       	std	Y+34, r25	; 0x22
    1462:	89 a3       	std	Y+33, r24	; 0x21
    1464:	3f c0       	rjmp	.+126    	; 0x14e4 <LCD_SendCommand+0x676>
	else if (__tmp > 65535)
    1466:	6b a1       	ldd	r22, Y+35	; 0x23
    1468:	7c a1       	ldd	r23, Y+36	; 0x24
    146a:	8d a1       	ldd	r24, Y+37	; 0x25
    146c:	9e a1       	ldd	r25, Y+38	; 0x26
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	3f ef       	ldi	r19, 0xFF	; 255
    1472:	4f e7       	ldi	r20, 0x7F	; 127
    1474:	57 e4       	ldi	r21, 0x47	; 71
    1476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    147a:	18 16       	cp	r1, r24
    147c:	4c f5       	brge	.+82     	; 0x14d0 <LCD_SendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147e:	6f a1       	ldd	r22, Y+39	; 0x27
    1480:	78 a5       	ldd	r23, Y+40	; 0x28
    1482:	89 a5       	ldd	r24, Y+41	; 0x29
    1484:	9a a5       	ldd	r25, Y+42	; 0x2a
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e2       	ldi	r20, 0x20	; 32
    148c:	51 e4       	ldi	r21, 0x41	; 65
    148e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	9a a3       	std	Y+34, r25	; 0x22
    14a4:	89 a3       	std	Y+33, r24	; 0x21
    14a6:	0f c0       	rjmp	.+30     	; 0x14c6 <LCD_SendCommand+0x658>
    14a8:	88 ec       	ldi	r24, 0xC8	; 200
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	98 a3       	std	Y+32, r25	; 0x20
    14ae:	8f 8f       	std	Y+31, r24	; 0x1f
    14b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14b2:	98 a1       	ldd	r25, Y+32	; 0x20
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <LCD_SendCommand+0x646>
    14b8:	98 a3       	std	Y+32, r25	; 0x20
    14ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14bc:	89 a1       	ldd	r24, Y+33	; 0x21
    14be:	9a a1       	ldd	r25, Y+34	; 0x22
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	9a a3       	std	Y+34, r25	; 0x22
    14c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c6:	89 a1       	ldd	r24, Y+33	; 0x21
    14c8:	9a a1       	ldd	r25, Y+34	; 0x22
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	69 f7       	brne	.-38     	; 0x14a8 <LCD_SendCommand+0x63a>
    14ce:	14 c0       	rjmp	.+40     	; 0x14f8 <LCD_SendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d0:	6b a1       	ldd	r22, Y+35	; 0x23
    14d2:	7c a1       	ldd	r23, Y+36	; 0x24
    14d4:	8d a1       	ldd	r24, Y+37	; 0x25
    14d6:	9e a1       	ldd	r25, Y+38	; 0x26
    14d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	9a a3       	std	Y+34, r25	; 0x22
    14e2:	89 a3       	std	Y+33, r24	; 0x21
    14e4:	89 a1       	ldd	r24, Y+33	; 0x21
    14e6:	9a a1       	ldd	r25, Y+34	; 0x22
    14e8:	9e 8f       	std	Y+30, r25	; 0x1e
    14ea:	8d 8f       	std	Y+29, r24	; 0x1d
    14ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <LCD_SendCommand+0x682>
    14f4:	9e 8f       	std	Y+30, r25	; 0x1e
    14f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    14f8:	fe 01       	movw	r30, r28
    14fa:	ed 59       	subi	r30, 0x9D	; 157
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	80 81       	ld	r24, Z
    1500:	98 2f       	mov	r25, r24
    1502:	91 70       	andi	r25, 0x01	; 1
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	63 e0       	ldi	r22, 0x03	; 3
    1508:	49 2f       	mov	r20, r25
    150a:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    150e:	fe 01       	movw	r30, r28
    1510:	ed 59       	subi	r30, 0x9D	; 157
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	80 81       	ld	r24, Z
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	82 70       	andi	r24, 0x02	; 2
    151c:	90 70       	andi	r25, 0x00	; 0
    151e:	95 95       	asr	r25
    1520:	87 95       	ror	r24
    1522:	98 2f       	mov	r25, r24
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	64 e0       	ldi	r22, 0x04	; 4
    1528:	49 2f       	mov	r20, r25
    152a:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    152e:	fe 01       	movw	r30, r28
    1530:	ed 59       	subi	r30, 0x9D	; 157
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	80 81       	ld	r24, Z
    1536:	88 2f       	mov	r24, r24
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	84 70       	andi	r24, 0x04	; 4
    153c:	90 70       	andi	r25, 0x00	; 0
    153e:	95 95       	asr	r25
    1540:	87 95       	ror	r24
    1542:	95 95       	asr	r25
    1544:	87 95       	ror	r24
    1546:	98 2f       	mov	r25, r24
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	65 e0       	ldi	r22, 0x05	; 5
    154c:	49 2f       	mov	r20, r25
    154e:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1552:	fe 01       	movw	r30, r28
    1554:	ed 59       	subi	r30, 0x9D	; 157
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	80 81       	ld	r24, Z
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	88 70       	andi	r24, 0x08	; 8
    1560:	90 70       	andi	r25, 0x00	; 0
    1562:	95 95       	asr	r25
    1564:	87 95       	ror	r24
    1566:	95 95       	asr	r25
    1568:	87 95       	ror	r24
    156a:	95 95       	asr	r25
    156c:	87 95       	ror	r24
    156e:	98 2f       	mov	r25, r24
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	66 e0       	ldi	r22, 0x06	; 6
    1574:	49 2f       	mov	r20, r25
    1576:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a0 e8       	ldi	r26, 0x80	; 128
    1580:	bf e3       	ldi	r27, 0x3F	; 63
    1582:	89 8f       	std	Y+25, r24	; 0x19
    1584:	9a 8f       	std	Y+26, r25	; 0x1a
    1586:	ab 8f       	std	Y+27, r26	; 0x1b
    1588:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158a:	69 8d       	ldd	r22, Y+25	; 0x19
    158c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    158e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1590:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	4a ef       	ldi	r20, 0xFA	; 250
    1598:	54 e4       	ldi	r21, 0x44	; 68
    159a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	8d 8b       	std	Y+21, r24	; 0x15
    15a4:	9e 8b       	std	Y+22, r25	; 0x16
    15a6:	af 8b       	std	Y+23, r26	; 0x17
    15a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15aa:	6d 89       	ldd	r22, Y+21	; 0x15
    15ac:	7e 89       	ldd	r23, Y+22	; 0x16
    15ae:	8f 89       	ldd	r24, Y+23	; 0x17
    15b0:	98 8d       	ldd	r25, Y+24	; 0x18
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15be:	88 23       	and	r24, r24
    15c0:	2c f4       	brge	.+10     	; 0x15cc <LCD_SendCommand+0x75e>
		__ticks = 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9c 8b       	std	Y+20, r25	; 0x14
    15c8:	8b 8b       	std	Y+19, r24	; 0x13
    15ca:	3f c0       	rjmp	.+126    	; 0x164a <LCD_SendCommand+0x7dc>
	else if (__tmp > 65535)
    15cc:	6d 89       	ldd	r22, Y+21	; 0x15
    15ce:	7e 89       	ldd	r23, Y+22	; 0x16
    15d0:	8f 89       	ldd	r24, Y+23	; 0x17
    15d2:	98 8d       	ldd	r25, Y+24	; 0x18
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	3f ef       	ldi	r19, 0xFF	; 255
    15d8:	4f e7       	ldi	r20, 0x7F	; 127
    15da:	57 e4       	ldi	r21, 0x47	; 71
    15dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e0:	18 16       	cp	r1, r24
    15e2:	4c f5       	brge	.+82     	; 0x1636 <LCD_SendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e4:	69 8d       	ldd	r22, Y+25	; 0x19
    15e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9c 8b       	std	Y+20, r25	; 0x14
    160a:	8b 8b       	std	Y+19, r24	; 0x13
    160c:	0f c0       	rjmp	.+30     	; 0x162c <LCD_SendCommand+0x7be>
    160e:	88 ec       	ldi	r24, 0xC8	; 200
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9a 8b       	std	Y+18, r25	; 0x12
    1614:	89 8b       	std	Y+17, r24	; 0x11
    1616:	89 89       	ldd	r24, Y+17	; 0x11
    1618:	9a 89       	ldd	r25, Y+18	; 0x12
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <LCD_SendCommand+0x7ac>
    161e:	9a 8b       	std	Y+18, r25	; 0x12
    1620:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1622:	8b 89       	ldd	r24, Y+19	; 0x13
    1624:	9c 89       	ldd	r25, Y+20	; 0x14
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	9c 8b       	std	Y+20, r25	; 0x14
    162a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	8b 89       	ldd	r24, Y+19	; 0x13
    162e:	9c 89       	ldd	r25, Y+20	; 0x14
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	69 f7       	brne	.-38     	; 0x160e <LCD_SendCommand+0x7a0>
    1634:	14 c0       	rjmp	.+40     	; 0x165e <LCD_SendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1636:	6d 89       	ldd	r22, Y+21	; 0x15
    1638:	7e 89       	ldd	r23, Y+22	; 0x16
    163a:	8f 89       	ldd	r24, Y+23	; 0x17
    163c:	98 8d       	ldd	r25, Y+24	; 0x18
    163e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9c 8b       	std	Y+20, r25	; 0x14
    1648:	8b 8b       	std	Y+19, r24	; 0x13
    164a:	8b 89       	ldd	r24, Y+19	; 0x13
    164c:	9c 89       	ldd	r25, Y+20	; 0x14
    164e:	98 8b       	std	Y+16, r25	; 0x10
    1650:	8f 87       	std	Y+15, r24	; 0x0f
    1652:	8f 85       	ldd	r24, Y+15	; 0x0f
    1654:	98 89       	ldd	r25, Y+16	; 0x10
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <LCD_SendCommand+0x7e8>
    165a:	98 8b       	std	Y+16, r25	; 0x10
    165c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	/*     disable enable        */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	62 e0       	ldi	r22, 0x02	; 2
    1662:	40 e0       	ldi	r20, 0x00	; 0
    1664:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a0 e8       	ldi	r26, 0x80	; 128
    166e:	bf e3       	ldi	r27, 0x3F	; 63
    1670:	8b 87       	std	Y+11, r24	; 0x0b
    1672:	9c 87       	std	Y+12, r25	; 0x0c
    1674:	ad 87       	std	Y+13, r26	; 0x0d
    1676:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1678:	6b 85       	ldd	r22, Y+11	; 0x0b
    167a:	7c 85       	ldd	r23, Y+12	; 0x0c
    167c:	8d 85       	ldd	r24, Y+13	; 0x0d
    167e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	4a ef       	ldi	r20, 0xFA	; 250
    1686:	54 e4       	ldi	r21, 0x44	; 68
    1688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	8f 83       	std	Y+7, r24	; 0x07
    1692:	98 87       	std	Y+8, r25	; 0x08
    1694:	a9 87       	std	Y+9, r26	; 0x09
    1696:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1698:	6f 81       	ldd	r22, Y+7	; 0x07
    169a:	78 85       	ldd	r23, Y+8	; 0x08
    169c:	89 85       	ldd	r24, Y+9	; 0x09
    169e:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	2c f4       	brge	.+10     	; 0x16ba <LCD_SendCommand+0x84c>
		__ticks = 1;
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9e 83       	std	Y+6, r25	; 0x06
    16b6:	8d 83       	std	Y+5, r24	; 0x05
    16b8:	3f c0       	rjmp	.+126    	; 0x1738 <LCD_SendCommand+0x8ca>
	else if (__tmp > 65535)
    16ba:	6f 81       	ldd	r22, Y+7	; 0x07
    16bc:	78 85       	ldd	r23, Y+8	; 0x08
    16be:	89 85       	ldd	r24, Y+9	; 0x09
    16c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	3f ef       	ldi	r19, 0xFF	; 255
    16c6:	4f e7       	ldi	r20, 0x7F	; 127
    16c8:	57 e4       	ldi	r21, 0x47	; 71
    16ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ce:	18 16       	cp	r1, r24
    16d0:	4c f5       	brge	.+82     	; 0x1724 <LCD_SendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e2       	ldi	r20, 0x20	; 32
    16e0:	51 e4       	ldi	r21, 0x41	; 65
    16e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	bc 01       	movw	r22, r24
    16ec:	cd 01       	movw	r24, r26
    16ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	9e 83       	std	Y+6, r25	; 0x06
    16f8:	8d 83       	std	Y+5, r24	; 0x05
    16fa:	0f c0       	rjmp	.+30     	; 0x171a <LCD_SendCommand+0x8ac>
    16fc:	88 ec       	ldi	r24, 0xC8	; 200
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	9c 83       	std	Y+4, r25	; 0x04
    1702:	8b 83       	std	Y+3, r24	; 0x03
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <LCD_SendCommand+0x89a>
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	9e 81       	ldd	r25, Y+6	; 0x06
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	69 f7       	brne	.-38     	; 0x16fc <LCD_SendCommand+0x88e>
    1722:	14 c0       	rjmp	.+40     	; 0x174c <LCD_SendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1724:	6f 81       	ldd	r22, Y+7	; 0x07
    1726:	78 85       	ldd	r23, Y+8	; 0x08
    1728:	89 85       	ldd	r24, Y+9	; 0x09
    172a:	9a 85       	ldd	r25, Y+10	; 0x0a
    172c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	9e 83       	std	Y+6, r25	; 0x06
    1736:	8d 83       	std	Y+5, r24	; 0x05
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	9e 81       	ldd	r25, Y+6	; 0x06
    173c:	9a 83       	std	Y+2, r25	; 0x02
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	9a 81       	ldd	r25, Y+2	; 0x02
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <LCD_SendCommand+0x8d6>
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    174c:	cd 59       	subi	r28, 0x9D	; 157
    174e:	df 4f       	sbci	r29, 0xFF	; 255
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	08 95       	ret

00001764 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 character){
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	c3 56       	subi	r28, 0x63	; 99
    1772:	d0 40       	sbci	r29, 0x00	; 0
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	fe 01       	movw	r30, r28
    1780:	ed 59       	subi	r30, 0x9D	; 157
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	80 83       	st	Z, r24
	/*    Make RS equal 1       */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	61 e0       	ldi	r22, 0x01	; 1
    178a:	41 e0       	ldi	r20, 0x01	; 1
    178c:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
    1790:	fe 01       	movw	r30, r28
    1792:	e1 5a       	subi	r30, 0xA1	; 161
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a0 e8       	ldi	r26, 0x80	; 128
    179c:	bf e3       	ldi	r27, 0x3F	; 63
    179e:	80 83       	st	Z, r24
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	a2 83       	std	Z+2, r26	; 0x02
    17a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a6:	8e 01       	movw	r16, r28
    17a8:	05 5a       	subi	r16, 0xA5	; 165
    17aa:	1f 4f       	sbci	r17, 0xFF	; 255
    17ac:	fe 01       	movw	r30, r28
    17ae:	e1 5a       	subi	r30, 0xA1	; 161
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	4a ef       	ldi	r20, 0xFA	; 250
    17c0:	54 e4       	ldi	r21, 0x44	; 68
    17c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	f8 01       	movw	r30, r16
    17cc:	80 83       	st	Z, r24
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	a2 83       	std	Z+2, r26	; 0x02
    17d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17d4:	fe 01       	movw	r30, r28
    17d6:	e5 5a       	subi	r30, 0xA5	; 165
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e8       	ldi	r20, 0x80	; 128
    17e8:	5f e3       	ldi	r21, 0x3F	; 63
    17ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ee:	88 23       	and	r24, r24
    17f0:	44 f4       	brge	.+16     	; 0x1802 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    17f2:	fe 01       	movw	r30, r28
    17f4:	e7 5a       	subi	r30, 0xA7	; 167
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	80 83       	st	Z, r24
    1800:	64 c0       	rjmp	.+200    	; 0x18ca <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1802:	fe 01       	movw	r30, r28
    1804:	e5 5a       	subi	r30, 0xA5	; 165
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	3f ef       	ldi	r19, 0xFF	; 255
    1814:	4f e7       	ldi	r20, 0x7F	; 127
    1816:	57 e4       	ldi	r21, 0x47	; 71
    1818:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    181c:	18 16       	cp	r1, r24
    181e:	0c f0       	brlt	.+2      	; 0x1822 <LCD_displayCharacter+0xbe>
    1820:	43 c0       	rjmp	.+134    	; 0x18a8 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1822:	fe 01       	movw	r30, r28
    1824:	e1 5a       	subi	r30, 0xA1	; 161
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	60 81       	ld	r22, Z
    182a:	71 81       	ldd	r23, Z+1	; 0x01
    182c:	82 81       	ldd	r24, Z+2	; 0x02
    182e:	93 81       	ldd	r25, Z+3	; 0x03
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e2       	ldi	r20, 0x20	; 32
    1836:	51 e4       	ldi	r21, 0x41	; 65
    1838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	8e 01       	movw	r16, r28
    1842:	07 5a       	subi	r16, 0xA7	; 167
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	f8 01       	movw	r30, r16
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
    1858:	1f c0       	rjmp	.+62     	; 0x1898 <LCD_displayCharacter+0x134>
    185a:	fe 01       	movw	r30, r28
    185c:	e9 5a       	subi	r30, 0xA9	; 169
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	88 ec       	ldi	r24, 0xC8	; 200
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	80 83       	st	Z, r24
    1868:	fe 01       	movw	r30, r28
    186a:	e9 5a       	subi	r30, 0xA9	; 169
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <LCD_displayCharacter+0x10e>
    1876:	fe 01       	movw	r30, r28
    1878:	e9 5a       	subi	r30, 0xA9	; 169
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1880:	de 01       	movw	r26, r28
    1882:	a7 5a       	subi	r26, 0xA7	; 167
    1884:	bf 4f       	sbci	r27, 0xFF	; 255
    1886:	fe 01       	movw	r30, r28
    1888:	e7 5a       	subi	r30, 0xA7	; 167
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	80 81       	ld	r24, Z
    188e:	91 81       	ldd	r25, Z+1	; 0x01
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	11 96       	adiw	r26, 0x01	; 1
    1894:	9c 93       	st	X, r25
    1896:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1898:	fe 01       	movw	r30, r28
    189a:	e7 5a       	subi	r30, 0xA7	; 167
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	80 81       	ld	r24, Z
    18a0:	91 81       	ldd	r25, Z+1	; 0x01
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	d1 f6       	brne	.-76     	; 0x185a <LCD_displayCharacter+0xf6>
    18a6:	27 c0       	rjmp	.+78     	; 0x18f6 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a8:	8e 01       	movw	r16, r28
    18aa:	07 5a       	subi	r16, 0xA7	; 167
    18ac:	1f 4f       	sbci	r17, 0xFF	; 255
    18ae:	fe 01       	movw	r30, r28
    18b0:	e5 5a       	subi	r30, 0xA5	; 165
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	f8 01       	movw	r30, r16
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	80 83       	st	Z, r24
    18ca:	de 01       	movw	r26, r28
    18cc:	ab 5a       	subi	r26, 0xAB	; 171
    18ce:	bf 4f       	sbci	r27, 0xFF	; 255
    18d0:	fe 01       	movw	r30, r28
    18d2:	e7 5a       	subi	r30, 0xA7	; 167
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	80 81       	ld	r24, Z
    18d8:	91 81       	ldd	r25, Z+1	; 0x01
    18da:	8d 93       	st	X+, r24
    18dc:	9c 93       	st	X, r25
    18de:	fe 01       	movw	r30, r28
    18e0:	eb 5a       	subi	r30, 0xAB	; 171
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <LCD_displayCharacter+0x184>
    18ec:	fe 01       	movw	r30, r28
    18ee:	eb 5a       	subi	r30, 0xAB	; 171
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	80 83       	st	Z, r24
	_delay_ms(1);                                           /*  delay for T(as)= 50nsec  */
	/*  make enable equal one    */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	62 e0       	ldi	r22, 0x02	; 2
    18fa:	41 e0       	ldi	r20, 0x01	; 1
    18fc:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
    1900:	fe 01       	movw	r30, r28
    1902:	ef 5a       	subi	r30, 0xAF	; 175
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a0 e8       	ldi	r26, 0x80	; 128
    190c:	bf e3       	ldi	r27, 0x3F	; 63
    190e:	80 83       	st	Z, r24
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	a2 83       	std	Z+2, r26	; 0x02
    1914:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1916:	8e 01       	movw	r16, r28
    1918:	03 5b       	subi	r16, 0xB3	; 179
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	fe 01       	movw	r30, r28
    191e:	ef 5a       	subi	r30, 0xAF	; 175
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a ef       	ldi	r20, 0xFA	; 250
    1930:	54 e4       	ldi	r21, 0x44	; 68
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	f8 01       	movw	r30, r16
    193c:	80 83       	st	Z, r24
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	a2 83       	std	Z+2, r26	; 0x02
    1942:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1944:	fe 01       	movw	r30, r28
    1946:	e3 5b       	subi	r30, 0xB3	; 179
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	60 81       	ld	r22, Z
    194c:	71 81       	ldd	r23, Z+1	; 0x01
    194e:	82 81       	ldd	r24, Z+2	; 0x02
    1950:	93 81       	ldd	r25, Z+3	; 0x03
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e8       	ldi	r20, 0x80	; 128
    1958:	5f e3       	ldi	r21, 0x3F	; 63
    195a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    195e:	88 23       	and	r24, r24
    1960:	44 f4       	brge	.+16     	; 0x1972 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    1962:	fe 01       	movw	r30, r28
    1964:	e5 5b       	subi	r30, 0xB5	; 181
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
    1970:	64 c0       	rjmp	.+200    	; 0x1a3a <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1972:	fe 01       	movw	r30, r28
    1974:	e3 5b       	subi	r30, 0xB3	; 179
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	60 81       	ld	r22, Z
    197a:	71 81       	ldd	r23, Z+1	; 0x01
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	3f ef       	ldi	r19, 0xFF	; 255
    1984:	4f e7       	ldi	r20, 0x7F	; 127
    1986:	57 e4       	ldi	r21, 0x47	; 71
    1988:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    198c:	18 16       	cp	r1, r24
    198e:	0c f0       	brlt	.+2      	; 0x1992 <LCD_displayCharacter+0x22e>
    1990:	43 c0       	rjmp	.+134    	; 0x1a18 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1992:	fe 01       	movw	r30, r28
    1994:	ef 5a       	subi	r30, 0xAF	; 175
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	60 81       	ld	r22, Z
    199a:	71 81       	ldd	r23, Z+1	; 0x01
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e2       	ldi	r20, 0x20	; 32
    19a6:	51 e4       	ldi	r21, 0x41	; 65
    19a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	8e 01       	movw	r16, r28
    19b2:	05 5b       	subi	r16, 0xB5	; 181
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	f8 01       	movw	r30, r16
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24
    19c8:	1f c0       	rjmp	.+62     	; 0x1a08 <LCD_displayCharacter+0x2a4>
    19ca:	fe 01       	movw	r30, r28
    19cc:	e7 5b       	subi	r30, 0xB7	; 183
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	88 ec       	ldi	r24, 0xC8	; 200
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	80 83       	st	Z, r24
    19d8:	fe 01       	movw	r30, r28
    19da:	e7 5b       	subi	r30, 0xB7	; 183
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	80 81       	ld	r24, Z
    19e0:	91 81       	ldd	r25, Z+1	; 0x01
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <LCD_displayCharacter+0x27e>
    19e6:	fe 01       	movw	r30, r28
    19e8:	e7 5b       	subi	r30, 0xB7	; 183
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f0:	de 01       	movw	r26, r28
    19f2:	a5 5b       	subi	r26, 0xB5	; 181
    19f4:	bf 4f       	sbci	r27, 0xFF	; 255
    19f6:	fe 01       	movw	r30, r28
    19f8:	e5 5b       	subi	r30, 0xB5	; 181
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	80 81       	ld	r24, Z
    19fe:	91 81       	ldd	r25, Z+1	; 0x01
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	11 96       	adiw	r26, 0x01	; 1
    1a04:	9c 93       	st	X, r25
    1a06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e5 5b       	subi	r30, 0xB5	; 181
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	80 81       	ld	r24, Z
    1a10:	91 81       	ldd	r25, Z+1	; 0x01
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	d1 f6       	brne	.-76     	; 0x19ca <LCD_displayCharacter+0x266>
    1a16:	27 c0       	rjmp	.+78     	; 0x1a66 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a18:	8e 01       	movw	r16, r28
    1a1a:	05 5b       	subi	r16, 0xB5	; 181
    1a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e3 5b       	subi	r30, 0xB3	; 179
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	60 81       	ld	r22, Z
    1a26:	71 81       	ldd	r23, Z+1	; 0x01
    1a28:	82 81       	ldd	r24, Z+2	; 0x02
    1a2a:	93 81       	ldd	r25, Z+3	; 0x03
    1a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	f8 01       	movw	r30, r16
    1a36:	91 83       	std	Z+1, r25	; 0x01
    1a38:	80 83       	st	Z, r24
    1a3a:	de 01       	movw	r26, r28
    1a3c:	a9 5b       	subi	r26, 0xB9	; 185
    1a3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a40:	fe 01       	movw	r30, r28
    1a42:	e5 5b       	subi	r30, 0xB5	; 181
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	8d 93       	st	X+, r24
    1a4c:	9c 93       	st	X, r25
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e9 5b       	subi	r30, 0xB9	; 185
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 81       	ld	r24, Z
    1a56:	91 81       	ldd	r25, Z+1	; 0x01
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_displayCharacter+0x2f4>
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e9 5b       	subi	r30, 0xB9	; 185
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24
	_delay_ms(1);                                           /*  delay for T(dsw)= 50nsec */
	/*     disable enable        */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#elif(LCD_DATA_BITS_MODE==4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(character,4));
    1a66:	fe 01       	movw	r30, r28
    1a68:	ed 59       	subi	r30, 0x9D	; 157
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	80 81       	ld	r24, Z
    1a6e:	88 2f       	mov	r24, r24
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	80 71       	andi	r24, 0x10	; 16
    1a74:	90 70       	andi	r25, 0x00	; 0
    1a76:	95 95       	asr	r25
    1a78:	87 95       	ror	r24
    1a7a:	95 95       	asr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	95 95       	asr	r25
    1a80:	87 95       	ror	r24
    1a82:	95 95       	asr	r25
    1a84:	87 95       	ror	r24
    1a86:	98 2f       	mov	r25, r24
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	63 e0       	ldi	r22, 0x03	; 3
    1a8c:	49 2f       	mov	r20, r25
    1a8e:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(character,5));
    1a92:	fe 01       	movw	r30, r28
    1a94:	ed 59       	subi	r30, 0x9D	; 157
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 2f       	mov	r24, r24
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	80 72       	andi	r24, 0x20	; 32
    1aa0:	90 70       	andi	r25, 0x00	; 0
    1aa2:	95 95       	asr	r25
    1aa4:	87 95       	ror	r24
    1aa6:	95 95       	asr	r25
    1aa8:	87 95       	ror	r24
    1aaa:	95 95       	asr	r25
    1aac:	87 95       	ror	r24
    1aae:	95 95       	asr	r25
    1ab0:	87 95       	ror	r24
    1ab2:	95 95       	asr	r25
    1ab4:	87 95       	ror	r24
    1ab6:	98 2f       	mov	r25, r24
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	64 e0       	ldi	r22, 0x04	; 4
    1abc:	49 2f       	mov	r20, r25
    1abe:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(character,6));
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	ed 59       	subi	r30, 0x9D	; 157
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 81       	ld	r24, Z
    1aca:	88 2f       	mov	r24, r24
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	80 74       	andi	r24, 0x40	; 64
    1ad0:	90 70       	andi	r25, 0x00	; 0
    1ad2:	08 2e       	mov	r0, r24
    1ad4:	89 2f       	mov	r24, r25
    1ad6:	00 0c       	add	r0, r0
    1ad8:	88 1f       	adc	r24, r24
    1ada:	99 0b       	sbc	r25, r25
    1adc:	00 0c       	add	r0, r0
    1ade:	88 1f       	adc	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	98 2f       	mov	r25, r24
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	65 e0       	ldi	r22, 0x05	; 5
    1ae8:	49 2f       	mov	r20, r25
    1aea:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(character,7));
    1aee:	fe 01       	movw	r30, r28
    1af0:	ed 59       	subi	r30, 0x9D	; 157
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	80 81       	ld	r24, Z
    1af6:	98 2f       	mov	r25, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	99 27       	eor	r25, r25
    1afc:	99 1f       	adc	r25, r25
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	66 e0       	ldi	r22, 0x06	; 6
    1b02:	49 2f       	mov	r20, r25
    1b04:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ed 5b       	subi	r30, 0xBD	; 189
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a0 e8       	ldi	r26, 0x80	; 128
    1b14:	bf e3       	ldi	r27, 0x3F	; 63
    1b16:	80 83       	st	Z, r24
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	a2 83       	std	Z+2, r26	; 0x02
    1b1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1e:	8e 01       	movw	r16, r28
    1b20:	01 5c       	subi	r16, 0xC1	; 193
    1b22:	1f 4f       	sbci	r17, 0xFF	; 255
    1b24:	fe 01       	movw	r30, r28
    1b26:	ed 5b       	subi	r30, 0xBD	; 189
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	60 81       	ld	r22, Z
    1b2c:	71 81       	ldd	r23, Z+1	; 0x01
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4a ef       	ldi	r20, 0xFA	; 250
    1b38:	54 e4       	ldi	r21, 0x44	; 68
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	f8 01       	movw	r30, r16
    1b44:	80 83       	st	Z, r24
    1b46:	91 83       	std	Z+1, r25	; 0x01
    1b48:	a2 83       	std	Z+2, r26	; 0x02
    1b4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	ff 96       	adiw	r30, 0x3f	; 63
    1b50:	60 81       	ld	r22, Z
    1b52:	71 81       	ldd	r23, Z+1	; 0x01
    1b54:	82 81       	ldd	r24, Z+2	; 0x02
    1b56:	93 81       	ldd	r25, Z+3	; 0x03
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e8       	ldi	r20, 0x80	; 128
    1b5e:	5f e3       	ldi	r21, 0x3F	; 63
    1b60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b64:	88 23       	and	r24, r24
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	9e af       	std	Y+62, r25	; 0x3e
    1b6e:	8d af       	std	Y+61, r24	; 0x3d
    1b70:	46 c0       	rjmp	.+140    	; 0x1bfe <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    1b72:	fe 01       	movw	r30, r28
    1b74:	ff 96       	adiw	r30, 0x3f	; 63
    1b76:	60 81       	ld	r22, Z
    1b78:	71 81       	ldd	r23, Z+1	; 0x01
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	93 81       	ldd	r25, Z+3	; 0x03
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	3f ef       	ldi	r19, 0xFF	; 255
    1b82:	4f e7       	ldi	r20, 0x7F	; 127
    1b84:	57 e4       	ldi	r21, 0x47	; 71
    1b86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8a:	18 16       	cp	r1, r24
    1b8c:	64 f5       	brge	.+88     	; 0x1be6 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	fe 01       	movw	r30, r28
    1b90:	ed 5b       	subi	r30, 0xBD	; 189
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	60 81       	ld	r22, Z
    1b96:	71 81       	ldd	r23, Z+1	; 0x01
    1b98:	82 81       	ldd	r24, Z+2	; 0x02
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e2       	ldi	r20, 0x20	; 32
    1ba2:	51 e4       	ldi	r21, 0x41	; 65
    1ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	bc 01       	movw	r22, r24
    1bae:	cd 01       	movw	r24, r26
    1bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	9e af       	std	Y+62, r25	; 0x3e
    1bba:	8d af       	std	Y+61, r24	; 0x3d
    1bbc:	0f c0       	rjmp	.+30     	; 0x1bdc <LCD_displayCharacter+0x478>
    1bbe:	88 ec       	ldi	r24, 0xC8	; 200
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9c af       	std	Y+60, r25	; 0x3c
    1bc4:	8b af       	std	Y+59, r24	; 0x3b
    1bc6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bc8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <LCD_displayCharacter+0x466>
    1bce:	9c af       	std	Y+60, r25	; 0x3c
    1bd0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bd4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	9e af       	std	Y+62, r25	; 0x3e
    1bda:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bdc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bde:	9e ad       	ldd	r25, Y+62	; 0x3e
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	69 f7       	brne	.-38     	; 0x1bbe <LCD_displayCharacter+0x45a>
    1be4:	16 c0       	rjmp	.+44     	; 0x1c12 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be6:	fe 01       	movw	r30, r28
    1be8:	ff 96       	adiw	r30, 0x3f	; 63
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	9e af       	std	Y+62, r25	; 0x3e
    1bfc:	8d af       	std	Y+61, r24	; 0x3d
    1bfe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c00:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c02:	9a af       	std	Y+58, r25	; 0x3a
    1c04:	89 af       	std	Y+57, r24	; 0x39
    1c06:	89 ad       	ldd	r24, Y+57	; 0x39
    1c08:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <LCD_displayCharacter+0x4a6>
    1c0e:	9a af       	std	Y+58, r25	; 0x3a
    1c10:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	/*     disable enable        */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	62 e0       	ldi	r22, 0x02	; 2
    1c16:	40 e0       	ldi	r20, 0x00	; 0
    1c18:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	a0 e8       	ldi	r26, 0x80	; 128
    1c22:	bf e3       	ldi	r27, 0x3F	; 63
    1c24:	8d ab       	std	Y+53, r24	; 0x35
    1c26:	9e ab       	std	Y+54, r25	; 0x36
    1c28:	af ab       	std	Y+55, r26	; 0x37
    1c2a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c2e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c30:	8f a9       	ldd	r24, Y+55	; 0x37
    1c32:	98 ad       	ldd	r25, Y+56	; 0x38
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	4a ef       	ldi	r20, 0xFA	; 250
    1c3a:	54 e4       	ldi	r21, 0x44	; 68
    1c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	89 ab       	std	Y+49, r24	; 0x31
    1c46:	9a ab       	std	Y+50, r25	; 0x32
    1c48:	ab ab       	std	Y+51, r26	; 0x33
    1c4a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c50:	8b a9       	ldd	r24, Y+51	; 0x33
    1c52:	9c a9       	ldd	r25, Y+52	; 0x34
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e8       	ldi	r20, 0x80	; 128
    1c5a:	5f e3       	ldi	r21, 0x3F	; 63
    1c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c60:	88 23       	and	r24, r24
    1c62:	2c f4       	brge	.+10     	; 0x1c6e <LCD_displayCharacter+0x50a>
		__ticks = 1;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	98 ab       	std	Y+48, r25	; 0x30
    1c6a:	8f a7       	std	Y+47, r24	; 0x2f
    1c6c:	3f c0       	rjmp	.+126    	; 0x1cec <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    1c6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c70:	7a a9       	ldd	r23, Y+50	; 0x32
    1c72:	8b a9       	ldd	r24, Y+51	; 0x33
    1c74:	9c a9       	ldd	r25, Y+52	; 0x34
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	3f ef       	ldi	r19, 0xFF	; 255
    1c7a:	4f e7       	ldi	r20, 0x7F	; 127
    1c7c:	57 e4       	ldi	r21, 0x47	; 71
    1c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c82:	18 16       	cp	r1, r24
    1c84:	4c f5       	brge	.+82     	; 0x1cd8 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c86:	6d a9       	ldd	r22, Y+53	; 0x35
    1c88:	7e a9       	ldd	r23, Y+54	; 0x36
    1c8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e2       	ldi	r20, 0x20	; 32
    1c94:	51 e4       	ldi	r21, 0x41	; 65
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	cd 01       	movw	r24, r26
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	98 ab       	std	Y+48, r25	; 0x30
    1cac:	8f a7       	std	Y+47, r24	; 0x2f
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <LCD_displayCharacter+0x56a>
    1cb0:	88 ec       	ldi	r24, 0xC8	; 200
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9e a7       	std	Y+46, r25	; 0x2e
    1cb6:	8d a7       	std	Y+45, r24	; 0x2d
    1cb8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cba:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_displayCharacter+0x558>
    1cc0:	9e a7       	std	Y+46, r25	; 0x2e
    1cc2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cc6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	98 ab       	std	Y+48, r25	; 0x30
    1ccc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cce:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd0:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	69 f7       	brne	.-38     	; 0x1cb0 <LCD_displayCharacter+0x54c>
    1cd6:	14 c0       	rjmp	.+40     	; 0x1d00 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cda:	7a a9       	ldd	r23, Y+50	; 0x32
    1cdc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cde:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	98 ab       	std	Y+48, r25	; 0x30
    1cea:	8f a7       	std	Y+47, r24	; 0x2f
    1cec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cee:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf0:	9c a7       	std	Y+44, r25	; 0x2c
    1cf2:	8b a7       	std	Y+43, r24	; 0x2b
    1cf4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cf6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <LCD_displayCharacter+0x594>
    1cfc:	9c a7       	std	Y+44, r25	; 0x2c
    1cfe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/*  make enable equal one    */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	62 e0       	ldi	r22, 0x02	; 2
    1d04:	41 e0       	ldi	r20, 0x01	; 1
    1d06:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	a0 e8       	ldi	r26, 0x80	; 128
    1d10:	bf e3       	ldi	r27, 0x3F	; 63
    1d12:	8f a3       	std	Y+39, r24	; 0x27
    1d14:	98 a7       	std	Y+40, r25	; 0x28
    1d16:	a9 a7       	std	Y+41, r26	; 0x29
    1d18:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d1c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d1e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d20:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	4a ef       	ldi	r20, 0xFA	; 250
    1d28:	54 e4       	ldi	r21, 0x44	; 68
    1d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	8b a3       	std	Y+35, r24	; 0x23
    1d34:	9c a3       	std	Y+36, r25	; 0x24
    1d36:	ad a3       	std	Y+37, r26	; 0x25
    1d38:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d40:	9e a1       	ldd	r25, Y+38	; 0x26
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e8       	ldi	r20, 0x80	; 128
    1d48:	5f e3       	ldi	r21, 0x3F	; 63
    1d4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d4e:	88 23       	and	r24, r24
    1d50:	2c f4       	brge	.+10     	; 0x1d5c <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9a a3       	std	Y+34, r25	; 0x22
    1d58:	89 a3       	std	Y+33, r24	; 0x21
    1d5a:	3f c0       	rjmp	.+126    	; 0x1dda <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    1d5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d60:	8d a1       	ldd	r24, Y+37	; 0x25
    1d62:	9e a1       	ldd	r25, Y+38	; 0x26
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	3f ef       	ldi	r19, 0xFF	; 255
    1d68:	4f e7       	ldi	r20, 0x7F	; 127
    1d6a:	57 e4       	ldi	r21, 0x47	; 71
    1d6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d70:	18 16       	cp	r1, r24
    1d72:	4c f5       	brge	.+82     	; 0x1dc6 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d74:	6f a1       	ldd	r22, Y+39	; 0x27
    1d76:	78 a5       	ldd	r23, Y+40	; 0x28
    1d78:	89 a5       	ldd	r24, Y+41	; 0x29
    1d7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e2       	ldi	r20, 0x20	; 32
    1d82:	51 e4       	ldi	r21, 0x41	; 65
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	cd 01       	movw	r24, r26
    1d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	9a a3       	std	Y+34, r25	; 0x22
    1d9a:	89 a3       	std	Y+33, r24	; 0x21
    1d9c:	0f c0       	rjmp	.+30     	; 0x1dbc <LCD_displayCharacter+0x658>
    1d9e:	88 ec       	ldi	r24, 0xC8	; 200
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	98 a3       	std	Y+32, r25	; 0x20
    1da4:	8f 8f       	std	Y+31, r24	; 0x1f
    1da6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1da8:	98 a1       	ldd	r25, Y+32	; 0x20
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <LCD_displayCharacter+0x646>
    1dae:	98 a3       	std	Y+32, r25	; 0x20
    1db0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db2:	89 a1       	ldd	r24, Y+33	; 0x21
    1db4:	9a a1       	ldd	r25, Y+34	; 0x22
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	9a a3       	std	Y+34, r25	; 0x22
    1dba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbc:	89 a1       	ldd	r24, Y+33	; 0x21
    1dbe:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	69 f7       	brne	.-38     	; 0x1d9e <LCD_displayCharacter+0x63a>
    1dc4:	14 c0       	rjmp	.+40     	; 0x1dee <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1dc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dca:	8d a1       	ldd	r24, Y+37	; 0x25
    1dcc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	9a a3       	std	Y+34, r25	; 0x22
    1dd8:	89 a3       	std	Y+33, r24	; 0x21
    1dda:	89 a1       	ldd	r24, Y+33	; 0x21
    1ddc:	9a a1       	ldd	r25, Y+34	; 0x22
    1dde:	9e 8f       	std	Y+30, r25	; 0x1e
    1de0:	8d 8f       	std	Y+29, r24	; 0x1d
    1de2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1de4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <LCD_displayCharacter+0x682>
    1dea:	9e 8f       	std	Y+30, r25	; 0x1e
    1dec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(character,0));
    1dee:	fe 01       	movw	r30, r28
    1df0:	ed 59       	subi	r30, 0x9D	; 157
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	80 81       	ld	r24, Z
    1df6:	98 2f       	mov	r25, r24
    1df8:	91 70       	andi	r25, 0x01	; 1
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	63 e0       	ldi	r22, 0x03	; 3
    1dfe:	49 2f       	mov	r20, r25
    1e00:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(character,1));
    1e04:	fe 01       	movw	r30, r28
    1e06:	ed 59       	subi	r30, 0x9D	; 157
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	80 81       	ld	r24, Z
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	82 70       	andi	r24, 0x02	; 2
    1e12:	90 70       	andi	r25, 0x00	; 0
    1e14:	95 95       	asr	r25
    1e16:	87 95       	ror	r24
    1e18:	98 2f       	mov	r25, r24
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	64 e0       	ldi	r22, 0x04	; 4
    1e1e:	49 2f       	mov	r20, r25
    1e20:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(character,2));
    1e24:	fe 01       	movw	r30, r28
    1e26:	ed 59       	subi	r30, 0x9D	; 157
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	80 81       	ld	r24, Z
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	84 70       	andi	r24, 0x04	; 4
    1e32:	90 70       	andi	r25, 0x00	; 0
    1e34:	95 95       	asr	r25
    1e36:	87 95       	ror	r24
    1e38:	95 95       	asr	r25
    1e3a:	87 95       	ror	r24
    1e3c:	98 2f       	mov	r25, r24
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	65 e0       	ldi	r22, 0x05	; 5
    1e42:	49 2f       	mov	r20, r25
    1e44:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(character,3));
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ed 59       	subi	r30, 0x9D	; 157
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	88 70       	andi	r24, 0x08	; 8
    1e56:	90 70       	andi	r25, 0x00	; 0
    1e58:	95 95       	asr	r25
    1e5a:	87 95       	ror	r24
    1e5c:	95 95       	asr	r25
    1e5e:	87 95       	ror	r24
    1e60:	95 95       	asr	r25
    1e62:	87 95       	ror	r24
    1e64:	98 2f       	mov	r25, r24
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	66 e0       	ldi	r22, 0x06	; 6
    1e6a:	49 2f       	mov	r20, r25
    1e6c:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a0 e8       	ldi	r26, 0x80	; 128
    1e76:	bf e3       	ldi	r27, 0x3F	; 63
    1e78:	89 8f       	std	Y+25, r24	; 0x19
    1e7a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e7c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e80:	69 8d       	ldd	r22, Y+25	; 0x19
    1e82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	4a ef       	ldi	r20, 0xFA	; 250
    1e8e:	54 e4       	ldi	r21, 0x44	; 68
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	8d 8b       	std	Y+21, r24	; 0x15
    1e9a:	9e 8b       	std	Y+22, r25	; 0x16
    1e9c:	af 8b       	std	Y+23, r26	; 0x17
    1e9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e8       	ldi	r20, 0x80	; 128
    1eae:	5f e3       	ldi	r21, 0x3F	; 63
    1eb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb4:	88 23       	and	r24, r24
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	9c 8b       	std	Y+20, r25	; 0x14
    1ebe:	8b 8b       	std	Y+19, r24	; 0x13
    1ec0:	3f c0       	rjmp	.+126    	; 0x1f40 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    1ec2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	3f ef       	ldi	r19, 0xFF	; 255
    1ece:	4f e7       	ldi	r20, 0x7F	; 127
    1ed0:	57 e4       	ldi	r21, 0x47	; 71
    1ed2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed6:	18 16       	cp	r1, r24
    1ed8:	4c f5       	brge	.+82     	; 0x1f2c <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eda:	69 8d       	ldd	r22, Y+25	; 0x19
    1edc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ede:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e2       	ldi	r20, 0x20	; 32
    1ee8:	51 e4       	ldi	r21, 0x41	; 65
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	9c 8b       	std	Y+20, r25	; 0x14
    1f00:	8b 8b       	std	Y+19, r24	; 0x13
    1f02:	0f c0       	rjmp	.+30     	; 0x1f22 <LCD_displayCharacter+0x7be>
    1f04:	88 ec       	ldi	r24, 0xC8	; 200
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9a 8b       	std	Y+18, r25	; 0x12
    1f0a:	89 8b       	std	Y+17, r24	; 0x11
    1f0c:	89 89       	ldd	r24, Y+17	; 0x11
    1f0e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <LCD_displayCharacter+0x7ac>
    1f14:	9a 8b       	std	Y+18, r25	; 0x12
    1f16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f18:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	9c 8b       	std	Y+20, r25	; 0x14
    1f20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f22:	8b 89       	ldd	r24, Y+19	; 0x13
    1f24:	9c 89       	ldd	r25, Y+20	; 0x14
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	69 f7       	brne	.-38     	; 0x1f04 <LCD_displayCharacter+0x7a0>
    1f2a:	14 c0       	rjmp	.+40     	; 0x1f54 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f30:	8f 89       	ldd	r24, Y+23	; 0x17
    1f32:	98 8d       	ldd	r25, Y+24	; 0x18
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	9c 8b       	std	Y+20, r25	; 0x14
    1f3e:	8b 8b       	std	Y+19, r24	; 0x13
    1f40:	8b 89       	ldd	r24, Y+19	; 0x13
    1f42:	9c 89       	ldd	r25, Y+20	; 0x14
    1f44:	98 8b       	std	Y+16, r25	; 0x10
    1f46:	8f 87       	std	Y+15, r24	; 0x0f
    1f48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f4a:	98 89       	ldd	r25, Y+16	; 0x10
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_displayCharacter+0x7e8>
    1f50:	98 8b       	std	Y+16, r25	; 0x10
    1f52:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	/*     disable enable        */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	62 e0       	ldi	r22, 0x02	; 2
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	0e 94 59 13 	call	0x26b2	; 0x26b2 <GPIO_writePin>
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	a0 e8       	ldi	r26, 0x80	; 128
    1f64:	bf e3       	ldi	r27, 0x3F	; 63
    1f66:	8b 87       	std	Y+11, r24	; 0x0b
    1f68:	9c 87       	std	Y+12, r25	; 0x0c
    1f6a:	ad 87       	std	Y+13, r26	; 0x0d
    1f6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	4a ef       	ldi	r20, 0xFA	; 250
    1f7c:	54 e4       	ldi	r21, 0x44	; 68
    1f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	8f 83       	std	Y+7, r24	; 0x07
    1f88:	98 87       	std	Y+8, r25	; 0x08
    1f8a:	a9 87       	std	Y+9, r26	; 0x09
    1f8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f90:	78 85       	ldd	r23, Y+8	; 0x08
    1f92:	89 85       	ldd	r24, Y+9	; 0x09
    1f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e8       	ldi	r20, 0x80	; 128
    1f9c:	5f e3       	ldi	r21, 0x3F	; 63
    1f9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa2:	88 23       	and	r24, r24
    1fa4:	2c f4       	brge	.+10     	; 0x1fb0 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	3f c0       	rjmp	.+126    	; 0x202e <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    1fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb2:	78 85       	ldd	r23, Y+8	; 0x08
    1fb4:	89 85       	ldd	r24, Y+9	; 0x09
    1fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	3f ef       	ldi	r19, 0xFF	; 255
    1fbc:	4f e7       	ldi	r20, 0x7F	; 127
    1fbe:	57 e4       	ldi	r21, 0x47	; 71
    1fc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc4:	18 16       	cp	r1, r24
    1fc6:	4c f5       	brge	.+82     	; 0x201a <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e2       	ldi	r20, 0x20	; 32
    1fd6:	51 e4       	ldi	r21, 0x41	; 65
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
    1ff0:	0f c0       	rjmp	.+30     	; 0x2010 <LCD_displayCharacter+0x8ac>
    1ff2:	88 ec       	ldi	r24, 0xC8	; 200
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9c 83       	std	Y+4, r25	; 0x04
    1ff8:	8b 83       	std	Y+3, r24	; 0x03
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <LCD_displayCharacter+0x89a>
    2002:	9c 83       	std	Y+4, r25	; 0x04
    2004:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2006:	8d 81       	ldd	r24, Y+5	; 0x05
    2008:	9e 81       	ldd	r25, Y+6	; 0x06
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	9e 83       	std	Y+6, r25	; 0x06
    200e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2010:	8d 81       	ldd	r24, Y+5	; 0x05
    2012:	9e 81       	ldd	r25, Y+6	; 0x06
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	69 f7       	brne	.-38     	; 0x1ff2 <LCD_displayCharacter+0x88e>
    2018:	14 c0       	rjmp	.+40     	; 0x2042 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	9e 83       	std	Y+6, r25	; 0x06
    202c:	8d 83       	std	Y+5, r24	; 0x05
    202e:	8d 81       	ldd	r24, Y+5	; 0x05
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	9a 83       	std	Y+2, r25	; 0x02
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	9a 81       	ldd	r25, Y+2	; 0x02
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <LCD_displayCharacter+0x8d6>
    203e:	9a 83       	std	Y+2, r25	; 0x02
    2040:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif


}
    2042:	cd 59       	subi	r28, 0x9D	; 157
    2044:	df 4f       	sbci	r29, 0xFF	; 255
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	08 95       	ret

0000205a <LCD_displayString>:

void LCD_displayString(const char*Str){
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	00 d0       	rcall	.+0      	; 0x2060 <LCD_displayString+0x6>
    2060:	0f 92       	push	r0
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	9b 83       	std	Y+3, r25	; 0x03
    2068:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    206a:	19 82       	std	Y+1, r1	; 0x01
    206c:	0e c0       	rjmp	.+28     	; 0x208a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	9b 81       	ldd	r25, Y+3	; 0x03
    2078:	fc 01       	movw	r30, r24
    207a:	e2 0f       	add	r30, r18
    207c:	f3 1f       	adc	r31, r19
    207e:	80 81       	ld	r24, Z
    2080:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayCharacter>
		i++;
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	8f 5f       	subi	r24, 0xFF	; 255
    2088:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_displayString(const char*Str){
	uint8 i = 0;
	while(Str[i] != '\0')
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	9b 81       	ldd	r25, Y+3	; 0x03
    2094:	fc 01       	movw	r30, r24
    2096:	e2 0f       	add	r30, r18
    2098:	f3 1f       	adc	r31, r19
    209a:	80 81       	ld	r24, Z
    209c:	88 23       	and	r24, r24
    209e:	39 f7       	brne	.-50     	; 0x206e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <LCD_init>:

void LCD_init(){
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	2e 97       	sbiw	r28, 0x0e	; 14
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
	/* make Rs pin and Enable pin output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	61 e0       	ldi	r22, 0x01	; 1
    20c4:	41 e0       	ldi	r20, 0x01	; 1
    20c6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	62 e0       	ldi	r22, 0x02	; 2
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a0 ea       	ldi	r26, 0xA0	; 160
    20da:	b1 e4       	ldi	r27, 0x41	; 65
    20dc:	8b 87       	std	Y+11, r24	; 0x0b
    20de:	9c 87       	std	Y+12, r25	; 0x0c
    20e0:	ad 87       	std	Y+13, r26	; 0x0d
    20e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a ef       	ldi	r20, 0xFA	; 250
    20f2:	54 e4       	ldi	r21, 0x44	; 68
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	8f 83       	std	Y+7, r24	; 0x07
    20fe:	98 87       	std	Y+8, r25	; 0x08
    2100:	a9 87       	std	Y+9, r26	; 0x09
    2102:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2104:	6f 81       	ldd	r22, Y+7	; 0x07
    2106:	78 85       	ldd	r23, Y+8	; 0x08
    2108:	89 85       	ldd	r24, Y+9	; 0x09
    210a:	9a 85       	ldd	r25, Y+10	; 0x0a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e8       	ldi	r20, 0x80	; 128
    2112:	5f e3       	ldi	r21, 0x3F	; 63
    2114:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2118:	88 23       	and	r24, r24
    211a:	2c f4       	brge	.+10     	; 0x2126 <LCD_init+0x7a>
		__ticks = 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
    2124:	3f c0       	rjmp	.+126    	; 0x21a4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2126:	6f 81       	ldd	r22, Y+7	; 0x07
    2128:	78 85       	ldd	r23, Y+8	; 0x08
    212a:	89 85       	ldd	r24, Y+9	; 0x09
    212c:	9a 85       	ldd	r25, Y+10	; 0x0a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	3f ef       	ldi	r19, 0xFF	; 255
    2132:	4f e7       	ldi	r20, 0x7F	; 127
    2134:	57 e4       	ldi	r21, 0x47	; 71
    2136:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    213a:	18 16       	cp	r1, r24
    213c:	4c f5       	brge	.+82     	; 0x2190 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2140:	7c 85       	ldd	r23, Y+12	; 0x0c
    2142:	8d 85       	ldd	r24, Y+13	; 0x0d
    2144:	9e 85       	ldd	r25, Y+14	; 0x0e
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e2       	ldi	r20, 0x20	; 32
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9e 83       	std	Y+6, r25	; 0x06
    2164:	8d 83       	std	Y+5, r24	; 0x05
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <LCD_init+0xda>
    2168:	88 ec       	ldi	r24, 0xC8	; 200
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	8b 83       	std	Y+3, r24	; 0x03
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <LCD_init+0xc8>
    2178:	9c 83       	std	Y+4, r25	; 0x04
    217a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	8d 81       	ldd	r24, Y+5	; 0x05
    2188:	9e 81       	ldd	r25, Y+6	; 0x06
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	69 f7       	brne	.-38     	; 0x2168 <LCD_init+0xbc>
    218e:	14 c0       	rjmp	.+40     	; 0x21b8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	6f 81       	ldd	r22, Y+7	; 0x07
    2192:	78 85       	ldd	r23, Y+8	; 0x08
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	9a 85       	ldd	r25, Y+10	; 0x0a
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	8d 83       	std	Y+5, r24	; 0x05
    21a4:	8d 81       	ldd	r24, Y+5	; 0x05
    21a6:	9e 81       	ldd	r25, Y+6	; 0x06
    21a8:	9a 83       	std	Y+2, r25	; 0x02
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	9a 81       	ldd	r25, Y+2	; 0x02
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_init+0x104>
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
	/*2 lines + 8 bits mode */
	LCD_SendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif(LCD_DATA_BITS_MODE==4)

	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	63 e0       	ldi	r22, 0x03	; 3
    21bc:	41 e0       	ldi	r20, 0x01	; 1
    21be:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	64 e0       	ldi	r22, 0x04	; 4
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	65 e0       	ldi	r22, 0x05	; 5
    21d0:	41 e0       	ldi	r20, 0x01	; 1
    21d2:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	66 e0       	ldi	r22, 0x06	; 6
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 6e 12 	call	0x24dc	; 0x24dc <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    21e0:	83 e3       	ldi	r24, 0x33	; 51
    21e2:	0e 94 37 07 	call	0xe6e	; 0xe6e <LCD_SendCommand>
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    21e6:	82 e3       	ldi	r24, 0x32	; 50
    21e8:	0e 94 37 07 	call	0xe6e	; 0xe6e <LCD_SendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    21ec:	88 e2       	ldi	r24, 0x28	; 40
    21ee:	0e 94 37 07 	call	0xe6e	; 0xe6e <LCD_SendCommand>
#endif

	/* cursor off */
	LCD_SendCommand(LCD_CURSOR_OFF);
    21f2:	8c e0       	ldi	r24, 0x0C	; 12
    21f4:	0e 94 37 07 	call	0xe6e	; 0xe6e <LCD_SendCommand>
	/* clear screen */
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	0e 94 37 07 	call	0xe6e	; 0xe6e <LCD_SendCommand>
}
    21fe:	2e 96       	adiw	r28, 0x0e	; 14
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col){
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	00 d0       	rcall	.+0      	; 0x2216 <LCD_moveCursor+0x6>
    2216:	00 d0       	rcall	.+0      	; 0x2218 <LCD_moveCursor+0x8>
    2218:	0f 92       	push	r0
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	8a 83       	std	Y+2, r24	; 0x02
    2220:	6b 83       	std	Y+3, r22	; 0x03
	uint8 cursor_location;
	switch(row){
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	3d 83       	std	Y+5, r19	; 0x05
    222a:	2c 83       	std	Y+4, r18	; 0x04
    222c:	8c 81       	ldd	r24, Y+4	; 0x04
    222e:	9d 81       	ldd	r25, Y+5	; 0x05
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	91 05       	cpc	r25, r1
    2234:	c1 f0       	breq	.+48     	; 0x2266 <LCD_moveCursor+0x56>
    2236:	2c 81       	ldd	r18, Y+4	; 0x04
    2238:	3d 81       	ldd	r19, Y+5	; 0x05
    223a:	22 30       	cpi	r18, 0x02	; 2
    223c:	31 05       	cpc	r19, r1
    223e:	2c f4       	brge	.+10     	; 0x224a <LCD_moveCursor+0x3a>
    2240:	8c 81       	ldd	r24, Y+4	; 0x04
    2242:	9d 81       	ldd	r25, Y+5	; 0x05
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	61 f0       	breq	.+24     	; 0x2260 <LCD_moveCursor+0x50>
    2248:	19 c0       	rjmp	.+50     	; 0x227c <LCD_moveCursor+0x6c>
    224a:	2c 81       	ldd	r18, Y+4	; 0x04
    224c:	3d 81       	ldd	r19, Y+5	; 0x05
    224e:	22 30       	cpi	r18, 0x02	; 2
    2250:	31 05       	cpc	r19, r1
    2252:	69 f0       	breq	.+26     	; 0x226e <LCD_moveCursor+0x5e>
    2254:	8c 81       	ldd	r24, Y+4	; 0x04
    2256:	9d 81       	ldd	r25, Y+5	; 0x05
    2258:	83 30       	cpi	r24, 0x03	; 3
    225a:	91 05       	cpc	r25, r1
    225c:	61 f0       	breq	.+24     	; 0x2276 <LCD_moveCursor+0x66>
    225e:	0e c0       	rjmp	.+28     	; 0x227c <LCD_moveCursor+0x6c>
	case 0:
		cursor_location=col;
    2260:	8b 81       	ldd	r24, Y+3	; 0x03
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	0b c0       	rjmp	.+22     	; 0x227c <LCD_moveCursor+0x6c>
		break;
	case 1:
		cursor_location=0x40+col;
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	80 5c       	subi	r24, 0xC0	; 192
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	07 c0       	rjmp	.+14     	; 0x227c <LCD_moveCursor+0x6c>
		break;
	case 2:
		cursor_location=0x10+col;
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	80 5f       	subi	r24, 0xF0	; 240
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	03 c0       	rjmp	.+6      	; 0x227c <LCD_moveCursor+0x6c>
		break;
	case 3:
		cursor_location=0x50+col;
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	80 5b       	subi	r24, 0xB0	; 176
    227a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_SendCommand(cursor_location | LCD_SET_CURSOR_LOCATION);
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	80 68       	ori	r24, 0x80	; 128
    2280:	0e 94 37 07 	call	0xe6e	; 0xe6e <LCD_SendCommand>
}
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	00 d0       	rcall	.+0      	; 0x229a <LCD_displayStringRowColumn+0x6>
    229a:	00 d0       	rcall	.+0      	; 0x229c <LCD_displayStringRowColumn+0x8>
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	6a 83       	std	Y+2, r22	; 0x02
    22a4:	5c 83       	std	Y+4, r21	; 0x04
    22a6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	6a 81       	ldd	r22, Y+2	; 0x02
    22ac:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_moveCursor>
	LCD_displayString(Str);
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_displayString>
}
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <LCD_intgerToString>:

void LCD_intgerToString(int data){
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	62 97       	sbiw	r28, 0x12	; 18
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	9a 8b       	std	Y+18, r25	; 0x12
    22dc:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(data,buffer,10);
    22de:	89 89       	ldd	r24, Y+17	; 0x11
    22e0:	9a 89       	ldd	r25, Y+18	; 0x12
    22e2:	9e 01       	movw	r18, r28
    22e4:	2f 5f       	subi	r18, 0xFF	; 255
    22e6:	3f 4f       	sbci	r19, 0xFF	; 255
    22e8:	b9 01       	movw	r22, r18
    22ea:	4a e0       	ldi	r20, 0x0A	; 10
    22ec:	50 e0       	ldi	r21, 0x00	; 0
    22ee:	0e 94 67 21 	call	0x42ce	; 0x42ce <itoa>
	LCD_displayString(buffer);
    22f2:	ce 01       	movw	r24, r28
    22f4:	01 96       	adiw	r24, 0x01	; 1
    22f6:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_displayString>
}
    22fa:	62 96       	adiw	r28, 0x12	; 18
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	cd bf       	out	0x3d, r28	; 61
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <LCD_clearScreen>:
void LCD_clearScreen(void){
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_CLEAR_COMMAND );
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	0e 94 37 07 	call	0xe6e	; 0xe6e <LCD_SendCommand>
}
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	08 95       	ret

00002320 <__vector_7>:


static volatile void (*g_callBackPtr)(void) = NULL_PTR;

#ifdef  Compare_unit_A
ISR(TIMER1_COMPA_vect){
    2320:	1f 92       	push	r1
    2322:	0f 92       	push	r0
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	0f 92       	push	r0
    2328:	11 24       	eor	r1, r1
    232a:	2f 93       	push	r18
    232c:	3f 93       	push	r19
    232e:	4f 93       	push	r20
    2330:	5f 93       	push	r21
    2332:	6f 93       	push	r22
    2334:	7f 93       	push	r23
    2336:	8f 93       	push	r24
    2338:	9f 93       	push	r25
    233a:	af 93       	push	r26
    233c:	bf 93       	push	r27
    233e:	ef 93       	push	r30
    2340:	ff 93       	push	r31
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    234a:	80 91 1a 01 	lds	r24, 0x011A
    234e:	90 91 1b 01 	lds	r25, 0x011B
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	29 f0       	breq	.+10     	; 0x2360 <__vector_7+0x40>
	{
		/* Call the Call Back function */
		(*g_callBackPtr)();
    2356:	e0 91 1a 01 	lds	r30, 0x011A
    235a:	f0 91 1b 01 	lds	r31, 0x011B
    235e:	09 95       	icall
	}
}
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	ff 91       	pop	r31
    2366:	ef 91       	pop	r30
    2368:	bf 91       	pop	r27
    236a:	af 91       	pop	r26
    236c:	9f 91       	pop	r25
    236e:	8f 91       	pop	r24
    2370:	7f 91       	pop	r23
    2372:	6f 91       	pop	r22
    2374:	5f 91       	pop	r21
    2376:	4f 91       	pop	r20
    2378:	3f 91       	pop	r19
    237a:	2f 91       	pop	r18
    237c:	0f 90       	pop	r0
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	0f 90       	pop	r0
    2382:	1f 90       	pop	r1
    2384:	18 95       	reti

00002386 <__vector_9>:
		(*g_callBackPtr)();
	}
}
#endif

ISR(TIMER1_OVF_vect){
    2386:	1f 92       	push	r1
    2388:	0f 92       	push	r0
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	0f 92       	push	r0
    238e:	11 24       	eor	r1, r1
    2390:	2f 93       	push	r18
    2392:	3f 93       	push	r19
    2394:	4f 93       	push	r20
    2396:	5f 93       	push	r21
    2398:	6f 93       	push	r22
    239a:	7f 93       	push	r23
    239c:	8f 93       	push	r24
    239e:	9f 93       	push	r25
    23a0:	af 93       	push	r26
    23a2:	bf 93       	push	r27
    23a4:	ef 93       	push	r30
    23a6:	ff 93       	push	r31
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    23b0:	80 91 1a 01 	lds	r24, 0x011A
    23b4:	90 91 1b 01 	lds	r25, 0x011B
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	29 f0       	breq	.+10     	; 0x23c6 <__vector_9+0x40>
	{
		/* Call the Call Back function */
		(*g_callBackPtr)();
    23bc:	e0 91 1a 01 	lds	r30, 0x011A
    23c0:	f0 91 1b 01 	lds	r31, 0x011B
    23c4:	09 95       	icall
	}
}
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	ff 91       	pop	r31
    23cc:	ef 91       	pop	r30
    23ce:	bf 91       	pop	r27
    23d0:	af 91       	pop	r26
    23d2:	9f 91       	pop	r25
    23d4:	8f 91       	pop	r24
    23d6:	7f 91       	pop	r23
    23d8:	6f 91       	pop	r22
    23da:	5f 91       	pop	r21
    23dc:	4f 91       	pop	r20
    23de:	3f 91       	pop	r19
    23e0:	2f 91       	pop	r18
    23e2:	0f 90       	pop	r0
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	0f 90       	pop	r0
    23e8:	1f 90       	pop	r1
    23ea:	18 95       	reti

000023ec <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <Timer1_init+0x6>
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	9a 83       	std	Y+2, r25	; 0x02
    23f8:	89 83       	std	Y+1, r24	; 0x01


	/* set initial value for the timer */
	TCNT1H=Config_Ptr->initial_value>>8;
    23fa:	ad e4       	ldi	r26, 0x4D	; 77
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2400:	fa 81       	ldd	r31, Y+2	; 0x02
    2402:	80 81       	ld	r24, Z
    2404:	91 81       	ldd	r25, Z+1	; 0x01
    2406:	89 2f       	mov	r24, r25
    2408:	99 27       	eor	r25, r25
    240a:	8c 93       	st	X, r24
	TCNT1L=Config_Ptr->initial_value&0x0f;
    240c:	ac e4       	ldi	r26, 0x4C	; 76
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e9 81       	ldd	r30, Y+1	; 0x01
    2412:	fa 81       	ldd	r31, Y+2	; 0x02
    2414:	80 81       	ld	r24, Z
    2416:	91 81       	ldd	r25, Z+1	; 0x01
    2418:	8f 70       	andi	r24, 0x0F	; 15
    241a:	8c 93       	st	X, r24

	/* Set Prescalar for the timer*/
	TCCR1B=(Config_Ptr->prescaler);
    241c:	ae e4       	ldi	r26, 0x4E	; 78
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	e9 81       	ldd	r30, Y+1	; 0x01
    2422:	fa 81       	ldd	r31, Y+2	; 0x02
    2424:	84 81       	ldd	r24, Z+4	; 0x04
    2426:	8c 93       	st	X, r24



	if(Config_Ptr->mode==CTC){
    2428:	e9 81       	ldd	r30, Y+1	; 0x01
    242a:	fa 81       	ldd	r31, Y+2	; 0x02
    242c:	85 81       	ldd	r24, Z+5	; 0x05
    242e:	84 30       	cpi	r24, 0x04	; 4
    2430:	c9 f4       	brne	.+50     	; 0x2464 <Timer1_init+0x78>
		/* Choose the compare mode */
		TCCR1B|=(1<<WGM12);
    2432:	ae e4       	ldi	r26, 0x4E	; 78
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	ee e4       	ldi	r30, 0x4E	; 78
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	88 60       	ori	r24, 0x08	; 8
    243e:	8c 93       	st	X, r24
		/* Set Compare Value */
		OCR1A=Config_Ptr->compare_value;
    2440:	aa e4       	ldi	r26, 0x4A	; 74
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e9 81       	ldd	r30, Y+1	; 0x01
    2446:	fa 81       	ldd	r31, Y+2	; 0x02
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	11 96       	adiw	r26, 0x01	; 1
    244e:	9c 93       	st	X, r25
    2450:	8e 93       	st	-X, r24

#ifdef  Compare_unit_A
		/*Toggle OC1A on compare match*/
		TCCR1A=(1<<COM1A0);
    2452:	ef e4       	ldi	r30, 0x4F	; 79
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 e4       	ldi	r24, 0x40	; 64
    2458:	80 83       	st	Z, r24
		/* Enable Interrupt Output Compare A Match */
		TIMSK=(1<<OCIE1A);
    245a:	e9 e5       	ldi	r30, 0x59	; 89
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 e1       	ldi	r24, 0x10	; 16
    2460:	80 83       	st	Z, r24
    2462:	09 c0       	rjmp	.+18     	; 0x2476 <Timer1_init+0x8a>
		TCCR1A=(1<<COM1B0);
		/* Enable Interrupt Output Compare B Match */
		TIMSK=(1<<OCIE1B);
#endif

	}else if(Config_Ptr->mode==NORMAL){
    2464:	e9 81       	ldd	r30, Y+1	; 0x01
    2466:	fa 81       	ldd	r31, Y+2	; 0x02
    2468:	85 81       	ldd	r24, Z+5	; 0x05
    246a:	88 23       	and	r24, r24
    246c:	21 f4       	brne	.+8      	; 0x2476 <Timer1_init+0x8a>
		/* Enable Interrupt OverFlow */
		TIMSK=(1<<TOIE1);
    246e:	e9 e5       	ldi	r30, 0x59	; 89
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	84 e0       	ldi	r24, 0x04	; 4
    2474:	80 83       	st	Z, r24
	}

}
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	00 d0       	rcall	.+0      	; 0x2486 <Timer1_setCallBack+0x6>
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	9a 81       	ldd	r25, Y+2	; 0x02
    2492:	90 93 1b 01 	sts	0x011B, r25
    2496:	80 93 1a 01 	sts	0x011A, r24
}
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <Timer1_deInit>:

void Timer1_deInit(void){
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
	TIMSK=0;
    24ac:	e9 e5       	ldi	r30, 0x59	; 89
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	10 82       	st	Z, r1
	OCR1B=0;
    24b2:	e8 e4       	ldi	r30, 0x48	; 72
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	11 82       	std	Z+1, r1	; 0x01
    24b8:	10 82       	st	Z, r1
	OCR1A=0;
    24ba:	ea e4       	ldi	r30, 0x4A	; 74
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	11 82       	std	Z+1, r1	; 0x01
    24c0:	10 82       	st	Z, r1
	TCCR1B=0;
    24c2:	ee e4       	ldi	r30, 0x4E	; 78
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	10 82       	st	Z, r1
	TCCR1B=0;
    24c8:	ee e4       	ldi	r30, 0x4E	; 78
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	10 82       	st	Z, r1
	TCNT1=0;
    24ce:	ec e4       	ldi	r30, 0x4C	; 76
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	11 82       	std	Z+1, r1	; 0x01
    24d4:	10 82       	st	Z, r1
}
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <GPIO_setupPinDirection+0x6>
    24e2:	00 d0       	rcall	.+0      	; 0x24e4 <GPIO_setupPinDirection+0x8>
    24e4:	0f 92       	push	r0
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	6a 83       	std	Y+2, r22	; 0x02
    24ee:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	88 30       	cpi	r24, 0x08	; 8
    24f4:	08 f0       	brcs	.+2      	; 0x24f8 <GPIO_setupPinDirection+0x1c>
    24f6:	d5 c0       	rjmp	.+426    	; 0x26a2 <GPIO_setupPinDirection+0x1c6>
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	84 30       	cpi	r24, 0x04	; 4
    24fc:	08 f0       	brcs	.+2      	; 0x2500 <GPIO_setupPinDirection+0x24>
    24fe:	d1 c0       	rjmp	.+418    	; 0x26a2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	28 2f       	mov	r18, r24
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	3d 83       	std	Y+5, r19	; 0x05
    2508:	2c 83       	std	Y+4, r18	; 0x04
    250a:	8c 81       	ldd	r24, Y+4	; 0x04
    250c:	9d 81       	ldd	r25, Y+5	; 0x05
    250e:	81 30       	cpi	r24, 0x01	; 1
    2510:	91 05       	cpc	r25, r1
    2512:	09 f4       	brne	.+2      	; 0x2516 <GPIO_setupPinDirection+0x3a>
    2514:	43 c0       	rjmp	.+134    	; 0x259c <GPIO_setupPinDirection+0xc0>
    2516:	2c 81       	ldd	r18, Y+4	; 0x04
    2518:	3d 81       	ldd	r19, Y+5	; 0x05
    251a:	22 30       	cpi	r18, 0x02	; 2
    251c:	31 05       	cpc	r19, r1
    251e:	2c f4       	brge	.+10     	; 0x252a <GPIO_setupPinDirection+0x4e>
    2520:	8c 81       	ldd	r24, Y+4	; 0x04
    2522:	9d 81       	ldd	r25, Y+5	; 0x05
    2524:	00 97       	sbiw	r24, 0x00	; 0
    2526:	71 f0       	breq	.+28     	; 0x2544 <GPIO_setupPinDirection+0x68>
    2528:	bc c0       	rjmp	.+376    	; 0x26a2 <GPIO_setupPinDirection+0x1c6>
    252a:	2c 81       	ldd	r18, Y+4	; 0x04
    252c:	3d 81       	ldd	r19, Y+5	; 0x05
    252e:	22 30       	cpi	r18, 0x02	; 2
    2530:	31 05       	cpc	r19, r1
    2532:	09 f4       	brne	.+2      	; 0x2536 <GPIO_setupPinDirection+0x5a>
    2534:	5f c0       	rjmp	.+190    	; 0x25f4 <GPIO_setupPinDirection+0x118>
    2536:	8c 81       	ldd	r24, Y+4	; 0x04
    2538:	9d 81       	ldd	r25, Y+5	; 0x05
    253a:	83 30       	cpi	r24, 0x03	; 3
    253c:	91 05       	cpc	r25, r1
    253e:	09 f4       	brne	.+2      	; 0x2542 <GPIO_setupPinDirection+0x66>
    2540:	85 c0       	rjmp	.+266    	; 0x264c <GPIO_setupPinDirection+0x170>
    2542:	af c0       	rjmp	.+350    	; 0x26a2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	81 30       	cpi	r24, 0x01	; 1
    2548:	a1 f4       	brne	.+40     	; 0x2572 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    254a:	aa e3       	ldi	r26, 0x3A	; 58
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	ea e3       	ldi	r30, 0x3A	; 58
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	48 2f       	mov	r20, r24
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	02 2e       	mov	r0, r18
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <GPIO_setupPinDirection+0x8c>
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	0a 94       	dec	r0
    256a:	e2 f7       	brpl	.-8      	; 0x2564 <GPIO_setupPinDirection+0x88>
    256c:	84 2b       	or	r24, r20
    256e:	8c 93       	st	X, r24
    2570:	98 c0       	rjmp	.+304    	; 0x26a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2572:	aa e3       	ldi	r26, 0x3A	; 58
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	ea e3       	ldi	r30, 0x3A	; 58
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	48 2f       	mov	r20, r24
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	02 2e       	mov	r0, r18
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <GPIO_setupPinDirection+0xb4>
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	0a 94       	dec	r0
    2592:	e2 f7       	brpl	.-8      	; 0x258c <GPIO_setupPinDirection+0xb0>
    2594:	80 95       	com	r24
    2596:	84 23       	and	r24, r20
    2598:	8c 93       	st	X, r24
    259a:	83 c0       	rjmp	.+262    	; 0x26a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	81 30       	cpi	r24, 0x01	; 1
    25a0:	a1 f4       	brne	.+40     	; 0x25ca <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    25a2:	a7 e3       	ldi	r26, 0x37	; 55
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e7 e3       	ldi	r30, 0x37	; 55
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	48 2f       	mov	r20, r24
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	02 2e       	mov	r0, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <GPIO_setupPinDirection+0xe4>
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	0a 94       	dec	r0
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <GPIO_setupPinDirection+0xe0>
    25c4:	84 2b       	or	r24, r20
    25c6:	8c 93       	st	X, r24
    25c8:	6c c0       	rjmp	.+216    	; 0x26a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    25ca:	a7 e3       	ldi	r26, 0x37	; 55
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	e7 e3       	ldi	r30, 0x37	; 55
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	48 2f       	mov	r20, r24
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	02 2e       	mov	r0, r18
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <GPIO_setupPinDirection+0x10c>
    25e4:	88 0f       	add	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	0a 94       	dec	r0
    25ea:	e2 f7       	brpl	.-8      	; 0x25e4 <GPIO_setupPinDirection+0x108>
    25ec:	80 95       	com	r24
    25ee:	84 23       	and	r24, r20
    25f0:	8c 93       	st	X, r24
    25f2:	57 c0       	rjmp	.+174    	; 0x26a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	81 30       	cpi	r24, 0x01	; 1
    25f8:	a1 f4       	brne	.+40     	; 0x2622 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    25fa:	a4 e3       	ldi	r26, 0x34	; 52
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e4 e3       	ldi	r30, 0x34	; 52
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	48 2f       	mov	r20, r24
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	02 2e       	mov	r0, r18
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <GPIO_setupPinDirection+0x13c>
    2614:	88 0f       	add	r24, r24
    2616:	99 1f       	adc	r25, r25
    2618:	0a 94       	dec	r0
    261a:	e2 f7       	brpl	.-8      	; 0x2614 <GPIO_setupPinDirection+0x138>
    261c:	84 2b       	or	r24, r20
    261e:	8c 93       	st	X, r24
    2620:	40 c0       	rjmp	.+128    	; 0x26a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2622:	a4 e3       	ldi	r26, 0x34	; 52
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	e4 e3       	ldi	r30, 0x34	; 52
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	48 2f       	mov	r20, r24
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	28 2f       	mov	r18, r24
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	02 2e       	mov	r0, r18
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <GPIO_setupPinDirection+0x164>
    263c:	88 0f       	add	r24, r24
    263e:	99 1f       	adc	r25, r25
    2640:	0a 94       	dec	r0
    2642:	e2 f7       	brpl	.-8      	; 0x263c <GPIO_setupPinDirection+0x160>
    2644:	80 95       	com	r24
    2646:	84 23       	and	r24, r20
    2648:	8c 93       	st	X, r24
    264a:	2b c0       	rjmp	.+86     	; 0x26a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	a1 f4       	brne	.+40     	; 0x267a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2652:	a1 e3       	ldi	r26, 0x31	; 49
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e1 e3       	ldi	r30, 0x31	; 49
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	48 2f       	mov	r20, r24
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	02 2e       	mov	r0, r18
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <GPIO_setupPinDirection+0x194>
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	0a 94       	dec	r0
    2672:	e2 f7       	brpl	.-8      	; 0x266c <GPIO_setupPinDirection+0x190>
    2674:	84 2b       	or	r24, r20
    2676:	8c 93       	st	X, r24
    2678:	14 c0       	rjmp	.+40     	; 0x26a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    267a:	a1 e3       	ldi	r26, 0x31	; 49
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e1 e3       	ldi	r30, 0x31	; 49
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	48 2f       	mov	r20, r24
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	28 2f       	mov	r18, r24
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	02 2e       	mov	r0, r18
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <GPIO_setupPinDirection+0x1bc>
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	0a 94       	dec	r0
    269a:	e2 f7       	brpl	.-8      	; 0x2694 <GPIO_setupPinDirection+0x1b8>
    269c:	80 95       	com	r24
    269e:	84 23       	and	r24, r20
    26a0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	08 95       	ret

000026b2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    26b2:	df 93       	push	r29
    26b4:	cf 93       	push	r28
    26b6:	00 d0       	rcall	.+0      	; 0x26b8 <GPIO_writePin+0x6>
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <GPIO_writePin+0x8>
    26ba:	0f 92       	push	r0
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	89 83       	std	Y+1, r24	; 0x01
    26c2:	6a 83       	std	Y+2, r22	; 0x02
    26c4:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	88 30       	cpi	r24, 0x08	; 8
    26ca:	08 f0       	brcs	.+2      	; 0x26ce <GPIO_writePin+0x1c>
    26cc:	d5 c0       	rjmp	.+426    	; 0x2878 <GPIO_writePin+0x1c6>
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	84 30       	cpi	r24, 0x04	; 4
    26d2:	08 f0       	brcs	.+2      	; 0x26d6 <GPIO_writePin+0x24>
    26d4:	d1 c0       	rjmp	.+418    	; 0x2878 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}else{
		/* Setup the pin direction as required */
		switch(port_num)
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	28 2f       	mov	r18, r24
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	3d 83       	std	Y+5, r19	; 0x05
    26de:	2c 83       	std	Y+4, r18	; 0x04
    26e0:	8c 81       	ldd	r24, Y+4	; 0x04
    26e2:	9d 81       	ldd	r25, Y+5	; 0x05
    26e4:	81 30       	cpi	r24, 0x01	; 1
    26e6:	91 05       	cpc	r25, r1
    26e8:	09 f4       	brne	.+2      	; 0x26ec <GPIO_writePin+0x3a>
    26ea:	43 c0       	rjmp	.+134    	; 0x2772 <GPIO_writePin+0xc0>
    26ec:	2c 81       	ldd	r18, Y+4	; 0x04
    26ee:	3d 81       	ldd	r19, Y+5	; 0x05
    26f0:	22 30       	cpi	r18, 0x02	; 2
    26f2:	31 05       	cpc	r19, r1
    26f4:	2c f4       	brge	.+10     	; 0x2700 <GPIO_writePin+0x4e>
    26f6:	8c 81       	ldd	r24, Y+4	; 0x04
    26f8:	9d 81       	ldd	r25, Y+5	; 0x05
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	71 f0       	breq	.+28     	; 0x271a <GPIO_writePin+0x68>
    26fe:	bc c0       	rjmp	.+376    	; 0x2878 <GPIO_writePin+0x1c6>
    2700:	2c 81       	ldd	r18, Y+4	; 0x04
    2702:	3d 81       	ldd	r19, Y+5	; 0x05
    2704:	22 30       	cpi	r18, 0x02	; 2
    2706:	31 05       	cpc	r19, r1
    2708:	09 f4       	brne	.+2      	; 0x270c <GPIO_writePin+0x5a>
    270a:	5f c0       	rjmp	.+190    	; 0x27ca <GPIO_writePin+0x118>
    270c:	8c 81       	ldd	r24, Y+4	; 0x04
    270e:	9d 81       	ldd	r25, Y+5	; 0x05
    2710:	83 30       	cpi	r24, 0x03	; 3
    2712:	91 05       	cpc	r25, r1
    2714:	09 f4       	brne	.+2      	; 0x2718 <GPIO_writePin+0x66>
    2716:	85 c0       	rjmp	.+266    	; 0x2822 <GPIO_writePin+0x170>
    2718:	af c0       	rjmp	.+350    	; 0x2878 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value==LOGIC_HIGH){
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	81 30       	cpi	r24, 0x01	; 1
    271e:	a1 f4       	brne	.+40     	; 0x2748 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    2720:	ab e3       	ldi	r26, 0x3B	; 59
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	eb e3       	ldi	r30, 0x3B	; 59
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	48 2f       	mov	r20, r24
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	02 2e       	mov	r0, r18
    2738:	02 c0       	rjmp	.+4      	; 0x273e <GPIO_writePin+0x8c>
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	0a 94       	dec	r0
    2740:	e2 f7       	brpl	.-8      	; 0x273a <GPIO_writePin+0x88>
    2742:	84 2b       	or	r24, r20
    2744:	8c 93       	st	X, r24
    2746:	98 c0       	rjmp	.+304    	; 0x2878 <GPIO_writePin+0x1c6>
			}else{
				CLEAR_BIT(PORTA,pin_num);
    2748:	ab e3       	ldi	r26, 0x3B	; 59
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	eb e3       	ldi	r30, 0x3B	; 59
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	48 2f       	mov	r20, r24
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	02 2e       	mov	r0, r18
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <GPIO_writePin+0xb4>
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	0a 94       	dec	r0
    2768:	e2 f7       	brpl	.-8      	; 0x2762 <GPIO_writePin+0xb0>
    276a:	80 95       	com	r24
    276c:	84 23       	and	r24, r20
    276e:	8c 93       	st	X, r24
    2770:	83 c0       	rjmp	.+262    	; 0x2878 <GPIO_writePin+0x1c6>
			}

			break;
		case PORTB_ID:
			if(value==LOGIC_HIGH){
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	81 30       	cpi	r24, 0x01	; 1
    2776:	a1 f4       	brne	.+40     	; 0x27a0 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    2778:	a8 e3       	ldi	r26, 0x38	; 56
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	e8 e3       	ldi	r30, 0x38	; 56
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	48 2f       	mov	r20, r24
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	28 2f       	mov	r18, r24
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	02 2e       	mov	r0, r18
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <GPIO_writePin+0xe4>
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	0a 94       	dec	r0
    2798:	e2 f7       	brpl	.-8      	; 0x2792 <GPIO_writePin+0xe0>
    279a:	84 2b       	or	r24, r20
    279c:	8c 93       	st	X, r24
    279e:	6c c0       	rjmp	.+216    	; 0x2878 <GPIO_writePin+0x1c6>
			}else{
				CLEAR_BIT(PORTB,pin_num);
    27a0:	a8 e3       	ldi	r26, 0x38	; 56
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e8 e3       	ldi	r30, 0x38	; 56
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	48 2f       	mov	r20, r24
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	02 2e       	mov	r0, r18
    27b8:	02 c0       	rjmp	.+4      	; 0x27be <GPIO_writePin+0x10c>
    27ba:	88 0f       	add	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	0a 94       	dec	r0
    27c0:	e2 f7       	brpl	.-8      	; 0x27ba <GPIO_writePin+0x108>
    27c2:	80 95       	com	r24
    27c4:	84 23       	and	r24, r20
    27c6:	8c 93       	st	X, r24
    27c8:	57 c0       	rjmp	.+174    	; 0x2878 <GPIO_writePin+0x1c6>
			}

			break;
		case PORTC_ID:
			if(value==LOGIC_HIGH){
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	81 30       	cpi	r24, 0x01	; 1
    27ce:	a1 f4       	brne	.+40     	; 0x27f8 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    27d0:	a5 e3       	ldi	r26, 0x35	; 53
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	e5 e3       	ldi	r30, 0x35	; 53
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	48 2f       	mov	r20, r24
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	28 2f       	mov	r18, r24
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	02 2e       	mov	r0, r18
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <GPIO_writePin+0x13c>
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	0a 94       	dec	r0
    27f0:	e2 f7       	brpl	.-8      	; 0x27ea <GPIO_writePin+0x138>
    27f2:	84 2b       	or	r24, r20
    27f4:	8c 93       	st	X, r24
    27f6:	40 c0       	rjmp	.+128    	; 0x2878 <GPIO_writePin+0x1c6>
			}else{
				CLEAR_BIT(PORTC,pin_num);
    27f8:	a5 e3       	ldi	r26, 0x35	; 53
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	e5 e3       	ldi	r30, 0x35	; 53
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	48 2f       	mov	r20, r24
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	02 2e       	mov	r0, r18
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <GPIO_writePin+0x164>
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	0a 94       	dec	r0
    2818:	e2 f7       	brpl	.-8      	; 0x2812 <GPIO_writePin+0x160>
    281a:	80 95       	com	r24
    281c:	84 23       	and	r24, r20
    281e:	8c 93       	st	X, r24
    2820:	2b c0       	rjmp	.+86     	; 0x2878 <GPIO_writePin+0x1c6>
			}

			break;
		case PORTD_ID:
			if(value==LOGIC_HIGH){
    2822:	8b 81       	ldd	r24, Y+3	; 0x03
    2824:	81 30       	cpi	r24, 0x01	; 1
    2826:	a1 f4       	brne	.+40     	; 0x2850 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    2828:	a2 e3       	ldi	r26, 0x32	; 50
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	e2 e3       	ldi	r30, 0x32	; 50
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	48 2f       	mov	r20, r24
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	28 2f       	mov	r18, r24
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	02 2e       	mov	r0, r18
    2840:	02 c0       	rjmp	.+4      	; 0x2846 <GPIO_writePin+0x194>
    2842:	88 0f       	add	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	0a 94       	dec	r0
    2848:	e2 f7       	brpl	.-8      	; 0x2842 <GPIO_writePin+0x190>
    284a:	84 2b       	or	r24, r20
    284c:	8c 93       	st	X, r24
    284e:	14 c0       	rjmp	.+40     	; 0x2878 <GPIO_writePin+0x1c6>
			}else{
				CLEAR_BIT(PORTD,pin_num);
    2850:	a2 e3       	ldi	r26, 0x32	; 50
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	e2 e3       	ldi	r30, 0x32	; 50
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	48 2f       	mov	r20, r24
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	28 2f       	mov	r18, r24
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	02 2e       	mov	r0, r18
    2868:	02 c0       	rjmp	.+4      	; 0x286e <GPIO_writePin+0x1bc>
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	0a 94       	dec	r0
    2870:	e2 f7       	brpl	.-8      	; 0x286a <GPIO_writePin+0x1b8>
    2872:	80 95       	com	r24
    2874:	84 23       	and	r24, r20
    2876:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	08 95       	ret

00002888 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2888:	df 93       	push	r29
    288a:	cf 93       	push	r28
    288c:	00 d0       	rcall	.+0      	; 0x288e <GPIO_readPin+0x6>
    288e:	00 d0       	rcall	.+0      	; 0x2890 <GPIO_readPin+0x8>
    2890:	0f 92       	push	r0
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	8a 83       	std	Y+2, r24	; 0x02
    2898:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value=LOGIC_LOW;
    289a:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	88 30       	cpi	r24, 0x08	; 8
    28a0:	08 f0       	brcs	.+2      	; 0x28a4 <GPIO_readPin+0x1c>
    28a2:	9d c0       	rjmp	.+314    	; 0x29de <GPIO_readPin+0x156>
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	84 30       	cpi	r24, 0x04	; 4
    28a8:	08 f0       	brcs	.+2      	; 0x28ac <GPIO_readPin+0x24>
    28aa:	99 c0       	rjmp	.+306    	; 0x29de <GPIO_readPin+0x156>
	{
		/* Do Nothing */
	}else{
		switch(port_num)
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	28 2f       	mov	r18, r24
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	3d 83       	std	Y+5, r19	; 0x05
    28b4:	2c 83       	std	Y+4, r18	; 0x04
    28b6:	4c 81       	ldd	r20, Y+4	; 0x04
    28b8:	5d 81       	ldd	r21, Y+5	; 0x05
    28ba:	41 30       	cpi	r20, 0x01	; 1
    28bc:	51 05       	cpc	r21, r1
    28be:	b1 f1       	breq	.+108    	; 0x292c <GPIO_readPin+0xa4>
    28c0:	8c 81       	ldd	r24, Y+4	; 0x04
    28c2:	9d 81       	ldd	r25, Y+5	; 0x05
    28c4:	82 30       	cpi	r24, 0x02	; 2
    28c6:	91 05       	cpc	r25, r1
    28c8:	34 f4       	brge	.+12     	; 0x28d6 <GPIO_readPin+0x4e>
    28ca:	2c 81       	ldd	r18, Y+4	; 0x04
    28cc:	3d 81       	ldd	r19, Y+5	; 0x05
    28ce:	21 15       	cp	r18, r1
    28d0:	31 05       	cpc	r19, r1
    28d2:	71 f0       	breq	.+28     	; 0x28f0 <GPIO_readPin+0x68>
    28d4:	84 c0       	rjmp	.+264    	; 0x29de <GPIO_readPin+0x156>
    28d6:	4c 81       	ldd	r20, Y+4	; 0x04
    28d8:	5d 81       	ldd	r21, Y+5	; 0x05
    28da:	42 30       	cpi	r20, 0x02	; 2
    28dc:	51 05       	cpc	r21, r1
    28de:	09 f4       	brne	.+2      	; 0x28e2 <GPIO_readPin+0x5a>
    28e0:	43 c0       	rjmp	.+134    	; 0x2968 <GPIO_readPin+0xe0>
    28e2:	8c 81       	ldd	r24, Y+4	; 0x04
    28e4:	9d 81       	ldd	r25, Y+5	; 0x05
    28e6:	83 30       	cpi	r24, 0x03	; 3
    28e8:	91 05       	cpc	r25, r1
    28ea:	09 f4       	brne	.+2      	; 0x28ee <GPIO_readPin+0x66>
    28ec:	5b c0       	rjmp	.+182    	; 0x29a4 <GPIO_readPin+0x11c>
    28ee:	77 c0       	rjmp	.+238    	; 0x29de <GPIO_readPin+0x156>
		{
		case PORTA_ID:
			value= GET_BIT(PINA,pin_num);
    28f0:	e9 e3       	ldi	r30, 0x39	; 57
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	48 2f       	mov	r20, r24
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	8b 81       	ldd	r24, Y+3	; 0x03
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	02 c0       	rjmp	.+4      	; 0x290a <GPIO_readPin+0x82>
    2906:	88 0f       	add	r24, r24
    2908:	99 1f       	adc	r25, r25
    290a:	2a 95       	dec	r18
    290c:	e2 f7       	brpl	.-8      	; 0x2906 <GPIO_readPin+0x7e>
    290e:	9a 01       	movw	r18, r20
    2910:	28 23       	and	r18, r24
    2912:	39 23       	and	r19, r25
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	88 2f       	mov	r24, r24
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	a9 01       	movw	r20, r18
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <GPIO_readPin+0x9a>
    291e:	55 95       	asr	r21
    2920:	47 95       	ror	r20
    2922:	8a 95       	dec	r24
    2924:	e2 f7       	brpl	.-8      	; 0x291e <GPIO_readPin+0x96>
    2926:	ca 01       	movw	r24, r20
    2928:	89 83       	std	Y+1, r24	; 0x01
    292a:	59 c0       	rjmp	.+178    	; 0x29de <GPIO_readPin+0x156>
			break;
		case PORTB_ID:
			value= GET_BIT(PINB,pin_num);
    292c:	e6 e3       	ldi	r30, 0x36	; 54
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	48 2f       	mov	r20, r24
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	28 2f       	mov	r18, r24
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <GPIO_readPin+0xbe>
    2942:	88 0f       	add	r24, r24
    2944:	99 1f       	adc	r25, r25
    2946:	2a 95       	dec	r18
    2948:	e2 f7       	brpl	.-8      	; 0x2942 <GPIO_readPin+0xba>
    294a:	9a 01       	movw	r18, r20
    294c:	28 23       	and	r18, r24
    294e:	39 23       	and	r19, r25
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	88 2f       	mov	r24, r24
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	a9 01       	movw	r20, r18
    2958:	02 c0       	rjmp	.+4      	; 0x295e <GPIO_readPin+0xd6>
    295a:	55 95       	asr	r21
    295c:	47 95       	ror	r20
    295e:	8a 95       	dec	r24
    2960:	e2 f7       	brpl	.-8      	; 0x295a <GPIO_readPin+0xd2>
    2962:	ca 01       	movw	r24, r20
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	3b c0       	rjmp	.+118    	; 0x29de <GPIO_readPin+0x156>
			break;
		case PORTC_ID:
			value= GET_BIT(PINC,pin_num);
    2968:	e3 e3       	ldi	r30, 0x33	; 51
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	48 2f       	mov	r20, r24
    2970:	50 e0       	ldi	r21, 0x00	; 0
    2972:	8b 81       	ldd	r24, Y+3	; 0x03
    2974:	28 2f       	mov	r18, r24
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <GPIO_readPin+0xfa>
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	2a 95       	dec	r18
    2984:	e2 f7       	brpl	.-8      	; 0x297e <GPIO_readPin+0xf6>
    2986:	9a 01       	movw	r18, r20
    2988:	28 23       	and	r18, r24
    298a:	39 23       	and	r19, r25
    298c:	8b 81       	ldd	r24, Y+3	; 0x03
    298e:	88 2f       	mov	r24, r24
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	a9 01       	movw	r20, r18
    2994:	02 c0       	rjmp	.+4      	; 0x299a <GPIO_readPin+0x112>
    2996:	55 95       	asr	r21
    2998:	47 95       	ror	r20
    299a:	8a 95       	dec	r24
    299c:	e2 f7       	brpl	.-8      	; 0x2996 <GPIO_readPin+0x10e>
    299e:	ca 01       	movw	r24, r20
    29a0:	89 83       	std	Y+1, r24	; 0x01
    29a2:	1d c0       	rjmp	.+58     	; 0x29de <GPIO_readPin+0x156>
			break;
		case PORTD_ID:
			value= GET_BIT(PIND,pin_num);
    29a4:	e0 e3       	ldi	r30, 0x30	; 48
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	48 2f       	mov	r20, r24
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	02 c0       	rjmp	.+4      	; 0x29be <GPIO_readPin+0x136>
    29ba:	88 0f       	add	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	2a 95       	dec	r18
    29c0:	e2 f7       	brpl	.-8      	; 0x29ba <GPIO_readPin+0x132>
    29c2:	9a 01       	movw	r18, r20
    29c4:	28 23       	and	r18, r24
    29c6:	39 23       	and	r19, r25
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	88 2f       	mov	r24, r24
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	a9 01       	movw	r20, r18
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <GPIO_readPin+0x14e>
    29d2:	55 95       	asr	r21
    29d4:	47 95       	ror	r20
    29d6:	8a 95       	dec	r24
    29d8:	e2 f7       	brpl	.-8      	; 0x29d2 <GPIO_readPin+0x14a>
    29da:	ca 01       	movw	r24, r20
    29dc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    29de:	89 81       	ldd	r24, Y+1	; 0x01
}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <GPIO_setupPortDirection+0x6>
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <GPIO_setupPortDirection+0x8>
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	89 83       	std	Y+1, r24	; 0x01
    29fe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	84 30       	cpi	r24, 0x04	; 4
    2a04:	90 f5       	brcc	.+100    	; 0x2a6a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{

		switch(port_num)
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	28 2f       	mov	r18, r24
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	3c 83       	std	Y+4, r19	; 0x04
    2a0e:	2b 83       	std	Y+3, r18	; 0x03
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9c 81       	ldd	r25, Y+4	; 0x04
    2a14:	81 30       	cpi	r24, 0x01	; 1
    2a16:	91 05       	cpc	r25, r1
    2a18:	d1 f0       	breq	.+52     	; 0x2a4e <GPIO_setupPortDirection+0x5e>
    2a1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a1c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a1e:	22 30       	cpi	r18, 0x02	; 2
    2a20:	31 05       	cpc	r19, r1
    2a22:	2c f4       	brge	.+10     	; 0x2a2e <GPIO_setupPortDirection+0x3e>
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	9c 81       	ldd	r25, Y+4	; 0x04
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	61 f0       	breq	.+24     	; 0x2a44 <GPIO_setupPortDirection+0x54>
    2a2c:	1e c0       	rjmp	.+60     	; 0x2a6a <GPIO_setupPortDirection+0x7a>
    2a2e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a30:	3c 81       	ldd	r19, Y+4	; 0x04
    2a32:	22 30       	cpi	r18, 0x02	; 2
    2a34:	31 05       	cpc	r19, r1
    2a36:	81 f0       	breq	.+32     	; 0x2a58 <GPIO_setupPortDirection+0x68>
    2a38:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3c:	83 30       	cpi	r24, 0x03	; 3
    2a3e:	91 05       	cpc	r25, r1
    2a40:	81 f0       	breq	.+32     	; 0x2a62 <GPIO_setupPortDirection+0x72>
    2a42:	13 c0       	rjmp	.+38     	; 0x2a6a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2a44:	ea e3       	ldi	r30, 0x3A	; 58
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	80 83       	st	Z, r24
    2a4c:	0e c0       	rjmp	.+28     	; 0x2a6a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2a4e:	e7 e3       	ldi	r30, 0x37	; 55
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	80 83       	st	Z, r24
    2a56:	09 c0       	rjmp	.+18     	; 0x2a6a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2a58:	e4 e3       	ldi	r30, 0x34	; 52
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5e:	80 83       	st	Z, r24
    2a60:	04 c0       	rjmp	.+8      	; 0x2a6a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2a62:	e1 e3       	ldi	r30, 0x31	; 49
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	80 83       	st	Z, r24
			break;
		}
	}
}
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	cf 91       	pop	r28
    2a74:	df 91       	pop	r29
    2a76:	08 95       	ret

00002a78 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2a78:	df 93       	push	r29
    2a7a:	cf 93       	push	r28
    2a7c:	00 d0       	rcall	.+0      	; 0x2a7e <GPIO_writePort+0x6>
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <GPIO_writePort+0x8>
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	84 30       	cpi	r24, 0x04	; 4
    2a8c:	90 f5       	brcc	.+100    	; 0x2af2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	3c 83       	std	Y+4, r19	; 0x04
    2a96:	2b 83       	std	Y+3, r18	; 0x03
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9c:	81 30       	cpi	r24, 0x01	; 1
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	d1 f0       	breq	.+52     	; 0x2ad6 <GPIO_writePort+0x5e>
    2aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    2aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    2aa6:	22 30       	cpi	r18, 0x02	; 2
    2aa8:	31 05       	cpc	r19, r1
    2aaa:	2c f4       	brge	.+10     	; 0x2ab6 <GPIO_writePort+0x3e>
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	61 f0       	breq	.+24     	; 0x2acc <GPIO_writePort+0x54>
    2ab4:	1e c0       	rjmp	.+60     	; 0x2af2 <GPIO_writePort+0x7a>
    2ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    2aba:	22 30       	cpi	r18, 0x02	; 2
    2abc:	31 05       	cpc	r19, r1
    2abe:	81 f0       	breq	.+32     	; 0x2ae0 <GPIO_writePort+0x68>
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac4:	83 30       	cpi	r24, 0x03	; 3
    2ac6:	91 05       	cpc	r25, r1
    2ac8:	81 f0       	breq	.+32     	; 0x2aea <GPIO_writePort+0x72>
    2aca:	13 c0       	rjmp	.+38     	; 0x2af2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
    2acc:	eb e3       	ldi	r30, 0x3B	; 59
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad2:	80 83       	st	Z, r24
    2ad4:	0e c0       	rjmp	.+28     	; 0x2af2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    2ad6:	e8 e3       	ldi	r30, 0x38	; 56
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	8a 81       	ldd	r24, Y+2	; 0x02
    2adc:	80 83       	st	Z, r24
    2ade:	09 c0       	rjmp	.+18     	; 0x2af2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    2ae0:	e5 e3       	ldi	r30, 0x35	; 53
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	80 83       	st	Z, r24
    2ae8:	04 c0       	rjmp	.+8      	; 0x2af2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    2aea:	e2 e3       	ldi	r30, 0x32	; 50
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	80 83       	st	Z, r24
			break;
		}
	}
}
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	08 95       	ret

00002b00 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <GPIO_readPort+0x6>
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <GPIO_readPort+0x8>
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value=0;
    2b0e:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    2b10:	8a 81       	ldd	r24, Y+2	; 0x02
    2b12:	84 30       	cpi	r24, 0x04	; 4
    2b14:	90 f5       	brcc	.+100    	; 0x2b7a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{

		switch(port_num)
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	28 2f       	mov	r18, r24
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	3c 83       	std	Y+4, r19	; 0x04
    2b1e:	2b 83       	std	Y+3, r18	; 0x03
    2b20:	8b 81       	ldd	r24, Y+3	; 0x03
    2b22:	9c 81       	ldd	r25, Y+4	; 0x04
    2b24:	81 30       	cpi	r24, 0x01	; 1
    2b26:	91 05       	cpc	r25, r1
    2b28:	d1 f0       	breq	.+52     	; 0x2b5e <GPIO_readPort+0x5e>
    2b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b2e:	22 30       	cpi	r18, 0x02	; 2
    2b30:	31 05       	cpc	r19, r1
    2b32:	2c f4       	brge	.+10     	; 0x2b3e <GPIO_readPort+0x3e>
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	9c 81       	ldd	r25, Y+4	; 0x04
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	61 f0       	breq	.+24     	; 0x2b54 <GPIO_readPort+0x54>
    2b3c:	1e c0       	rjmp	.+60     	; 0x2b7a <GPIO_readPort+0x7a>
    2b3e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b40:	3c 81       	ldd	r19, Y+4	; 0x04
    2b42:	22 30       	cpi	r18, 0x02	; 2
    2b44:	31 05       	cpc	r19, r1
    2b46:	81 f0       	breq	.+32     	; 0x2b68 <GPIO_readPort+0x68>
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4c:	83 30       	cpi	r24, 0x03	; 3
    2b4e:	91 05       	cpc	r25, r1
    2b50:	81 f0       	breq	.+32     	; 0x2b72 <GPIO_readPort+0x72>
    2b52:	13 c0       	rjmp	.+38     	; 0x2b7a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value=PINA;
    2b54:	e9 e3       	ldi	r30, 0x39	; 57
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	89 83       	std	Y+1, r24	; 0x01
    2b5c:	0e c0       	rjmp	.+28     	; 0x2b7a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value= PINB;
    2b5e:	e6 e3       	ldi	r30, 0x36	; 54
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	89 83       	std	Y+1, r24	; 0x01
    2b66:	09 c0       	rjmp	.+18     	; 0x2b7a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value=PINC;
    2b68:	e3 e3       	ldi	r30, 0x33	; 51
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	04 c0       	rjmp	.+8      	; 0x2b7a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value=PIND;
    2b72:	e0 e3       	ldi	r30, 0x30	; 48
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01

}
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <main>:
void motorCW_callback(void);
void motorhold_callback(void);
void motorACW_callback(void);
void Buzzer_Callback(void);

int main(void){
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	2c 97       	sbiw	r28, 0x0c	; 12
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	cd bf       	out	0x3d, r28	; 61
	/* Initlize LCD */
	LCD_init();
    2b9e:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_init>
	 * character size 8
	 * baud rate =9600
	 * */
	Config_Uart config_uart={DISABLED,ONE_BIT,
			BIT_8,9600
	};
    2ba2:	ce 01       	movw	r24, r28
    2ba4:	01 96       	adiw	r24, 0x01	; 1
    2ba6:	99 87       	std	Y+9, r25	; 0x09
    2ba8:	88 87       	std	Y+8, r24	; 0x08
    2baa:	e7 e0       	ldi	r30, 0x07	; 7
    2bac:	f1 e0       	ldi	r31, 0x01	; 1
    2bae:	fb 87       	std	Y+11, r31	; 0x0b
    2bb0:	ea 87       	std	Y+10, r30	; 0x0a
    2bb2:	f7 e0       	ldi	r31, 0x07	; 7
    2bb4:	fc 87       	std	Y+12, r31	; 0x0c
    2bb6:	ea 85       	ldd	r30, Y+10	; 0x0a
    2bb8:	fb 85       	ldd	r31, Y+11	; 0x0b
    2bba:	00 80       	ld	r0, Z
    2bbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bc0:	01 96       	adiw	r24, 0x01	; 1
    2bc2:	9b 87       	std	Y+11, r25	; 0x0b
    2bc4:	8a 87       	std	Y+10, r24	; 0x0a
    2bc6:	e8 85       	ldd	r30, Y+8	; 0x08
    2bc8:	f9 85       	ldd	r31, Y+9	; 0x09
    2bca:	00 82       	st	Z, r0
    2bcc:	88 85       	ldd	r24, Y+8	; 0x08
    2bce:	99 85       	ldd	r25, Y+9	; 0x09
    2bd0:	01 96       	adiw	r24, 0x01	; 1
    2bd2:	99 87       	std	Y+9, r25	; 0x09
    2bd4:	88 87       	std	Y+8, r24	; 0x08
    2bd6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bd8:	91 50       	subi	r25, 0x01	; 1
    2bda:	9c 87       	std	Y+12, r25	; 0x0c
    2bdc:	ec 85       	ldd	r30, Y+12	; 0x0c
    2bde:	ee 23       	and	r30, r30
    2be0:	51 f7       	brne	.-44     	; 0x2bb6 <main+0x2c>

	UART_init(&config_uart);
    2be2:	ce 01       	movw	r24, r28
    2be4:	01 96       	adiw	r24, 0x01	; 1
    2be6:	0e 94 10 20 	call	0x4020	; 0x4020 <UART_init>
	/*Enbale Global interrupt*/
	SREG=(1<<7);
    2bea:	ef e5       	ldi	r30, 0x5F	; 95
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 e8       	ldi	r24, 0x80	; 128
    2bf0:	80 83       	st	Z, r24
	/* Create password */
	CreateSystemPassword();
    2bf2:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <CreateSystemPassword>

	while(1){
		MainOptions();
    2bf6:	0e 94 1b 1c 	call	0x3836	; 0x3836 <MainOptions>
    2bfa:	fd cf       	rjmp	.-6      	; 0x2bf6 <main+0x6c>

00002bfc <CreateSystemPassword>:
	}

}
/* create Password */
uint8 CreateSystemPassword(){
    2bfc:	0f 93       	push	r16
    2bfe:	1f 93       	push	r17
    2c00:	df 93       	push	r29
    2c02:	cf 93       	push	r28
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	c5 58       	subi	r28, 0x85	; 133
    2c0a:	d0 40       	sbci	r29, 0x00	; 0
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	de bf       	out	0x3e, r29	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	cd bf       	out	0x3d, r28	; 61
	uint8 check;
	do{
		uint8 i;
		uint16 re_enter=0;
    2c16:	fe 01       	movw	r30, r28
    2c18:	ee 57       	subi	r30, 0x7E	; 126
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	11 82       	std	Z+1, r1	; 0x01
    2c1e:	10 82       	st	Z, r1
		uint16 password=0;
    2c20:	fe 01       	movw	r30, r28
    2c22:	e0 58       	subi	r30, 0x80	; 128
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	11 82       	std	Z+1, r1	; 0x01
    2c28:	10 82       	st	Z, r1
		/*Display on lcd entering password  and move the cursor */
		LCD_clearScreen();
    2c2a:	0e 94 86 11 	call	0x230c	; 0x230c <LCD_clearScreen>
		LCD_displayString("Plz Enter new");
    2c2e:	80 e6       	ldi	r24, 0x60	; 96
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_displayString>
		LCD_moveCursor(1,0);
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	60 e0       	ldi	r22, 0x00	; 0
    2c3a:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_moveCursor>
		LCD_displayString("Pass: ");
    2c3e:	8e e6       	ldi	r24, 0x6E	; 110
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_displayString>
		/*Ask user to enter Five number from Keypad as a password */
		for(i=0;i<5;i++){
    2c46:	fe 01       	movw	r30, r28
    2c48:	ec 57       	subi	r30, 0x7C	; 124
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	10 82       	st	Z, r1
    2c4e:	da c0       	rjmp	.+436    	; 0x2e04 <CreateSystemPassword+0x208>
			password=password*10+KEYPAD_getPressedKey();
    2c50:	fe 01       	movw	r30, r28
    2c52:	e0 58       	subi	r30, 0x80	; 128
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 81       	ld	r24, Z
    2c58:	91 81       	ldd	r25, Z+1	; 0x01
    2c5a:	9c 01       	movw	r18, r24
    2c5c:	22 0f       	add	r18, r18
    2c5e:	33 1f       	adc	r19, r19
    2c60:	c9 01       	movw	r24, r18
    2c62:	88 0f       	add	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	88 0f       	add	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	89 01       	movw	r16, r18
    2c6c:	08 0f       	add	r16, r24
    2c6e:	19 1f       	adc	r17, r25
    2c70:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2c74:	88 2f       	mov	r24, r24
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	fe 01       	movw	r30, r28
    2c7a:	e0 58       	subi	r30, 0x80	; 128
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	80 0f       	add	r24, r16
    2c80:	91 1f       	adc	r25, r17
    2c82:	91 83       	std	Z+1, r25	; 0x01
    2c84:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    2c86:	8a e2       	ldi	r24, 0x2A	; 42
    2c88:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayCharacter>
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e5 58       	subi	r30, 0x85	; 133
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	a8 e4       	ldi	r26, 0x48	; 72
    2c98:	b3 e4       	ldi	r27, 0x43	; 67
    2c9a:	80 83       	st	Z, r24
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	a2 83       	std	Z+2, r26	; 0x02
    2ca0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca2:	8e 01       	movw	r16, r28
    2ca4:	09 58       	subi	r16, 0x89	; 137
    2ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e5 58       	subi	r30, 0x85	; 133
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	60 81       	ld	r22, Z
    2cb0:	71 81       	ldd	r23, Z+1	; 0x01
    2cb2:	82 81       	ldd	r24, Z+2	; 0x02
    2cb4:	93 81       	ldd	r25, Z+3	; 0x03
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	4a e7       	ldi	r20, 0x7A	; 122
    2cbc:	55 e4       	ldi	r21, 0x45	; 69
    2cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	f8 01       	movw	r30, r16
    2cc8:	80 83       	st	Z, r24
    2cca:	91 83       	std	Z+1, r25	; 0x01
    2ccc:	a2 83       	std	Z+2, r26	; 0x02
    2cce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e9 58       	subi	r30, 0x89	; 137
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e8       	ldi	r20, 0x80	; 128
    2ce4:	5f e3       	ldi	r21, 0x3F	; 63
    2ce6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cea:	88 23       	and	r24, r24
    2cec:	44 f4       	brge	.+16     	; 0x2cfe <CreateSystemPassword+0x102>
		__ticks = 1;
    2cee:	fe 01       	movw	r30, r28
    2cf0:	eb 58       	subi	r30, 0x8B	; 139
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	91 83       	std	Z+1, r25	; 0x01
    2cfa:	80 83       	st	Z, r24
    2cfc:	64 c0       	rjmp	.+200    	; 0x2dc6 <CreateSystemPassword+0x1ca>
	else if (__tmp > 65535)
    2cfe:	fe 01       	movw	r30, r28
    2d00:	e9 58       	subi	r30, 0x89	; 137
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	60 81       	ld	r22, Z
    2d06:	71 81       	ldd	r23, Z+1	; 0x01
    2d08:	82 81       	ldd	r24, Z+2	; 0x02
    2d0a:	93 81       	ldd	r25, Z+3	; 0x03
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	3f ef       	ldi	r19, 0xFF	; 255
    2d10:	4f e7       	ldi	r20, 0x7F	; 127
    2d12:	57 e4       	ldi	r21, 0x47	; 71
    2d14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d18:	18 16       	cp	r1, r24
    2d1a:	0c f0       	brlt	.+2      	; 0x2d1e <CreateSystemPassword+0x122>
    2d1c:	43 c0       	rjmp	.+134    	; 0x2da4 <CreateSystemPassword+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1e:	fe 01       	movw	r30, r28
    2d20:	e5 58       	subi	r30, 0x85	; 133
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	60 81       	ld	r22, Z
    2d26:	71 81       	ldd	r23, Z+1	; 0x01
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	93 81       	ldd	r25, Z+3	; 0x03
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e2       	ldi	r20, 0x20	; 32
    2d32:	51 e4       	ldi	r21, 0x41	; 65
    2d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	8e 01       	movw	r16, r28
    2d3e:	0b 58       	subi	r16, 0x8B	; 139
    2d40:	1f 4f       	sbci	r17, 0xFF	; 255
    2d42:	bc 01       	movw	r22, r24
    2d44:	cd 01       	movw	r24, r26
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	f8 01       	movw	r30, r16
    2d50:	91 83       	std	Z+1, r25	; 0x01
    2d52:	80 83       	st	Z, r24
    2d54:	1f c0       	rjmp	.+62     	; 0x2d94 <CreateSystemPassword+0x198>
    2d56:	fe 01       	movw	r30, r28
    2d58:	ed 58       	subi	r30, 0x8D	; 141
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 e9       	ldi	r24, 0x90	; 144
    2d5e:	91 e0       	ldi	r25, 0x01	; 1
    2d60:	91 83       	std	Z+1, r25	; 0x01
    2d62:	80 83       	st	Z, r24
    2d64:	fe 01       	movw	r30, r28
    2d66:	ed 58       	subi	r30, 0x8D	; 141
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	80 81       	ld	r24, Z
    2d6c:	91 81       	ldd	r25, Z+1	; 0x01
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <CreateSystemPassword+0x172>
    2d72:	fe 01       	movw	r30, r28
    2d74:	ed 58       	subi	r30, 0x8D	; 141
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	91 83       	std	Z+1, r25	; 0x01
    2d7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7c:	de 01       	movw	r26, r28
    2d7e:	ab 58       	subi	r26, 0x8B	; 139
    2d80:	bf 4f       	sbci	r27, 0xFF	; 255
    2d82:	fe 01       	movw	r30, r28
    2d84:	eb 58       	subi	r30, 0x8B	; 139
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	80 81       	ld	r24, Z
    2d8a:	91 81       	ldd	r25, Z+1	; 0x01
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	11 96       	adiw	r26, 0x01	; 1
    2d90:	9c 93       	st	X, r25
    2d92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d94:	fe 01       	movw	r30, r28
    2d96:	eb 58       	subi	r30, 0x8B	; 139
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	80 81       	ld	r24, Z
    2d9c:	91 81       	ldd	r25, Z+1	; 0x01
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	d1 f6       	brne	.-76     	; 0x2d56 <CreateSystemPassword+0x15a>
    2da2:	27 c0       	rjmp	.+78     	; 0x2df2 <CreateSystemPassword+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da4:	8e 01       	movw	r16, r28
    2da6:	0b 58       	subi	r16, 0x8B	; 139
    2da8:	1f 4f       	sbci	r17, 0xFF	; 255
    2daa:	fe 01       	movw	r30, r28
    2dac:	e9 58       	subi	r30, 0x89	; 137
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	60 81       	ld	r22, Z
    2db2:	71 81       	ldd	r23, Z+1	; 0x01
    2db4:	82 81       	ldd	r24, Z+2	; 0x02
    2db6:	93 81       	ldd	r25, Z+3	; 0x03
    2db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	f8 01       	movw	r30, r16
    2dc2:	91 83       	std	Z+1, r25	; 0x01
    2dc4:	80 83       	st	Z, r24
    2dc6:	de 01       	movw	r26, r28
    2dc8:	af 58       	subi	r26, 0x8F	; 143
    2dca:	bf 4f       	sbci	r27, 0xFF	; 255
    2dcc:	fe 01       	movw	r30, r28
    2dce:	eb 58       	subi	r30, 0x8B	; 139
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	8d 93       	st	X+, r24
    2dd8:	9c 93       	st	X, r25
    2dda:	fe 01       	movw	r30, r28
    2ddc:	ef 58       	subi	r30, 0x8F	; 143
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 81       	ld	r24, Z
    2de2:	91 81       	ldd	r25, Z+1	; 0x01
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <CreateSystemPassword+0x1e8>
    2de8:	fe 01       	movw	r30, r28
    2dea:	ef 58       	subi	r30, 0x8F	; 143
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	91 83       	std	Z+1, r25	; 0x01
    2df0:	80 83       	st	Z, r24
		LCD_clearScreen();
		LCD_displayString("Plz Enter new");
		LCD_moveCursor(1,0);
		LCD_displayString("Pass: ");
		/*Ask user to enter Five number from Keypad as a password */
		for(i=0;i<5;i++){
    2df2:	de 01       	movw	r26, r28
    2df4:	ac 57       	subi	r26, 0x7C	; 124
    2df6:	bf 4f       	sbci	r27, 0xFF	; 255
    2df8:	fe 01       	movw	r30, r28
    2dfa:	ec 57       	subi	r30, 0x7C	; 124
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	80 81       	ld	r24, Z
    2e00:	8f 5f       	subi	r24, 0xFF	; 255
    2e02:	8c 93       	st	X, r24
    2e04:	fe 01       	movw	r30, r28
    2e06:	ec 57       	subi	r30, 0x7C	; 124
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	80 81       	ld	r24, Z
    2e0c:	85 30       	cpi	r24, 0x05	; 5
    2e0e:	08 f4       	brcc	.+2      	; 0x2e12 <CreateSystemPassword+0x216>
    2e10:	1f cf       	rjmp	.-450    	; 0x2c50 <CreateSystemPassword+0x54>
    2e12:	ba c0       	rjmp	.+372    	; 0x2f88 <CreateSystemPassword+0x38c>
		/*
		 * waiting to get enter '=' from user to confirm
		 * */
		uint8 enter_value;
		while(enter_value!='='){
			enter_value=KEYPAD_getPressedKey();
    2e14:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e1 58       	subi	r30, 0x81	; 129
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	80 83       	st	Z, r24
    2e20:	fe 01       	movw	r30, r28
    2e22:	e3 59       	subi	r30, 0x93	; 147
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	a8 e4       	ldi	r26, 0x48	; 72
    2e2c:	b3 e4       	ldi	r27, 0x43	; 67
    2e2e:	80 83       	st	Z, r24
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	a2 83       	std	Z+2, r26	; 0x02
    2e34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e36:	8e 01       	movw	r16, r28
    2e38:	07 59       	subi	r16, 0x97	; 151
    2e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e3 59       	subi	r30, 0x93	; 147
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	60 81       	ld	r22, Z
    2e44:	71 81       	ldd	r23, Z+1	; 0x01
    2e46:	82 81       	ldd	r24, Z+2	; 0x02
    2e48:	93 81       	ldd	r25, Z+3	; 0x03
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	4a e7       	ldi	r20, 0x7A	; 122
    2e50:	55 e4       	ldi	r21, 0x45	; 69
    2e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	f8 01       	movw	r30, r16
    2e5c:	80 83       	st	Z, r24
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	a2 83       	std	Z+2, r26	; 0x02
    2e62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e64:	fe 01       	movw	r30, r28
    2e66:	e7 59       	subi	r30, 0x97	; 151
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	60 81       	ld	r22, Z
    2e6c:	71 81       	ldd	r23, Z+1	; 0x01
    2e6e:	82 81       	ldd	r24, Z+2	; 0x02
    2e70:	93 81       	ldd	r25, Z+3	; 0x03
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e8       	ldi	r20, 0x80	; 128
    2e78:	5f e3       	ldi	r21, 0x3F	; 63
    2e7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e7e:	88 23       	and	r24, r24
    2e80:	44 f4       	brge	.+16     	; 0x2e92 <CreateSystemPassword+0x296>
		__ticks = 1;
    2e82:	fe 01       	movw	r30, r28
    2e84:	e9 59       	subi	r30, 0x99	; 153
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	91 83       	std	Z+1, r25	; 0x01
    2e8e:	80 83       	st	Z, r24
    2e90:	64 c0       	rjmp	.+200    	; 0x2f5a <CreateSystemPassword+0x35e>
	else if (__tmp > 65535)
    2e92:	fe 01       	movw	r30, r28
    2e94:	e7 59       	subi	r30, 0x97	; 151
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	60 81       	ld	r22, Z
    2e9a:	71 81       	ldd	r23, Z+1	; 0x01
    2e9c:	82 81       	ldd	r24, Z+2	; 0x02
    2e9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	3f ef       	ldi	r19, 0xFF	; 255
    2ea4:	4f e7       	ldi	r20, 0x7F	; 127
    2ea6:	57 e4       	ldi	r21, 0x47	; 71
    2ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eac:	18 16       	cp	r1, r24
    2eae:	0c f0       	brlt	.+2      	; 0x2eb2 <CreateSystemPassword+0x2b6>
    2eb0:	43 c0       	rjmp	.+134    	; 0x2f38 <CreateSystemPassword+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	e3 59       	subi	r30, 0x93	; 147
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	60 81       	ld	r22, Z
    2eba:	71 81       	ldd	r23, Z+1	; 0x01
    2ebc:	82 81       	ldd	r24, Z+2	; 0x02
    2ebe:	93 81       	ldd	r25, Z+3	; 0x03
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e2       	ldi	r20, 0x20	; 32
    2ec6:	51 e4       	ldi	r21, 0x41	; 65
    2ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	8e 01       	movw	r16, r28
    2ed2:	09 59       	subi	r16, 0x99	; 153
    2ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed6:	bc 01       	movw	r22, r24
    2ed8:	cd 01       	movw	r24, r26
    2eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	f8 01       	movw	r30, r16
    2ee4:	91 83       	std	Z+1, r25	; 0x01
    2ee6:	80 83       	st	Z, r24
    2ee8:	1f c0       	rjmp	.+62     	; 0x2f28 <CreateSystemPassword+0x32c>
    2eea:	fe 01       	movw	r30, r28
    2eec:	eb 59       	subi	r30, 0x9B	; 155
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	80 e9       	ldi	r24, 0x90	; 144
    2ef2:	91 e0       	ldi	r25, 0x01	; 1
    2ef4:	91 83       	std	Z+1, r25	; 0x01
    2ef6:	80 83       	st	Z, r24
    2ef8:	fe 01       	movw	r30, r28
    2efa:	eb 59       	subi	r30, 0x9B	; 155
    2efc:	ff 4f       	sbci	r31, 0xFF	; 255
    2efe:	80 81       	ld	r24, Z
    2f00:	91 81       	ldd	r25, Z+1	; 0x01
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	f1 f7       	brne	.-4      	; 0x2f02 <CreateSystemPassword+0x306>
    2f06:	fe 01       	movw	r30, r28
    2f08:	eb 59       	subi	r30, 0x9B	; 155
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f10:	de 01       	movw	r26, r28
    2f12:	a9 59       	subi	r26, 0x99	; 153
    2f14:	bf 4f       	sbci	r27, 0xFF	; 255
    2f16:	fe 01       	movw	r30, r28
    2f18:	e9 59       	subi	r30, 0x99	; 153
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 81       	ld	r24, Z
    2f1e:	91 81       	ldd	r25, Z+1	; 0x01
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	11 96       	adiw	r26, 0x01	; 1
    2f24:	9c 93       	st	X, r25
    2f26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f28:	fe 01       	movw	r30, r28
    2f2a:	e9 59       	subi	r30, 0x99	; 153
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	00 97       	sbiw	r24, 0x00	; 0
    2f34:	d1 f6       	brne	.-76     	; 0x2eea <CreateSystemPassword+0x2ee>
    2f36:	28 c0       	rjmp	.+80     	; 0x2f88 <CreateSystemPassword+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f38:	8e 01       	movw	r16, r28
    2f3a:	09 59       	subi	r16, 0x99	; 153
    2f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e7 59       	subi	r30, 0x97	; 151
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	60 81       	ld	r22, Z
    2f46:	71 81       	ldd	r23, Z+1	; 0x01
    2f48:	82 81       	ldd	r24, Z+2	; 0x02
    2f4a:	93 81       	ldd	r25, Z+3	; 0x03
    2f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	f8 01       	movw	r30, r16
    2f56:	91 83       	std	Z+1, r25	; 0x01
    2f58:	80 83       	st	Z, r24
    2f5a:	de 01       	movw	r26, r28
    2f5c:	ad 59       	subi	r26, 0x9D	; 157
    2f5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f60:	fe 01       	movw	r30, r28
    2f62:	e9 59       	subi	r30, 0x99	; 153
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	80 81       	ld	r24, Z
    2f68:	91 81       	ldd	r25, Z+1	; 0x01
    2f6a:	11 96       	adiw	r26, 0x01	; 1
    2f6c:	9c 93       	st	X, r25
    2f6e:	8e 93       	st	-X, r24
    2f70:	fe 01       	movw	r30, r28
    2f72:	ed 59       	subi	r30, 0x9D	; 157
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	80 81       	ld	r24, Z
    2f78:	91 81       	ldd	r25, Z+1	; 0x01
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <CreateSystemPassword+0x37e>
    2f7e:	fe 01       	movw	r30, r28
    2f80:	ed 59       	subi	r30, 0x9D	; 157
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	91 83       	std	Z+1, r25	; 0x01
    2f86:	80 83       	st	Z, r24
		}
		/*
		 * waiting to get enter '=' from user to confirm
		 * */
		uint8 enter_value;
		while(enter_value!='='){
    2f88:	fe 01       	movw	r30, r28
    2f8a:	e1 58       	subi	r30, 0x81	; 129
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	80 81       	ld	r24, Z
    2f90:	8d 33       	cpi	r24, 0x3D	; 61
    2f92:	09 f0       	breq	.+2      	; 0x2f96 <CreateSystemPassword+0x39a>
    2f94:	3f cf       	rjmp	.-386    	; 0x2e14 <CreateSystemPassword+0x218>
			_delay_ms(200);
		}
		/* clear the screen of lcd
		 * ask the user to re-enter password
		 * */
		LCD_clearScreen();
    2f96:	0e 94 86 11 	call	0x230c	; 0x230c <LCD_clearScreen>
		LCD_displayString("Plz re-enter the");
    2f9a:	85 e7       	ldi	r24, 0x75	; 117
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_displayString>
		LCD_moveCursor(1,0);
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	60 e0       	ldi	r22, 0x00	; 0
    2fa6:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_moveCursor>
		LCD_displayString("same Pass: ");
    2faa:	86 e8       	ldi	r24, 0x86	; 134
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_displayString>
		for(i=0;i<5;i++){
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	ec 57       	subi	r30, 0x7C	; 124
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	10 82       	st	Z, r1
    2fba:	da c0       	rjmp	.+436    	; 0x3170 <CreateSystemPassword+0x574>
			re_enter=re_enter*10+KEYPAD_getPressedKey();
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	ee 57       	subi	r30, 0x7E	; 126
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	80 81       	ld	r24, Z
    2fc4:	91 81       	ldd	r25, Z+1	; 0x01
    2fc6:	9c 01       	movw	r18, r24
    2fc8:	22 0f       	add	r18, r18
    2fca:	33 1f       	adc	r19, r19
    2fcc:	c9 01       	movw	r24, r18
    2fce:	88 0f       	add	r24, r24
    2fd0:	99 1f       	adc	r25, r25
    2fd2:	88 0f       	add	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	89 01       	movw	r16, r18
    2fd8:	08 0f       	add	r16, r24
    2fda:	19 1f       	adc	r17, r25
    2fdc:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2fe0:	88 2f       	mov	r24, r24
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	ee 57       	subi	r30, 0x7E	; 126
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	80 0f       	add	r24, r16
    2fec:	91 1f       	adc	r25, r17
    2fee:	91 83       	std	Z+1, r25	; 0x01
    2ff0:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    2ff2:	8a e2       	ldi	r24, 0x2A	; 42
    2ff4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayCharacter>
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	e1 5a       	subi	r30, 0xA1	; 161
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	a8 e4       	ldi	r26, 0x48	; 72
    3004:	b3 e4       	ldi	r27, 0x43	; 67
    3006:	80 83       	st	Z, r24
    3008:	91 83       	std	Z+1, r25	; 0x01
    300a:	a2 83       	std	Z+2, r26	; 0x02
    300c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    300e:	8e 01       	movw	r16, r28
    3010:	05 5a       	subi	r16, 0xA5	; 165
    3012:	1f 4f       	sbci	r17, 0xFF	; 255
    3014:	fe 01       	movw	r30, r28
    3016:	e1 5a       	subi	r30, 0xA1	; 161
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	60 81       	ld	r22, Z
    301c:	71 81       	ldd	r23, Z+1	; 0x01
    301e:	82 81       	ldd	r24, Z+2	; 0x02
    3020:	93 81       	ldd	r25, Z+3	; 0x03
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	4a e7       	ldi	r20, 0x7A	; 122
    3028:	55 e4       	ldi	r21, 0x45	; 69
    302a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	f8 01       	movw	r30, r16
    3034:	80 83       	st	Z, r24
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	a2 83       	std	Z+2, r26	; 0x02
    303a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    303c:	fe 01       	movw	r30, r28
    303e:	e5 5a       	subi	r30, 0xA5	; 165
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	60 81       	ld	r22, Z
    3044:	71 81       	ldd	r23, Z+1	; 0x01
    3046:	82 81       	ldd	r24, Z+2	; 0x02
    3048:	93 81       	ldd	r25, Z+3	; 0x03
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	40 e8       	ldi	r20, 0x80	; 128
    3050:	5f e3       	ldi	r21, 0x3F	; 63
    3052:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3056:	88 23       	and	r24, r24
    3058:	44 f4       	brge	.+16     	; 0x306a <CreateSystemPassword+0x46e>
		__ticks = 1;
    305a:	fe 01       	movw	r30, r28
    305c:	e7 5a       	subi	r30, 0xA7	; 167
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	80 83       	st	Z, r24
    3068:	64 c0       	rjmp	.+200    	; 0x3132 <CreateSystemPassword+0x536>
	else if (__tmp > 65535)
    306a:	fe 01       	movw	r30, r28
    306c:	e5 5a       	subi	r30, 0xA5	; 165
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	60 81       	ld	r22, Z
    3072:	71 81       	ldd	r23, Z+1	; 0x01
    3074:	82 81       	ldd	r24, Z+2	; 0x02
    3076:	93 81       	ldd	r25, Z+3	; 0x03
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	3f ef       	ldi	r19, 0xFF	; 255
    307c:	4f e7       	ldi	r20, 0x7F	; 127
    307e:	57 e4       	ldi	r21, 0x47	; 71
    3080:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3084:	18 16       	cp	r1, r24
    3086:	0c f0       	brlt	.+2      	; 0x308a <CreateSystemPassword+0x48e>
    3088:	43 c0       	rjmp	.+134    	; 0x3110 <CreateSystemPassword+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308a:	fe 01       	movw	r30, r28
    308c:	e1 5a       	subi	r30, 0xA1	; 161
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	60 81       	ld	r22, Z
    3092:	71 81       	ldd	r23, Z+1	; 0x01
    3094:	82 81       	ldd	r24, Z+2	; 0x02
    3096:	93 81       	ldd	r25, Z+3	; 0x03
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e2       	ldi	r20, 0x20	; 32
    309e:	51 e4       	ldi	r21, 0x41	; 65
    30a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	8e 01       	movw	r16, r28
    30aa:	07 5a       	subi	r16, 0xA7	; 167
    30ac:	1f 4f       	sbci	r17, 0xFF	; 255
    30ae:	bc 01       	movw	r22, r24
    30b0:	cd 01       	movw	r24, r26
    30b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	f8 01       	movw	r30, r16
    30bc:	91 83       	std	Z+1, r25	; 0x01
    30be:	80 83       	st	Z, r24
    30c0:	1f c0       	rjmp	.+62     	; 0x3100 <CreateSystemPassword+0x504>
    30c2:	fe 01       	movw	r30, r28
    30c4:	e9 5a       	subi	r30, 0xA9	; 169
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	80 e9       	ldi	r24, 0x90	; 144
    30ca:	91 e0       	ldi	r25, 0x01	; 1
    30cc:	91 83       	std	Z+1, r25	; 0x01
    30ce:	80 83       	st	Z, r24
    30d0:	fe 01       	movw	r30, r28
    30d2:	e9 5a       	subi	r30, 0xA9	; 169
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	80 81       	ld	r24, Z
    30d8:	91 81       	ldd	r25, Z+1	; 0x01
    30da:	01 97       	sbiw	r24, 0x01	; 1
    30dc:	f1 f7       	brne	.-4      	; 0x30da <CreateSystemPassword+0x4de>
    30de:	fe 01       	movw	r30, r28
    30e0:	e9 5a       	subi	r30, 0xA9	; 169
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	91 83       	std	Z+1, r25	; 0x01
    30e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e8:	de 01       	movw	r26, r28
    30ea:	a7 5a       	subi	r26, 0xA7	; 167
    30ec:	bf 4f       	sbci	r27, 0xFF	; 255
    30ee:	fe 01       	movw	r30, r28
    30f0:	e7 5a       	subi	r30, 0xA7	; 167
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	80 81       	ld	r24, Z
    30f6:	91 81       	ldd	r25, Z+1	; 0x01
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	11 96       	adiw	r26, 0x01	; 1
    30fc:	9c 93       	st	X, r25
    30fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3100:	fe 01       	movw	r30, r28
    3102:	e7 5a       	subi	r30, 0xA7	; 167
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	80 81       	ld	r24, Z
    3108:	91 81       	ldd	r25, Z+1	; 0x01
    310a:	00 97       	sbiw	r24, 0x00	; 0
    310c:	d1 f6       	brne	.-76     	; 0x30c2 <CreateSystemPassword+0x4c6>
    310e:	27 c0       	rjmp	.+78     	; 0x315e <CreateSystemPassword+0x562>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3110:	8e 01       	movw	r16, r28
    3112:	07 5a       	subi	r16, 0xA7	; 167
    3114:	1f 4f       	sbci	r17, 0xFF	; 255
    3116:	fe 01       	movw	r30, r28
    3118:	e5 5a       	subi	r30, 0xA5	; 165
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	60 81       	ld	r22, Z
    311e:	71 81       	ldd	r23, Z+1	; 0x01
    3120:	82 81       	ldd	r24, Z+2	; 0x02
    3122:	93 81       	ldd	r25, Z+3	; 0x03
    3124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	f8 01       	movw	r30, r16
    312e:	91 83       	std	Z+1, r25	; 0x01
    3130:	80 83       	st	Z, r24
    3132:	de 01       	movw	r26, r28
    3134:	ab 5a       	subi	r26, 0xAB	; 171
    3136:	bf 4f       	sbci	r27, 0xFF	; 255
    3138:	fe 01       	movw	r30, r28
    313a:	e7 5a       	subi	r30, 0xA7	; 167
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	80 81       	ld	r24, Z
    3140:	91 81       	ldd	r25, Z+1	; 0x01
    3142:	8d 93       	st	X+, r24
    3144:	9c 93       	st	X, r25
    3146:	fe 01       	movw	r30, r28
    3148:	eb 5a       	subi	r30, 0xAB	; 171
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	80 81       	ld	r24, Z
    314e:	91 81       	ldd	r25, Z+1	; 0x01
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	f1 f7       	brne	.-4      	; 0x3150 <CreateSystemPassword+0x554>
    3154:	fe 01       	movw	r30, r28
    3156:	eb 5a       	subi	r30, 0xAB	; 171
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	91 83       	std	Z+1, r25	; 0x01
    315c:	80 83       	st	Z, r24
		 * */
		LCD_clearScreen();
		LCD_displayString("Plz re-enter the");
		LCD_moveCursor(1,0);
		LCD_displayString("same Pass: ");
		for(i=0;i<5;i++){
    315e:	de 01       	movw	r26, r28
    3160:	ac 57       	subi	r26, 0x7C	; 124
    3162:	bf 4f       	sbci	r27, 0xFF	; 255
    3164:	fe 01       	movw	r30, r28
    3166:	ec 57       	subi	r30, 0x7C	; 124
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	80 81       	ld	r24, Z
    316c:	8f 5f       	subi	r24, 0xFF	; 255
    316e:	8c 93       	st	X, r24
    3170:	fe 01       	movw	r30, r28
    3172:	ec 57       	subi	r30, 0x7C	; 124
    3174:	ff 4f       	sbci	r31, 0xFF	; 255
    3176:	80 81       	ld	r24, Z
    3178:	85 30       	cpi	r24, 0x05	; 5
    317a:	08 f4       	brcc	.+2      	; 0x317e <CreateSystemPassword+0x582>
    317c:	1f cf       	rjmp	.-450    	; 0x2fbc <CreateSystemPassword+0x3c0>
			_delay_ms(200);
		}
		/*
		 * waiting to get enter '=' from user to confirm
		 * */
		enter_value=0;
    317e:	fe 01       	movw	r30, r28
    3180:	e1 58       	subi	r30, 0x81	; 129
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	10 82       	st	Z, r1
    3186:	ba c0       	rjmp	.+372    	; 0x32fc <CreateSystemPassword+0x700>
		while(enter_value!='='){
			enter_value=KEYPAD_getPressedKey();
    3188:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    318c:	fe 01       	movw	r30, r28
    318e:	e1 58       	subi	r30, 0x81	; 129
    3190:	ff 4f       	sbci	r31, 0xFF	; 255
    3192:	80 83       	st	Z, r24
    3194:	fe 01       	movw	r30, r28
    3196:	ef 5a       	subi	r30, 0xAF	; 175
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	a8 e4       	ldi	r26, 0x48	; 72
    31a0:	b3 e4       	ldi	r27, 0x43	; 67
    31a2:	80 83       	st	Z, r24
    31a4:	91 83       	std	Z+1, r25	; 0x01
    31a6:	a2 83       	std	Z+2, r26	; 0x02
    31a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31aa:	8e 01       	movw	r16, r28
    31ac:	03 5b       	subi	r16, 0xB3	; 179
    31ae:	1f 4f       	sbci	r17, 0xFF	; 255
    31b0:	fe 01       	movw	r30, r28
    31b2:	ef 5a       	subi	r30, 0xAF	; 175
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	60 81       	ld	r22, Z
    31b8:	71 81       	ldd	r23, Z+1	; 0x01
    31ba:	82 81       	ldd	r24, Z+2	; 0x02
    31bc:	93 81       	ldd	r25, Z+3	; 0x03
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	4a e7       	ldi	r20, 0x7A	; 122
    31c4:	55 e4       	ldi	r21, 0x45	; 69
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	f8 01       	movw	r30, r16
    31d0:	80 83       	st	Z, r24
    31d2:	91 83       	std	Z+1, r25	; 0x01
    31d4:	a2 83       	std	Z+2, r26	; 0x02
    31d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31d8:	fe 01       	movw	r30, r28
    31da:	e3 5b       	subi	r30, 0xB3	; 179
    31dc:	ff 4f       	sbci	r31, 0xFF	; 255
    31de:	60 81       	ld	r22, Z
    31e0:	71 81       	ldd	r23, Z+1	; 0x01
    31e2:	82 81       	ldd	r24, Z+2	; 0x02
    31e4:	93 81       	ldd	r25, Z+3	; 0x03
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 e8       	ldi	r20, 0x80	; 128
    31ec:	5f e3       	ldi	r21, 0x3F	; 63
    31ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31f2:	88 23       	and	r24, r24
    31f4:	44 f4       	brge	.+16     	; 0x3206 <CreateSystemPassword+0x60a>
		__ticks = 1;
    31f6:	fe 01       	movw	r30, r28
    31f8:	e5 5b       	subi	r30, 0xB5	; 181
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	91 83       	std	Z+1, r25	; 0x01
    3202:	80 83       	st	Z, r24
    3204:	64 c0       	rjmp	.+200    	; 0x32ce <CreateSystemPassword+0x6d2>
	else if (__tmp > 65535)
    3206:	fe 01       	movw	r30, r28
    3208:	e3 5b       	subi	r30, 0xB3	; 179
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	60 81       	ld	r22, Z
    320e:	71 81       	ldd	r23, Z+1	; 0x01
    3210:	82 81       	ldd	r24, Z+2	; 0x02
    3212:	93 81       	ldd	r25, Z+3	; 0x03
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	3f ef       	ldi	r19, 0xFF	; 255
    3218:	4f e7       	ldi	r20, 0x7F	; 127
    321a:	57 e4       	ldi	r21, 0x47	; 71
    321c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3220:	18 16       	cp	r1, r24
    3222:	0c f0       	brlt	.+2      	; 0x3226 <CreateSystemPassword+0x62a>
    3224:	43 c0       	rjmp	.+134    	; 0x32ac <CreateSystemPassword+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3226:	fe 01       	movw	r30, r28
    3228:	ef 5a       	subi	r30, 0xAF	; 175
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	60 81       	ld	r22, Z
    322e:	71 81       	ldd	r23, Z+1	; 0x01
    3230:	82 81       	ldd	r24, Z+2	; 0x02
    3232:	93 81       	ldd	r25, Z+3	; 0x03
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e2       	ldi	r20, 0x20	; 32
    323a:	51 e4       	ldi	r21, 0x41	; 65
    323c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	8e 01       	movw	r16, r28
    3246:	05 5b       	subi	r16, 0xB5	; 181
    3248:	1f 4f       	sbci	r17, 0xFF	; 255
    324a:	bc 01       	movw	r22, r24
    324c:	cd 01       	movw	r24, r26
    324e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	f8 01       	movw	r30, r16
    3258:	91 83       	std	Z+1, r25	; 0x01
    325a:	80 83       	st	Z, r24
    325c:	1f c0       	rjmp	.+62     	; 0x329c <CreateSystemPassword+0x6a0>
    325e:	fe 01       	movw	r30, r28
    3260:	e7 5b       	subi	r30, 0xB7	; 183
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	80 e9       	ldi	r24, 0x90	; 144
    3266:	91 e0       	ldi	r25, 0x01	; 1
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	80 83       	st	Z, r24
    326c:	fe 01       	movw	r30, r28
    326e:	e7 5b       	subi	r30, 0xB7	; 183
    3270:	ff 4f       	sbci	r31, 0xFF	; 255
    3272:	80 81       	ld	r24, Z
    3274:	91 81       	ldd	r25, Z+1	; 0x01
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	f1 f7       	brne	.-4      	; 0x3276 <CreateSystemPassword+0x67a>
    327a:	fe 01       	movw	r30, r28
    327c:	e7 5b       	subi	r30, 0xB7	; 183
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	91 83       	std	Z+1, r25	; 0x01
    3282:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3284:	de 01       	movw	r26, r28
    3286:	a5 5b       	subi	r26, 0xB5	; 181
    3288:	bf 4f       	sbci	r27, 0xFF	; 255
    328a:	fe 01       	movw	r30, r28
    328c:	e5 5b       	subi	r30, 0xB5	; 181
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	80 81       	ld	r24, Z
    3292:	91 81       	ldd	r25, Z+1	; 0x01
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	11 96       	adiw	r26, 0x01	; 1
    3298:	9c 93       	st	X, r25
    329a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329c:	fe 01       	movw	r30, r28
    329e:	e5 5b       	subi	r30, 0xB5	; 181
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	80 81       	ld	r24, Z
    32a4:	91 81       	ldd	r25, Z+1	; 0x01
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	d1 f6       	brne	.-76     	; 0x325e <CreateSystemPassword+0x662>
    32aa:	28 c0       	rjmp	.+80     	; 0x32fc <CreateSystemPassword+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ac:	8e 01       	movw	r16, r28
    32ae:	05 5b       	subi	r16, 0xB5	; 181
    32b0:	1f 4f       	sbci	r17, 0xFF	; 255
    32b2:	fe 01       	movw	r30, r28
    32b4:	e3 5b       	subi	r30, 0xB3	; 179
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	60 81       	ld	r22, Z
    32ba:	71 81       	ldd	r23, Z+1	; 0x01
    32bc:	82 81       	ldd	r24, Z+2	; 0x02
    32be:	93 81       	ldd	r25, Z+3	; 0x03
    32c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	f8 01       	movw	r30, r16
    32ca:	91 83       	std	Z+1, r25	; 0x01
    32cc:	80 83       	st	Z, r24
    32ce:	de 01       	movw	r26, r28
    32d0:	a9 5b       	subi	r26, 0xB9	; 185
    32d2:	bf 4f       	sbci	r27, 0xFF	; 255
    32d4:	fe 01       	movw	r30, r28
    32d6:	e5 5b       	subi	r30, 0xB5	; 181
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	80 81       	ld	r24, Z
    32dc:	91 81       	ldd	r25, Z+1	; 0x01
    32de:	11 96       	adiw	r26, 0x01	; 1
    32e0:	9c 93       	st	X, r25
    32e2:	8e 93       	st	-X, r24
    32e4:	fe 01       	movw	r30, r28
    32e6:	e9 5b       	subi	r30, 0xB9	; 185
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	80 81       	ld	r24, Z
    32ec:	91 81       	ldd	r25, Z+1	; 0x01
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	f1 f7       	brne	.-4      	; 0x32ee <CreateSystemPassword+0x6f2>
    32f2:	fe 01       	movw	r30, r28
    32f4:	e9 5b       	subi	r30, 0xB9	; 185
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	91 83       	std	Z+1, r25	; 0x01
    32fa:	80 83       	st	Z, r24
		}
		/*
		 * waiting to get enter '=' from user to confirm
		 * */
		enter_value=0;
		while(enter_value!='='){
    32fc:	fe 01       	movw	r30, r28
    32fe:	e1 58       	subi	r30, 0x81	; 129
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	80 81       	ld	r24, Z
    3304:	8d 33       	cpi	r24, 0x3D	; 61
    3306:	09 f0       	breq	.+2      	; 0x330a <CreateSystemPassword+0x70e>
    3308:	3f cf       	rjmp	.-386    	; 0x3188 <CreateSystemPassword+0x58c>
		}
		/*
		 * send to Control_ECU the entered password
		 * and its re-entered password to check them
		 * */
		if(enter_value=='='){
    330a:	fe 01       	movw	r30, r28
    330c:	e1 58       	subi	r30, 0x81	; 129
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	80 81       	ld	r24, Z
    3312:	8d 33       	cpi	r24, 0x3D	; 61
    3314:	09 f0       	breq	.+2      	; 0x3318 <CreateSystemPassword+0x71c>
    3316:	74 c2       	rjmp	.+1256   	; 0x3800 <CreateSystemPassword+0xc04>
			UART_sendByte(send_first_pass);
    3318:	8f e9       	ldi	r24, 0x9F	; 159
    331a:	0e 94 7f 20 	call	0x40fe	; 0x40fe <UART_sendByte>
    331e:	fe 01       	movw	r30, r28
    3320:	ed 5b       	subi	r30, 0xBD	; 189
    3322:	ff 4f       	sbci	r31, 0xFF	; 255
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	a0 e2       	ldi	r26, 0x20	; 32
    332a:	b1 e4       	ldi	r27, 0x41	; 65
    332c:	80 83       	st	Z, r24
    332e:	91 83       	std	Z+1, r25	; 0x01
    3330:	a2 83       	std	Z+2, r26	; 0x02
    3332:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3334:	8e 01       	movw	r16, r28
    3336:	01 5c       	subi	r16, 0xC1	; 193
    3338:	1f 4f       	sbci	r17, 0xFF	; 255
    333a:	fe 01       	movw	r30, r28
    333c:	ed 5b       	subi	r30, 0xBD	; 189
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	60 81       	ld	r22, Z
    3342:	71 81       	ldd	r23, Z+1	; 0x01
    3344:	82 81       	ldd	r24, Z+2	; 0x02
    3346:	93 81       	ldd	r25, Z+3	; 0x03
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	4a e7       	ldi	r20, 0x7A	; 122
    334e:	55 e4       	ldi	r21, 0x45	; 69
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	f8 01       	movw	r30, r16
    335a:	80 83       	st	Z, r24
    335c:	91 83       	std	Z+1, r25	; 0x01
    335e:	a2 83       	std	Z+2, r26	; 0x02
    3360:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3362:	fe 01       	movw	r30, r28
    3364:	ff 96       	adiw	r30, 0x3f	; 63
    3366:	60 81       	ld	r22, Z
    3368:	71 81       	ldd	r23, Z+1	; 0x01
    336a:	82 81       	ldd	r24, Z+2	; 0x02
    336c:	93 81       	ldd	r25, Z+3	; 0x03
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	40 e8       	ldi	r20, 0x80	; 128
    3374:	5f e3       	ldi	r21, 0x3F	; 63
    3376:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    337a:	88 23       	and	r24, r24
    337c:	2c f4       	brge	.+10     	; 0x3388 <CreateSystemPassword+0x78c>
		__ticks = 1;
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	9e af       	std	Y+62, r25	; 0x3e
    3384:	8d af       	std	Y+61, r24	; 0x3d
    3386:	46 c0       	rjmp	.+140    	; 0x3414 <CreateSystemPassword+0x818>
	else if (__tmp > 65535)
    3388:	fe 01       	movw	r30, r28
    338a:	ff 96       	adiw	r30, 0x3f	; 63
    338c:	60 81       	ld	r22, Z
    338e:	71 81       	ldd	r23, Z+1	; 0x01
    3390:	82 81       	ldd	r24, Z+2	; 0x02
    3392:	93 81       	ldd	r25, Z+3	; 0x03
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	3f ef       	ldi	r19, 0xFF	; 255
    3398:	4f e7       	ldi	r20, 0x7F	; 127
    339a:	57 e4       	ldi	r21, 0x47	; 71
    339c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33a0:	18 16       	cp	r1, r24
    33a2:	64 f5       	brge	.+88     	; 0x33fc <CreateSystemPassword+0x800>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a4:	fe 01       	movw	r30, r28
    33a6:	ed 5b       	subi	r30, 0xBD	; 189
    33a8:	ff 4f       	sbci	r31, 0xFF	; 255
    33aa:	60 81       	ld	r22, Z
    33ac:	71 81       	ldd	r23, Z+1	; 0x01
    33ae:	82 81       	ldd	r24, Z+2	; 0x02
    33b0:	93 81       	ldd	r25, Z+3	; 0x03
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	40 e2       	ldi	r20, 0x20	; 32
    33b8:	51 e4       	ldi	r21, 0x41	; 65
    33ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	bc 01       	movw	r22, r24
    33c4:	cd 01       	movw	r24, r26
    33c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	9e af       	std	Y+62, r25	; 0x3e
    33d0:	8d af       	std	Y+61, r24	; 0x3d
    33d2:	0f c0       	rjmp	.+30     	; 0x33f2 <CreateSystemPassword+0x7f6>
    33d4:	80 e9       	ldi	r24, 0x90	; 144
    33d6:	91 e0       	ldi	r25, 0x01	; 1
    33d8:	9c af       	std	Y+60, r25	; 0x3c
    33da:	8b af       	std	Y+59, r24	; 0x3b
    33dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    33de:	9c ad       	ldd	r25, Y+60	; 0x3c
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	f1 f7       	brne	.-4      	; 0x33e0 <CreateSystemPassword+0x7e4>
    33e4:	9c af       	std	Y+60, r25	; 0x3c
    33e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    33ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    33ec:	01 97       	sbiw	r24, 0x01	; 1
    33ee:	9e af       	std	Y+62, r25	; 0x3e
    33f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    33f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    33f6:	00 97       	sbiw	r24, 0x00	; 0
    33f8:	69 f7       	brne	.-38     	; 0x33d4 <CreateSystemPassword+0x7d8>
    33fa:	16 c0       	rjmp	.+44     	; 0x3428 <CreateSystemPassword+0x82c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33fc:	fe 01       	movw	r30, r28
    33fe:	ff 96       	adiw	r30, 0x3f	; 63
    3400:	60 81       	ld	r22, Z
    3402:	71 81       	ldd	r23, Z+1	; 0x01
    3404:	82 81       	ldd	r24, Z+2	; 0x02
    3406:	93 81       	ldd	r25, Z+3	; 0x03
    3408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	9e af       	std	Y+62, r25	; 0x3e
    3412:	8d af       	std	Y+61, r24	; 0x3d
    3414:	8d ad       	ldd	r24, Y+61	; 0x3d
    3416:	9e ad       	ldd	r25, Y+62	; 0x3e
    3418:	9a af       	std	Y+58, r25	; 0x3a
    341a:	89 af       	std	Y+57, r24	; 0x39
    341c:	89 ad       	ldd	r24, Y+57	; 0x39
    341e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3420:	01 97       	sbiw	r24, 0x01	; 1
    3422:	f1 f7       	brne	.-4      	; 0x3420 <CreateSystemPassword+0x824>
    3424:	9a af       	std	Y+58, r25	; 0x3a
    3426:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(10);
			UART_sendByte(password>>8);
    3428:	fe 01       	movw	r30, r28
    342a:	e0 58       	subi	r30, 0x80	; 128
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	80 81       	ld	r24, Z
    3430:	91 81       	ldd	r25, Z+1	; 0x01
    3432:	89 2f       	mov	r24, r25
    3434:	99 27       	eor	r25, r25
    3436:	0e 94 7f 20 	call	0x40fe	; 0x40fe <UART_sendByte>
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	a0 e2       	ldi	r26, 0x20	; 32
    3440:	b1 e4       	ldi	r27, 0x41	; 65
    3442:	8d ab       	std	Y+53, r24	; 0x35
    3444:	9e ab       	std	Y+54, r25	; 0x36
    3446:	af ab       	std	Y+55, r26	; 0x37
    3448:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    344a:	6d a9       	ldd	r22, Y+53	; 0x35
    344c:	7e a9       	ldd	r23, Y+54	; 0x36
    344e:	8f a9       	ldd	r24, Y+55	; 0x37
    3450:	98 ad       	ldd	r25, Y+56	; 0x38
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	4a e7       	ldi	r20, 0x7A	; 122
    3458:	55 e4       	ldi	r21, 0x45	; 69
    345a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	89 ab       	std	Y+49, r24	; 0x31
    3464:	9a ab       	std	Y+50, r25	; 0x32
    3466:	ab ab       	std	Y+51, r26	; 0x33
    3468:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    346a:	69 a9       	ldd	r22, Y+49	; 0x31
    346c:	7a a9       	ldd	r23, Y+50	; 0x32
    346e:	8b a9       	ldd	r24, Y+51	; 0x33
    3470:	9c a9       	ldd	r25, Y+52	; 0x34
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	40 e8       	ldi	r20, 0x80	; 128
    3478:	5f e3       	ldi	r21, 0x3F	; 63
    347a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    347e:	88 23       	and	r24, r24
    3480:	2c f4       	brge	.+10     	; 0x348c <CreateSystemPassword+0x890>
		__ticks = 1;
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	98 ab       	std	Y+48, r25	; 0x30
    3488:	8f a7       	std	Y+47, r24	; 0x2f
    348a:	3f c0       	rjmp	.+126    	; 0x350a <CreateSystemPassword+0x90e>
	else if (__tmp > 65535)
    348c:	69 a9       	ldd	r22, Y+49	; 0x31
    348e:	7a a9       	ldd	r23, Y+50	; 0x32
    3490:	8b a9       	ldd	r24, Y+51	; 0x33
    3492:	9c a9       	ldd	r25, Y+52	; 0x34
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	3f ef       	ldi	r19, 0xFF	; 255
    3498:	4f e7       	ldi	r20, 0x7F	; 127
    349a:	57 e4       	ldi	r21, 0x47	; 71
    349c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34a0:	18 16       	cp	r1, r24
    34a2:	4c f5       	brge	.+82     	; 0x34f6 <CreateSystemPassword+0x8fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a4:	6d a9       	ldd	r22, Y+53	; 0x35
    34a6:	7e a9       	ldd	r23, Y+54	; 0x36
    34a8:	8f a9       	ldd	r24, Y+55	; 0x37
    34aa:	98 ad       	ldd	r25, Y+56	; 0x38
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	40 e2       	ldi	r20, 0x20	; 32
    34b2:	51 e4       	ldi	r21, 0x41	; 65
    34b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	bc 01       	movw	r22, r24
    34be:	cd 01       	movw	r24, r26
    34c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	98 ab       	std	Y+48, r25	; 0x30
    34ca:	8f a7       	std	Y+47, r24	; 0x2f
    34cc:	0f c0       	rjmp	.+30     	; 0x34ec <CreateSystemPassword+0x8f0>
    34ce:	80 e9       	ldi	r24, 0x90	; 144
    34d0:	91 e0       	ldi	r25, 0x01	; 1
    34d2:	9e a7       	std	Y+46, r25	; 0x2e
    34d4:	8d a7       	std	Y+45, r24	; 0x2d
    34d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    34d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	f1 f7       	brne	.-4      	; 0x34da <CreateSystemPassword+0x8de>
    34de:	9e a7       	std	Y+46, r25	; 0x2e
    34e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    34e4:	98 a9       	ldd	r25, Y+48	; 0x30
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	98 ab       	std	Y+48, r25	; 0x30
    34ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    34ee:	98 a9       	ldd	r25, Y+48	; 0x30
    34f0:	00 97       	sbiw	r24, 0x00	; 0
    34f2:	69 f7       	brne	.-38     	; 0x34ce <CreateSystemPassword+0x8d2>
    34f4:	14 c0       	rjmp	.+40     	; 0x351e <CreateSystemPassword+0x922>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f6:	69 a9       	ldd	r22, Y+49	; 0x31
    34f8:	7a a9       	ldd	r23, Y+50	; 0x32
    34fa:	8b a9       	ldd	r24, Y+51	; 0x33
    34fc:	9c a9       	ldd	r25, Y+52	; 0x34
    34fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	98 ab       	std	Y+48, r25	; 0x30
    3508:	8f a7       	std	Y+47, r24	; 0x2f
    350a:	8f a5       	ldd	r24, Y+47	; 0x2f
    350c:	98 a9       	ldd	r25, Y+48	; 0x30
    350e:	9c a7       	std	Y+44, r25	; 0x2c
    3510:	8b a7       	std	Y+43, r24	; 0x2b
    3512:	8b a5       	ldd	r24, Y+43	; 0x2b
    3514:	9c a5       	ldd	r25, Y+44	; 0x2c
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	f1 f7       	brne	.-4      	; 0x3516 <CreateSystemPassword+0x91a>
    351a:	9c a7       	std	Y+44, r25	; 0x2c
    351c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			UART_sendByte(password&0x00ff);
    351e:	fe 01       	movw	r30, r28
    3520:	e0 58       	subi	r30, 0x80	; 128
    3522:	ff 4f       	sbci	r31, 0xFF	; 255
    3524:	80 81       	ld	r24, Z
    3526:	0e 94 7f 20 	call	0x40fe	; 0x40fe <UART_sendByte>
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	a0 e2       	ldi	r26, 0x20	; 32
    3530:	b1 e4       	ldi	r27, 0x41	; 65
    3532:	8f a3       	std	Y+39, r24	; 0x27
    3534:	98 a7       	std	Y+40, r25	; 0x28
    3536:	a9 a7       	std	Y+41, r26	; 0x29
    3538:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353a:	6f a1       	ldd	r22, Y+39	; 0x27
    353c:	78 a5       	ldd	r23, Y+40	; 0x28
    353e:	89 a5       	ldd	r24, Y+41	; 0x29
    3540:	9a a5       	ldd	r25, Y+42	; 0x2a
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	4a e7       	ldi	r20, 0x7A	; 122
    3548:	55 e4       	ldi	r21, 0x45	; 69
    354a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	8b a3       	std	Y+35, r24	; 0x23
    3554:	9c a3       	std	Y+36, r25	; 0x24
    3556:	ad a3       	std	Y+37, r26	; 0x25
    3558:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    355a:	6b a1       	ldd	r22, Y+35	; 0x23
    355c:	7c a1       	ldd	r23, Y+36	; 0x24
    355e:	8d a1       	ldd	r24, Y+37	; 0x25
    3560:	9e a1       	ldd	r25, Y+38	; 0x26
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e8       	ldi	r20, 0x80	; 128
    3568:	5f e3       	ldi	r21, 0x3F	; 63
    356a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    356e:	88 23       	and	r24, r24
    3570:	2c f4       	brge	.+10     	; 0x357c <CreateSystemPassword+0x980>
		__ticks = 1;
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	9a a3       	std	Y+34, r25	; 0x22
    3578:	89 a3       	std	Y+33, r24	; 0x21
    357a:	3f c0       	rjmp	.+126    	; 0x35fa <CreateSystemPassword+0x9fe>
	else if (__tmp > 65535)
    357c:	6b a1       	ldd	r22, Y+35	; 0x23
    357e:	7c a1       	ldd	r23, Y+36	; 0x24
    3580:	8d a1       	ldd	r24, Y+37	; 0x25
    3582:	9e a1       	ldd	r25, Y+38	; 0x26
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	3f ef       	ldi	r19, 0xFF	; 255
    3588:	4f e7       	ldi	r20, 0x7F	; 127
    358a:	57 e4       	ldi	r21, 0x47	; 71
    358c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3590:	18 16       	cp	r1, r24
    3592:	4c f5       	brge	.+82     	; 0x35e6 <CreateSystemPassword+0x9ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3594:	6f a1       	ldd	r22, Y+39	; 0x27
    3596:	78 a5       	ldd	r23, Y+40	; 0x28
    3598:	89 a5       	ldd	r24, Y+41	; 0x29
    359a:	9a a5       	ldd	r25, Y+42	; 0x2a
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	40 e2       	ldi	r20, 0x20	; 32
    35a2:	51 e4       	ldi	r21, 0x41	; 65
    35a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	bc 01       	movw	r22, r24
    35ae:	cd 01       	movw	r24, r26
    35b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	9a a3       	std	Y+34, r25	; 0x22
    35ba:	89 a3       	std	Y+33, r24	; 0x21
    35bc:	0f c0       	rjmp	.+30     	; 0x35dc <CreateSystemPassword+0x9e0>
    35be:	80 e9       	ldi	r24, 0x90	; 144
    35c0:	91 e0       	ldi	r25, 0x01	; 1
    35c2:	98 a3       	std	Y+32, r25	; 0x20
    35c4:	8f 8f       	std	Y+31, r24	; 0x1f
    35c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35c8:	98 a1       	ldd	r25, Y+32	; 0x20
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	f1 f7       	brne	.-4      	; 0x35ca <CreateSystemPassword+0x9ce>
    35ce:	98 a3       	std	Y+32, r25	; 0x20
    35d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d2:	89 a1       	ldd	r24, Y+33	; 0x21
    35d4:	9a a1       	ldd	r25, Y+34	; 0x22
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	9a a3       	std	Y+34, r25	; 0x22
    35da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35dc:	89 a1       	ldd	r24, Y+33	; 0x21
    35de:	9a a1       	ldd	r25, Y+34	; 0x22
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	69 f7       	brne	.-38     	; 0x35be <CreateSystemPassword+0x9c2>
    35e4:	14 c0       	rjmp	.+40     	; 0x360e <CreateSystemPassword+0xa12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e6:	6b a1       	ldd	r22, Y+35	; 0x23
    35e8:	7c a1       	ldd	r23, Y+36	; 0x24
    35ea:	8d a1       	ldd	r24, Y+37	; 0x25
    35ec:	9e a1       	ldd	r25, Y+38	; 0x26
    35ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	9a a3       	std	Y+34, r25	; 0x22
    35f8:	89 a3       	std	Y+33, r24	; 0x21
    35fa:	89 a1       	ldd	r24, Y+33	; 0x21
    35fc:	9a a1       	ldd	r25, Y+34	; 0x22
    35fe:	9e 8f       	std	Y+30, r25	; 0x1e
    3600:	8d 8f       	std	Y+29, r24	; 0x1d
    3602:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3604:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	f1 f7       	brne	.-4      	; 0x3606 <CreateSystemPassword+0xa0a>
    360a:	9e 8f       	std	Y+30, r25	; 0x1e
    360c:	8d 8f       	std	Y+29, r24	; 0x1d


			_delay_ms(10);
			UART_sendByte(re_enter>>8);
    360e:	fe 01       	movw	r30, r28
    3610:	ee 57       	subi	r30, 0x7E	; 126
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	80 81       	ld	r24, Z
    3616:	91 81       	ldd	r25, Z+1	; 0x01
    3618:	89 2f       	mov	r24, r25
    361a:	99 27       	eor	r25, r25
    361c:	0e 94 7f 20 	call	0x40fe	; 0x40fe <UART_sendByte>
    3620:	80 e0       	ldi	r24, 0x00	; 0
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	a0 e2       	ldi	r26, 0x20	; 32
    3626:	b1 e4       	ldi	r27, 0x41	; 65
    3628:	89 8f       	std	Y+25, r24	; 0x19
    362a:	9a 8f       	std	Y+26, r25	; 0x1a
    362c:	ab 8f       	std	Y+27, r26	; 0x1b
    362e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3630:	69 8d       	ldd	r22, Y+25	; 0x19
    3632:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3634:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3636:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	4a e7       	ldi	r20, 0x7A	; 122
    363e:	55 e4       	ldi	r21, 0x45	; 69
    3640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	8d 8b       	std	Y+21, r24	; 0x15
    364a:	9e 8b       	std	Y+22, r25	; 0x16
    364c:	af 8b       	std	Y+23, r26	; 0x17
    364e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3650:	6d 89       	ldd	r22, Y+21	; 0x15
    3652:	7e 89       	ldd	r23, Y+22	; 0x16
    3654:	8f 89       	ldd	r24, Y+23	; 0x17
    3656:	98 8d       	ldd	r25, Y+24	; 0x18
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	40 e8       	ldi	r20, 0x80	; 128
    365e:	5f e3       	ldi	r21, 0x3F	; 63
    3660:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3664:	88 23       	and	r24, r24
    3666:	2c f4       	brge	.+10     	; 0x3672 <CreateSystemPassword+0xa76>
		__ticks = 1;
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	9c 8b       	std	Y+20, r25	; 0x14
    366e:	8b 8b       	std	Y+19, r24	; 0x13
    3670:	3f c0       	rjmp	.+126    	; 0x36f0 <CreateSystemPassword+0xaf4>
	else if (__tmp > 65535)
    3672:	6d 89       	ldd	r22, Y+21	; 0x15
    3674:	7e 89       	ldd	r23, Y+22	; 0x16
    3676:	8f 89       	ldd	r24, Y+23	; 0x17
    3678:	98 8d       	ldd	r25, Y+24	; 0x18
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	3f ef       	ldi	r19, 0xFF	; 255
    367e:	4f e7       	ldi	r20, 0x7F	; 127
    3680:	57 e4       	ldi	r21, 0x47	; 71
    3682:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3686:	18 16       	cp	r1, r24
    3688:	4c f5       	brge	.+82     	; 0x36dc <CreateSystemPassword+0xae0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    368a:	69 8d       	ldd	r22, Y+25	; 0x19
    368c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    368e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3690:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	40 e2       	ldi	r20, 0x20	; 32
    3698:	51 e4       	ldi	r21, 0x41	; 65
    369a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369e:	dc 01       	movw	r26, r24
    36a0:	cb 01       	movw	r24, r22
    36a2:	bc 01       	movw	r22, r24
    36a4:	cd 01       	movw	r24, r26
    36a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	9c 8b       	std	Y+20, r25	; 0x14
    36b0:	8b 8b       	std	Y+19, r24	; 0x13
    36b2:	0f c0       	rjmp	.+30     	; 0x36d2 <CreateSystemPassword+0xad6>
    36b4:	80 e9       	ldi	r24, 0x90	; 144
    36b6:	91 e0       	ldi	r25, 0x01	; 1
    36b8:	9a 8b       	std	Y+18, r25	; 0x12
    36ba:	89 8b       	std	Y+17, r24	; 0x11
    36bc:	89 89       	ldd	r24, Y+17	; 0x11
    36be:	9a 89       	ldd	r25, Y+18	; 0x12
    36c0:	01 97       	sbiw	r24, 0x01	; 1
    36c2:	f1 f7       	brne	.-4      	; 0x36c0 <CreateSystemPassword+0xac4>
    36c4:	9a 8b       	std	Y+18, r25	; 0x12
    36c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c8:	8b 89       	ldd	r24, Y+19	; 0x13
    36ca:	9c 89       	ldd	r25, Y+20	; 0x14
    36cc:	01 97       	sbiw	r24, 0x01	; 1
    36ce:	9c 8b       	std	Y+20, r25	; 0x14
    36d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d2:	8b 89       	ldd	r24, Y+19	; 0x13
    36d4:	9c 89       	ldd	r25, Y+20	; 0x14
    36d6:	00 97       	sbiw	r24, 0x00	; 0
    36d8:	69 f7       	brne	.-38     	; 0x36b4 <CreateSystemPassword+0xab8>
    36da:	14 c0       	rjmp	.+40     	; 0x3704 <CreateSystemPassword+0xb08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36dc:	6d 89       	ldd	r22, Y+21	; 0x15
    36de:	7e 89       	ldd	r23, Y+22	; 0x16
    36e0:	8f 89       	ldd	r24, Y+23	; 0x17
    36e2:	98 8d       	ldd	r25, Y+24	; 0x18
    36e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	9c 8b       	std	Y+20, r25	; 0x14
    36ee:	8b 8b       	std	Y+19, r24	; 0x13
    36f0:	8b 89       	ldd	r24, Y+19	; 0x13
    36f2:	9c 89       	ldd	r25, Y+20	; 0x14
    36f4:	98 8b       	std	Y+16, r25	; 0x10
    36f6:	8f 87       	std	Y+15, r24	; 0x0f
    36f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36fa:	98 89       	ldd	r25, Y+16	; 0x10
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	f1 f7       	brne	.-4      	; 0x36fc <CreateSystemPassword+0xb00>
    3700:	98 8b       	std	Y+16, r25	; 0x10
    3702:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			UART_sendByte(re_enter&0x00ff);
    3704:	fe 01       	movw	r30, r28
    3706:	ee 57       	subi	r30, 0x7E	; 126
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	80 81       	ld	r24, Z
    370c:	0e 94 7f 20 	call	0x40fe	; 0x40fe <UART_sendByte>
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	a0 e2       	ldi	r26, 0x20	; 32
    3716:	b1 e4       	ldi	r27, 0x41	; 65
    3718:	8b 87       	std	Y+11, r24	; 0x0b
    371a:	9c 87       	std	Y+12, r25	; 0x0c
    371c:	ad 87       	std	Y+13, r26	; 0x0d
    371e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3720:	6b 85       	ldd	r22, Y+11	; 0x0b
    3722:	7c 85       	ldd	r23, Y+12	; 0x0c
    3724:	8d 85       	ldd	r24, Y+13	; 0x0d
    3726:	9e 85       	ldd	r25, Y+14	; 0x0e
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	4a e7       	ldi	r20, 0x7A	; 122
    372e:	55 e4       	ldi	r21, 0x45	; 69
    3730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3734:	dc 01       	movw	r26, r24
    3736:	cb 01       	movw	r24, r22
    3738:	8f 83       	std	Y+7, r24	; 0x07
    373a:	98 87       	std	Y+8, r25	; 0x08
    373c:	a9 87       	std	Y+9, r26	; 0x09
    373e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3740:	6f 81       	ldd	r22, Y+7	; 0x07
    3742:	78 85       	ldd	r23, Y+8	; 0x08
    3744:	89 85       	ldd	r24, Y+9	; 0x09
    3746:	9a 85       	ldd	r25, Y+10	; 0x0a
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	40 e8       	ldi	r20, 0x80	; 128
    374e:	5f e3       	ldi	r21, 0x3F	; 63
    3750:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3754:	88 23       	and	r24, r24
    3756:	2c f4       	brge	.+10     	; 0x3762 <CreateSystemPassword+0xb66>
		__ticks = 1;
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	9e 83       	std	Y+6, r25	; 0x06
    375e:	8d 83       	std	Y+5, r24	; 0x05
    3760:	3f c0       	rjmp	.+126    	; 0x37e0 <CreateSystemPassword+0xbe4>
	else if (__tmp > 65535)
    3762:	6f 81       	ldd	r22, Y+7	; 0x07
    3764:	78 85       	ldd	r23, Y+8	; 0x08
    3766:	89 85       	ldd	r24, Y+9	; 0x09
    3768:	9a 85       	ldd	r25, Y+10	; 0x0a
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	3f ef       	ldi	r19, 0xFF	; 255
    376e:	4f e7       	ldi	r20, 0x7F	; 127
    3770:	57 e4       	ldi	r21, 0x47	; 71
    3772:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3776:	18 16       	cp	r1, r24
    3778:	4c f5       	brge	.+82     	; 0x37cc <CreateSystemPassword+0xbd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377a:	6b 85       	ldd	r22, Y+11	; 0x0b
    377c:	7c 85       	ldd	r23, Y+12	; 0x0c
    377e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3780:	9e 85       	ldd	r25, Y+14	; 0x0e
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	40 e2       	ldi	r20, 0x20	; 32
    3788:	51 e4       	ldi	r21, 0x41	; 65
    378a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	bc 01       	movw	r22, r24
    3794:	cd 01       	movw	r24, r26
    3796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379a:	dc 01       	movw	r26, r24
    379c:	cb 01       	movw	r24, r22
    379e:	9e 83       	std	Y+6, r25	; 0x06
    37a0:	8d 83       	std	Y+5, r24	; 0x05
    37a2:	0f c0       	rjmp	.+30     	; 0x37c2 <CreateSystemPassword+0xbc6>
    37a4:	80 e9       	ldi	r24, 0x90	; 144
    37a6:	91 e0       	ldi	r25, 0x01	; 1
    37a8:	9c 83       	std	Y+4, r25	; 0x04
    37aa:	8b 83       	std	Y+3, r24	; 0x03
    37ac:	8b 81       	ldd	r24, Y+3	; 0x03
    37ae:	9c 81       	ldd	r25, Y+4	; 0x04
    37b0:	01 97       	sbiw	r24, 0x01	; 1
    37b2:	f1 f7       	brne	.-4      	; 0x37b0 <CreateSystemPassword+0xbb4>
    37b4:	9c 83       	std	Y+4, r25	; 0x04
    37b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37b8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ba:	9e 81       	ldd	r25, Y+6	; 0x06
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	9e 83       	std	Y+6, r25	; 0x06
    37c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c2:	8d 81       	ldd	r24, Y+5	; 0x05
    37c4:	9e 81       	ldd	r25, Y+6	; 0x06
    37c6:	00 97       	sbiw	r24, 0x00	; 0
    37c8:	69 f7       	brne	.-38     	; 0x37a4 <CreateSystemPassword+0xba8>
    37ca:	14 c0       	rjmp	.+40     	; 0x37f4 <CreateSystemPassword+0xbf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37cc:	6f 81       	ldd	r22, Y+7	; 0x07
    37ce:	78 85       	ldd	r23, Y+8	; 0x08
    37d0:	89 85       	ldd	r24, Y+9	; 0x09
    37d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	9e 83       	std	Y+6, r25	; 0x06
    37de:	8d 83       	std	Y+5, r24	; 0x05
    37e0:	8d 81       	ldd	r24, Y+5	; 0x05
    37e2:	9e 81       	ldd	r25, Y+6	; 0x06
    37e4:	9a 83       	std	Y+2, r25	; 0x02
    37e6:	89 83       	std	Y+1, r24	; 0x01
    37e8:	89 81       	ldd	r24, Y+1	; 0x01
    37ea:	9a 81       	ldd	r25, Y+2	; 0x02
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	f1 f7       	brne	.-4      	; 0x37ec <CreateSystemPassword+0xbf0>
    37f0:	9a 83       	std	Y+2, r25	; 0x02
    37f2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			check=UART_recieveByte();
    37f4:	0e 94 96 20 	call	0x412c	; 0x412c <UART_recieveByte>
    37f8:	fe 01       	movw	r30, r28
    37fa:	eb 57       	subi	r30, 0x7B	; 123
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	80 83       	st	Z, r24
		}
		enter_value=0;
    3800:	fe 01       	movw	r30, r28
    3802:	e1 58       	subi	r30, 0x81	; 129
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	10 82       	st	Z, r1
	}while(check==0);
    3808:	fe 01       	movw	r30, r28
    380a:	eb 57       	subi	r30, 0x7B	; 123
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	80 81       	ld	r24, Z
    3810:	88 23       	and	r24, r24
    3812:	09 f4       	brne	.+2      	; 0x3816 <CreateSystemPassword+0xc1a>
    3814:	00 ca       	rjmp	.-3072   	; 0x2c16 <CreateSystemPassword+0x1a>
	return check;
    3816:	fe 01       	movw	r30, r28
    3818:	eb 57       	subi	r30, 0x7B	; 123
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	80 81       	ld	r24, Z

}
    381e:	cb 57       	subi	r28, 0x7B	; 123
    3820:	df 4f       	sbci	r29, 0xFF	; 255
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	f8 94       	cli
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	0f be       	out	0x3f, r0	; 63
    382a:	cd bf       	out	0x3d, r28	; 61
    382c:	cf 91       	pop	r28
    382e:	df 91       	pop	r29
    3830:	1f 91       	pop	r17
    3832:	0f 91       	pop	r16
    3834:	08 95       	ret

00003836 <MainOptions>:
/* Main Options List */
void MainOptions(){
    3836:	df 93       	push	r29
    3838:	cf 93       	push	r28
    383a:	cd b7       	in	r28, 0x3d	; 61
    383c:	de b7       	in	r29, 0x3e	; 62
    383e:	2f 97       	sbiw	r28, 0x0f	; 15
    3840:	0f b6       	in	r0, 0x3f	; 63
    3842:	f8 94       	cli
    3844:	de bf       	out	0x3e, r29	; 62
    3846:	0f be       	out	0x3f, r0	; 63
    3848:	cd bf       	out	0x3d, r28	; 61
	/*
	 * display on LCD
	 * Get from user option to open door --> call function OpenDoor()
	 * or to change password -->call function changePassword()
	 * */
	uint8 option_value=0;
    384a:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_clearScreen();
    384c:	0e 94 86 11 	call	0x230c	; 0x230c <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    3850:	82 e9       	ldi	r24, 0x92	; 146
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_displayString>
	LCD_moveCursor(1,0);
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	60 e0       	ldi	r22, 0x00	; 0
    385c:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    3860:	80 ea       	ldi	r24, 0xA0	; 160
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_displayString>

	do{
		option_value=KEYPAD_getPressedKey();
    3868:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    386c:	8f 87       	std	Y+15, r24	; 0x0f
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	a8 e4       	ldi	r26, 0x48	; 72
    3874:	b3 e4       	ldi	r27, 0x43	; 67
    3876:	8b 87       	std	Y+11, r24	; 0x0b
    3878:	9c 87       	std	Y+12, r25	; 0x0c
    387a:	ad 87       	std	Y+13, r26	; 0x0d
    387c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    387e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3880:	7c 85       	ldd	r23, Y+12	; 0x0c
    3882:	8d 85       	ldd	r24, Y+13	; 0x0d
    3884:	9e 85       	ldd	r25, Y+14	; 0x0e
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	4a e7       	ldi	r20, 0x7A	; 122
    388c:	55 e4       	ldi	r21, 0x45	; 69
    388e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3892:	dc 01       	movw	r26, r24
    3894:	cb 01       	movw	r24, r22
    3896:	8f 83       	std	Y+7, r24	; 0x07
    3898:	98 87       	std	Y+8, r25	; 0x08
    389a:	a9 87       	std	Y+9, r26	; 0x09
    389c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    389e:	6f 81       	ldd	r22, Y+7	; 0x07
    38a0:	78 85       	ldd	r23, Y+8	; 0x08
    38a2:	89 85       	ldd	r24, Y+9	; 0x09
    38a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a6:	20 e0       	ldi	r18, 0x00	; 0
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	40 e8       	ldi	r20, 0x80	; 128
    38ac:	5f e3       	ldi	r21, 0x3F	; 63
    38ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38b2:	88 23       	and	r24, r24
    38b4:	2c f4       	brge	.+10     	; 0x38c0 <MainOptions+0x8a>
		__ticks = 1;
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	9e 83       	std	Y+6, r25	; 0x06
    38bc:	8d 83       	std	Y+5, r24	; 0x05
    38be:	3f c0       	rjmp	.+126    	; 0x393e <MainOptions+0x108>
	else if (__tmp > 65535)
    38c0:	6f 81       	ldd	r22, Y+7	; 0x07
    38c2:	78 85       	ldd	r23, Y+8	; 0x08
    38c4:	89 85       	ldd	r24, Y+9	; 0x09
    38c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c8:	20 e0       	ldi	r18, 0x00	; 0
    38ca:	3f ef       	ldi	r19, 0xFF	; 255
    38cc:	4f e7       	ldi	r20, 0x7F	; 127
    38ce:	57 e4       	ldi	r21, 0x47	; 71
    38d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38d4:	18 16       	cp	r1, r24
    38d6:	4c f5       	brge	.+82     	; 0x392a <MainOptions+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    38da:	7c 85       	ldd	r23, Y+12	; 0x0c
    38dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    38de:	9e 85       	ldd	r25, Y+14	; 0x0e
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	40 e2       	ldi	r20, 0x20	; 32
    38e6:	51 e4       	ldi	r21, 0x41	; 65
    38e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ec:	dc 01       	movw	r26, r24
    38ee:	cb 01       	movw	r24, r22
    38f0:	bc 01       	movw	r22, r24
    38f2:	cd 01       	movw	r24, r26
    38f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f8:	dc 01       	movw	r26, r24
    38fa:	cb 01       	movw	r24, r22
    38fc:	9e 83       	std	Y+6, r25	; 0x06
    38fe:	8d 83       	std	Y+5, r24	; 0x05
    3900:	0f c0       	rjmp	.+30     	; 0x3920 <MainOptions+0xea>
    3902:	80 e9       	ldi	r24, 0x90	; 144
    3904:	91 e0       	ldi	r25, 0x01	; 1
    3906:	9c 83       	std	Y+4, r25	; 0x04
    3908:	8b 83       	std	Y+3, r24	; 0x03
    390a:	8b 81       	ldd	r24, Y+3	; 0x03
    390c:	9c 81       	ldd	r25, Y+4	; 0x04
    390e:	01 97       	sbiw	r24, 0x01	; 1
    3910:	f1 f7       	brne	.-4      	; 0x390e <MainOptions+0xd8>
    3912:	9c 83       	std	Y+4, r25	; 0x04
    3914:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3916:	8d 81       	ldd	r24, Y+5	; 0x05
    3918:	9e 81       	ldd	r25, Y+6	; 0x06
    391a:	01 97       	sbiw	r24, 0x01	; 1
    391c:	9e 83       	std	Y+6, r25	; 0x06
    391e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3920:	8d 81       	ldd	r24, Y+5	; 0x05
    3922:	9e 81       	ldd	r25, Y+6	; 0x06
    3924:	00 97       	sbiw	r24, 0x00	; 0
    3926:	69 f7       	brne	.-38     	; 0x3902 <MainOptions+0xcc>
    3928:	14 c0       	rjmp	.+40     	; 0x3952 <MainOptions+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    392a:	6f 81       	ldd	r22, Y+7	; 0x07
    392c:	78 85       	ldd	r23, Y+8	; 0x08
    392e:	89 85       	ldd	r24, Y+9	; 0x09
    3930:	9a 85       	ldd	r25, Y+10	; 0x0a
    3932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3936:	dc 01       	movw	r26, r24
    3938:	cb 01       	movw	r24, r22
    393a:	9e 83       	std	Y+6, r25	; 0x06
    393c:	8d 83       	std	Y+5, r24	; 0x05
    393e:	8d 81       	ldd	r24, Y+5	; 0x05
    3940:	9e 81       	ldd	r25, Y+6	; 0x06
    3942:	9a 83       	std	Y+2, r25	; 0x02
    3944:	89 83       	std	Y+1, r24	; 0x01
    3946:	89 81       	ldd	r24, Y+1	; 0x01
    3948:	9a 81       	ldd	r25, Y+2	; 0x02
    394a:	01 97       	sbiw	r24, 0x01	; 1
    394c:	f1 f7       	brne	.-4      	; 0x394a <MainOptions+0x114>
    394e:	9a 83       	std	Y+2, r25	; 0x02
    3950:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
	}while(option_value!='+' && option_value!='-');
    3952:	8f 85       	ldd	r24, Y+15	; 0x0f
    3954:	8b 32       	cpi	r24, 0x2B	; 43
    3956:	21 f0       	breq	.+8      	; 0x3960 <MainOptions+0x12a>
    3958:	8f 85       	ldd	r24, Y+15	; 0x0f
    395a:	8d 32       	cpi	r24, 0x2D	; 45
    395c:	09 f0       	breq	.+2      	; 0x3960 <MainOptions+0x12a>
    395e:	84 cf       	rjmp	.-248    	; 0x3868 <MainOptions+0x32>

	if(option_value=='+'){
    3960:	8f 85       	ldd	r24, Y+15	; 0x0f
    3962:	8b 32       	cpi	r24, 0x2B	; 43
    3964:	19 f4       	brne	.+6      	; 0x396c <MainOptions+0x136>
		OpenDoor();
    3966:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <OpenDoor>
    396a:	05 c0       	rjmp	.+10     	; 0x3976 <MainOptions+0x140>
	}else if(option_value=='-'){
    396c:	8f 85       	ldd	r24, Y+15	; 0x0f
    396e:	8d 32       	cpi	r24, 0x2D	; 45
    3970:	11 f4       	brne	.+4      	; 0x3976 <MainOptions+0x140>
		ChangePassword();
    3972:	0e 94 c4 1c 	call	0x3988	; 0x3988 <ChangePassword>
	}
}
    3976:	2f 96       	adiw	r28, 0x0f	; 15
    3978:	0f b6       	in	r0, 0x3f	; 63
    397a:	f8 94       	cli
    397c:	de bf       	out	0x3e, r29	; 62
    397e:	0f be       	out	0x3f, r0	; 63
    3980:	cd bf       	out	0x3d, r28	; 61
    3982:	cf 91       	pop	r28
    3984:	df 91       	pop	r29
    3986:	08 95       	ret

00003988 <ChangePassword>:
/*Change Password */
void ChangePassword(){
    3988:	df 93       	push	r29
    398a:	cf 93       	push	r28
    398c:	cd b7       	in	r28, 0x3d	; 61
    398e:	de b7       	in	r29, 0x3e	; 62
	/*ask user to enter old password and check its correction
	 * then call function create password
	 * */
	if(checkPasswordCorrection()){
    3990:	0e 94 56 1d 	call	0x3aac	; 0x3aac <checkPasswordCorrection>
    3994:	88 23       	and	r24, r24
    3996:	11 f0       	breq	.+4      	; 0x399c <ChangePassword+0x14>
		CreateSystemPassword();
    3998:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <CreateSystemPassword>
	}
}
    399c:	cf 91       	pop	r28
    399e:	df 91       	pop	r29
    39a0:	08 95       	ret

000039a2 <OpenDoor>:
/* Open Door Function */
void OpenDoor(){
    39a2:	df 93       	push	r29
    39a4:	cf 93       	push	r28
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	2b 97       	sbiw	r28, 0x0b	; 11
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
	/* Check the correctness of password then */
	if(checkPasswordCorrection()){
    39b6:	0e 94 56 1d 	call	0x3aac	; 0x3aac <checkPasswordCorrection>
    39ba:	88 23       	and	r24, r24
    39bc:	09 f4       	brne	.+2      	; 0x39c0 <OpenDoor+0x1e>
    39be:	6d c0       	rjmp	.+218    	; 0x3a9a <OpenDoor+0xf8>
		LCD_clearScreen();
    39c0:	0e 94 86 11 	call	0x230c	; 0x230c <LCD_clearScreen>
		LCD_displayString("Door's Unlocking");
    39c4:	80 eb       	ldi	r24, 0xB0	; 176
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_displayString>
		 * start value =0
		 * compare value = 31250  --> count 1 sec
		 * prescalar = 256
		 * mode of time is compare mode
		 * */
		UART_sendByte(rotate_motor_CW);  /*Send to Control mc to rotate clock wise */
    39cc:	8f ee       	ldi	r24, 0xEF	; 239
    39ce:	0e 94 7f 20 	call	0x40fe	; 0x40fe <UART_sendByte>
		Timer1_ConfigType config_timer1={0,31250,CLOCK_256,CTC};
    39d2:	ce 01       	movw	r24, r28
    39d4:	01 96       	adiw	r24, 0x01	; 1
    39d6:	98 87       	std	Y+8, r25	; 0x08
    39d8:	8f 83       	std	Y+7, r24	; 0x07
    39da:	ee e0       	ldi	r30, 0x0E	; 14
    39dc:	f1 e0       	ldi	r31, 0x01	; 1
    39de:	fa 87       	std	Y+10, r31	; 0x0a
    39e0:	e9 87       	std	Y+9, r30	; 0x09
    39e2:	f6 e0       	ldi	r31, 0x06	; 6
    39e4:	fb 87       	std	Y+11, r31	; 0x0b
    39e6:	e9 85       	ldd	r30, Y+9	; 0x09
    39e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    39ea:	00 80       	ld	r0, Z
    39ec:	89 85       	ldd	r24, Y+9	; 0x09
    39ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f0:	01 96       	adiw	r24, 0x01	; 1
    39f2:	9a 87       	std	Y+10, r25	; 0x0a
    39f4:	89 87       	std	Y+9, r24	; 0x09
    39f6:	ef 81       	ldd	r30, Y+7	; 0x07
    39f8:	f8 85       	ldd	r31, Y+8	; 0x08
    39fa:	00 82       	st	Z, r0
    39fc:	8f 81       	ldd	r24, Y+7	; 0x07
    39fe:	98 85       	ldd	r25, Y+8	; 0x08
    3a00:	01 96       	adiw	r24, 0x01	; 1
    3a02:	98 87       	std	Y+8, r25	; 0x08
    3a04:	8f 83       	std	Y+7, r24	; 0x07
    3a06:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a08:	91 50       	subi	r25, 0x01	; 1
    3a0a:	9b 87       	std	Y+11, r25	; 0x0b
    3a0c:	eb 85       	ldd	r30, Y+11	; 0x0b
    3a0e:	ee 23       	and	r30, r30
    3a10:	51 f7       	brne	.-44     	; 0x39e6 <OpenDoor+0x44>
		Timer1_setCallBack(motorCW_callback);
    3a12:	80 ee       	ldi	r24, 0xE0	; 224
    3a14:	9f e1       	ldi	r25, 0x1F	; 31
    3a16:	0e 94 40 12 	call	0x2480	; 0x2480 <Timer1_setCallBack>
		Timer1_init(&config_timer1);
    3a1a:	ce 01       	movw	r24, r28
    3a1c:	01 96       	adiw	r24, 0x01	; 1
    3a1e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <Timer1_init>
		/*waiting for timer to count 15 sec*/
		while(g_locking!=15);
    3a22:	80 91 1c 01 	lds	r24, 0x011C
    3a26:	8f 30       	cpi	r24, 0x0F	; 15
    3a28:	e1 f7       	brne	.-8      	; 0x3a22 <OpenDoor+0x80>
		g_locking=0;
    3a2a:	10 92 1c 01 	sts	0x011C, r1
		/*stop timer*/
		Timer1_deInit();
    3a2e:	0e 94 52 12 	call	0x24a4	; 0x24a4 <Timer1_deInit>

		LCD_clearScreen();
    3a32:	0e 94 86 11 	call	0x230c	; 0x230c <LCD_clearScreen>
		LCD_displayString("Door is Open");
    3a36:	81 ec       	ldi	r24, 0xC1	; 193
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_displayString>
		/*
		 * Turn on timer to count 3 sec for holding
		 * Set call back function
		 * Send to Control mc to hold the door
		 *  */
		UART_sendByte(motor_Hold);
    3a3e:	8f e1       	ldi	r24, 0x1F	; 31
    3a40:	0e 94 7f 20 	call	0x40fe	; 0x40fe <UART_sendByte>
		Timer1_setCallBack(motorhold_callback);
    3a44:	8c ee       	ldi	r24, 0xEC	; 236
    3a46:	9f e1       	ldi	r25, 0x1F	; 31
    3a48:	0e 94 40 12 	call	0x2480	; 0x2480 <Timer1_setCallBack>
		Timer1_init(&config_timer1);
    3a4c:	ce 01       	movw	r24, r28
    3a4e:	01 96       	adiw	r24, 0x01	; 1
    3a50:	0e 94 f6 11 	call	0x23ec	; 0x23ec <Timer1_init>
		/*waiting for timer to count 3 sec*/
		while(g_holding!=3);
    3a54:	80 91 1d 01 	lds	r24, 0x011D
    3a58:	83 30       	cpi	r24, 0x03	; 3
    3a5a:	e1 f7       	brne	.-8      	; 0x3a54 <OpenDoor+0xb2>
		g_holding=0;
    3a5c:	10 92 1d 01 	sts	0x011D, r1
		/*stop timer*/
		Timer1_deInit();
    3a60:	0e 94 52 12 	call	0x24a4	; 0x24a4 <Timer1_deInit>

		LCD_clearScreen();
    3a64:	0e 94 86 11 	call	0x230c	; 0x230c <LCD_clearScreen>
		LCD_displayString("Door is locking");
    3a68:	8e ec       	ldi	r24, 0xCE	; 206
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_displayString>
		/*
		 * Turn on timer to count 15 sec for closing
		 * Set call back function
		 * Send to Control mc to rotate motor anti clockwise for closing
		 *  */
		UART_sendByte(ROTATE_MOTOR_ACW);
    3a70:	8f ed       	ldi	r24, 0xDF	; 223
    3a72:	0e 94 7f 20 	call	0x40fe	; 0x40fe <UART_sendByte>
		Timer1_setCallBack(motorACW_callback);
    3a76:	88 ef       	ldi	r24, 0xF8	; 248
    3a78:	9f e1       	ldi	r25, 0x1F	; 31
    3a7a:	0e 94 40 12 	call	0x2480	; 0x2480 <Timer1_setCallBack>
		Timer1_init(&config_timer1);
    3a7e:	ce 01       	movw	r24, r28
    3a80:	01 96       	adiw	r24, 0x01	; 1
    3a82:	0e 94 f6 11 	call	0x23ec	; 0x23ec <Timer1_init>
		/*waiting for timer to count 15 sec*/
		while(g_unlocking!=15);
    3a86:	80 91 1e 01 	lds	r24, 0x011E
    3a8a:	8f 30       	cpi	r24, 0x0F	; 15
    3a8c:	e1 f7       	brne	.-8      	; 0x3a86 <OpenDoor+0xe4>
		g_unlocking=0;
    3a8e:	10 92 1e 01 	sts	0x011E, r1
		/*stop timer*/
		Timer1_deInit();
    3a92:	0e 94 52 12 	call	0x24a4	; 0x24a4 <Timer1_deInit>

		LCD_clearScreen();
    3a96:	0e 94 86 11 	call	0x230c	; 0x230c <LCD_clearScreen>
	}
}
    3a9a:	2b 96       	adiw	r28, 0x0b	; 11
    3a9c:	0f b6       	in	r0, 0x3f	; 63
    3a9e:	f8 94       	cli
    3aa0:	de bf       	out	0x3e, r29	; 62
    3aa2:	0f be       	out	0x3f, r0	; 63
    3aa4:	cd bf       	out	0x3d, r28	; 61
    3aa6:	cf 91       	pop	r28
    3aa8:	df 91       	pop	r29
    3aaa:	08 95       	ret

00003aac <checkPasswordCorrection>:
/*Check password entered by user */
uint8 checkPasswordCorrection(){
    3aac:	0f 93       	push	r16
    3aae:	1f 93       	push	r17
    3ab0:	df 93       	push	r29
    3ab2:	cf 93       	push	r28
    3ab4:	cd b7       	in	r28, 0x3d	; 61
    3ab6:	de b7       	in	r29, 0x3e	; 62
    3ab8:	c9 54       	subi	r28, 0x49	; 73
    3aba:	d0 40       	sbci	r29, 0x00	; 0
    3abc:	0f b6       	in	r0, 0x3f	; 63
    3abe:	f8 94       	cli
    3ac0:	de bf       	out	0x3e, r29	; 62
    3ac2:	0f be       	out	0x3f, r0	; 63
    3ac4:	cd bf       	out	0x3d, r28	; 61
	 * send the password to control_ECU to check the password in EEPROM memory
	 * recieve an checking correction from control_ECU correct or incorrect
	 * it will give the user a plenty for 3 attempts only
	 * */
	uint8 RecievedValue;
	uint8 iterator_incorrect_password=0;
    3ac6:	1d ae       	std	Y+61, r1	; 0x3d
	do{
		LCD_clearScreen();
    3ac8:	0e 94 86 11 	call	0x230c	; 0x230c <LCD_clearScreen>
		LCD_displayString("Plz Enter Pass:");
    3acc:	8e ed       	ldi	r24, 0xDE	; 222
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_displayString>
		LCD_moveCursor(1,0);
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	60 e0       	ldi	r22, 0x00	; 0
    3ad8:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_moveCursor>
		uint16 password=0;
    3adc:	1c ae       	std	Y+60, r1	; 0x3c
    3ade:	1b ae       	std	Y+59, r1	; 0x3b
		uint8 i;
		for(i=0;i<5;i++){
    3ae0:	1a ae       	std	Y+58, r1	; 0x3a
    3ae2:	8d c0       	rjmp	.+282    	; 0x3bfe <checkPasswordCorrection+0x152>
			password=password*10+KEYPAD_getPressedKey();
    3ae4:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ae6:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ae8:	9c 01       	movw	r18, r24
    3aea:	22 0f       	add	r18, r18
    3aec:	33 1f       	adc	r19, r19
    3aee:	c9 01       	movw	r24, r18
    3af0:	88 0f       	add	r24, r24
    3af2:	99 1f       	adc	r25, r25
    3af4:	88 0f       	add	r24, r24
    3af6:	99 1f       	adc	r25, r25
    3af8:	89 01       	movw	r16, r18
    3afa:	08 0f       	add	r16, r24
    3afc:	19 1f       	adc	r17, r25
    3afe:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    3b02:	88 2f       	mov	r24, r24
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	80 0f       	add	r24, r16
    3b08:	91 1f       	adc	r25, r17
    3b0a:	9c af       	std	Y+60, r25	; 0x3c
    3b0c:	8b af       	std	Y+59, r24	; 0x3b
			LCD_displayCharacter('*');
    3b0e:	8a e2       	ldi	r24, 0x2A	; 42
    3b10:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayCharacter>
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	a8 e4       	ldi	r26, 0x48	; 72
    3b1a:	b3 e4       	ldi	r27, 0x43	; 67
    3b1c:	8d ab       	std	Y+53, r24	; 0x35
    3b1e:	9e ab       	std	Y+54, r25	; 0x36
    3b20:	af ab       	std	Y+55, r26	; 0x37
    3b22:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b24:	6d a9       	ldd	r22, Y+53	; 0x35
    3b26:	7e a9       	ldd	r23, Y+54	; 0x36
    3b28:	8f a9       	ldd	r24, Y+55	; 0x37
    3b2a:	98 ad       	ldd	r25, Y+56	; 0x38
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	4a e7       	ldi	r20, 0x7A	; 122
    3b32:	55 e4       	ldi	r21, 0x45	; 69
    3b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	89 ab       	std	Y+49, r24	; 0x31
    3b3e:	9a ab       	std	Y+50, r25	; 0x32
    3b40:	ab ab       	std	Y+51, r26	; 0x33
    3b42:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b44:	69 a9       	ldd	r22, Y+49	; 0x31
    3b46:	7a a9       	ldd	r23, Y+50	; 0x32
    3b48:	8b a9       	ldd	r24, Y+51	; 0x33
    3b4a:	9c a9       	ldd	r25, Y+52	; 0x34
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	40 e8       	ldi	r20, 0x80	; 128
    3b52:	5f e3       	ldi	r21, 0x3F	; 63
    3b54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b58:	88 23       	and	r24, r24
    3b5a:	2c f4       	brge	.+10     	; 0x3b66 <checkPasswordCorrection+0xba>
		__ticks = 1;
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	98 ab       	std	Y+48, r25	; 0x30
    3b62:	8f a7       	std	Y+47, r24	; 0x2f
    3b64:	3f c0       	rjmp	.+126    	; 0x3be4 <checkPasswordCorrection+0x138>
	else if (__tmp > 65535)
    3b66:	69 a9       	ldd	r22, Y+49	; 0x31
    3b68:	7a a9       	ldd	r23, Y+50	; 0x32
    3b6a:	8b a9       	ldd	r24, Y+51	; 0x33
    3b6c:	9c a9       	ldd	r25, Y+52	; 0x34
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	3f ef       	ldi	r19, 0xFF	; 255
    3b72:	4f e7       	ldi	r20, 0x7F	; 127
    3b74:	57 e4       	ldi	r21, 0x47	; 71
    3b76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b7a:	18 16       	cp	r1, r24
    3b7c:	4c f5       	brge	.+82     	; 0x3bd0 <checkPasswordCorrection+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b7e:	6d a9       	ldd	r22, Y+53	; 0x35
    3b80:	7e a9       	ldd	r23, Y+54	; 0x36
    3b82:	8f a9       	ldd	r24, Y+55	; 0x37
    3b84:	98 ad       	ldd	r25, Y+56	; 0x38
    3b86:	20 e0       	ldi	r18, 0x00	; 0
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	40 e2       	ldi	r20, 0x20	; 32
    3b8c:	51 e4       	ldi	r21, 0x41	; 65
    3b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	bc 01       	movw	r22, r24
    3b98:	cd 01       	movw	r24, r26
    3b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	98 ab       	std	Y+48, r25	; 0x30
    3ba4:	8f a7       	std	Y+47, r24	; 0x2f
    3ba6:	0f c0       	rjmp	.+30     	; 0x3bc6 <checkPasswordCorrection+0x11a>
    3ba8:	80 e9       	ldi	r24, 0x90	; 144
    3baa:	91 e0       	ldi	r25, 0x01	; 1
    3bac:	9e a7       	std	Y+46, r25	; 0x2e
    3bae:	8d a7       	std	Y+45, r24	; 0x2d
    3bb0:	8d a5       	ldd	r24, Y+45	; 0x2d
    3bb2:	9e a5       	ldd	r25, Y+46	; 0x2e
    3bb4:	01 97       	sbiw	r24, 0x01	; 1
    3bb6:	f1 f7       	brne	.-4      	; 0x3bb4 <checkPasswordCorrection+0x108>
    3bb8:	9e a7       	std	Y+46, r25	; 0x2e
    3bba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bbe:	98 a9       	ldd	r25, Y+48	; 0x30
    3bc0:	01 97       	sbiw	r24, 0x01	; 1
    3bc2:	98 ab       	std	Y+48, r25	; 0x30
    3bc4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bc8:	98 a9       	ldd	r25, Y+48	; 0x30
    3bca:	00 97       	sbiw	r24, 0x00	; 0
    3bcc:	69 f7       	brne	.-38     	; 0x3ba8 <checkPasswordCorrection+0xfc>
    3bce:	14 c0       	rjmp	.+40     	; 0x3bf8 <checkPasswordCorrection+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd0:	69 a9       	ldd	r22, Y+49	; 0x31
    3bd2:	7a a9       	ldd	r23, Y+50	; 0x32
    3bd4:	8b a9       	ldd	r24, Y+51	; 0x33
    3bd6:	9c a9       	ldd	r25, Y+52	; 0x34
    3bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bdc:	dc 01       	movw	r26, r24
    3bde:	cb 01       	movw	r24, r22
    3be0:	98 ab       	std	Y+48, r25	; 0x30
    3be2:	8f a7       	std	Y+47, r24	; 0x2f
    3be4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3be6:	98 a9       	ldd	r25, Y+48	; 0x30
    3be8:	9c a7       	std	Y+44, r25	; 0x2c
    3bea:	8b a7       	std	Y+43, r24	; 0x2b
    3bec:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bee:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bf0:	01 97       	sbiw	r24, 0x01	; 1
    3bf2:	f1 f7       	brne	.-4      	; 0x3bf0 <checkPasswordCorrection+0x144>
    3bf4:	9c a7       	std	Y+44, r25	; 0x2c
    3bf6:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_clearScreen();
		LCD_displayString("Plz Enter Pass:");
		LCD_moveCursor(1,0);
		uint16 password=0;
		uint8 i;
		for(i=0;i<5;i++){
    3bf8:	8a ad       	ldd	r24, Y+58	; 0x3a
    3bfa:	8f 5f       	subi	r24, 0xFF	; 255
    3bfc:	8a af       	std	Y+58, r24	; 0x3a
    3bfe:	8a ad       	ldd	r24, Y+58	; 0x3a
    3c00:	85 30       	cpi	r24, 0x05	; 5
    3c02:	08 f4       	brcc	.+2      	; 0x3c06 <checkPasswordCorrection+0x15a>
    3c04:	6f cf       	rjmp	.-290    	; 0x3ae4 <checkPasswordCorrection+0x38>
    3c06:	75 c0       	rjmp	.+234    	; 0x3cf2 <checkPasswordCorrection+0x246>
		/*
		 * waiting to get enter '=' from user to confirm
		 * */
		uint8 enter_value;
		while(enter_value!='='){
			enter_value=KEYPAD_getPressedKey();
    3c08:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    3c0c:	89 af       	std	Y+57, r24	; 0x39
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	a8 e4       	ldi	r26, 0x48	; 72
    3c14:	b3 e4       	ldi	r27, 0x43	; 67
    3c16:	8f a3       	std	Y+39, r24	; 0x27
    3c18:	98 a7       	std	Y+40, r25	; 0x28
    3c1a:	a9 a7       	std	Y+41, r26	; 0x29
    3c1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c1e:	6f a1       	ldd	r22, Y+39	; 0x27
    3c20:	78 a5       	ldd	r23, Y+40	; 0x28
    3c22:	89 a5       	ldd	r24, Y+41	; 0x29
    3c24:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	4a e7       	ldi	r20, 0x7A	; 122
    3c2c:	55 e4       	ldi	r21, 0x45	; 69
    3c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	8b a3       	std	Y+35, r24	; 0x23
    3c38:	9c a3       	std	Y+36, r25	; 0x24
    3c3a:	ad a3       	std	Y+37, r26	; 0x25
    3c3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c3e:	6b a1       	ldd	r22, Y+35	; 0x23
    3c40:	7c a1       	ldd	r23, Y+36	; 0x24
    3c42:	8d a1       	ldd	r24, Y+37	; 0x25
    3c44:	9e a1       	ldd	r25, Y+38	; 0x26
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	40 e8       	ldi	r20, 0x80	; 128
    3c4c:	5f e3       	ldi	r21, 0x3F	; 63
    3c4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c52:	88 23       	and	r24, r24
    3c54:	2c f4       	brge	.+10     	; 0x3c60 <checkPasswordCorrection+0x1b4>
		__ticks = 1;
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	9a a3       	std	Y+34, r25	; 0x22
    3c5c:	89 a3       	std	Y+33, r24	; 0x21
    3c5e:	3f c0       	rjmp	.+126    	; 0x3cde <checkPasswordCorrection+0x232>
	else if (__tmp > 65535)
    3c60:	6b a1       	ldd	r22, Y+35	; 0x23
    3c62:	7c a1       	ldd	r23, Y+36	; 0x24
    3c64:	8d a1       	ldd	r24, Y+37	; 0x25
    3c66:	9e a1       	ldd	r25, Y+38	; 0x26
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	3f ef       	ldi	r19, 0xFF	; 255
    3c6c:	4f e7       	ldi	r20, 0x7F	; 127
    3c6e:	57 e4       	ldi	r21, 0x47	; 71
    3c70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c74:	18 16       	cp	r1, r24
    3c76:	4c f5       	brge	.+82     	; 0x3cca <checkPasswordCorrection+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c78:	6f a1       	ldd	r22, Y+39	; 0x27
    3c7a:	78 a5       	ldd	r23, Y+40	; 0x28
    3c7c:	89 a5       	ldd	r24, Y+41	; 0x29
    3c7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	40 e2       	ldi	r20, 0x20	; 32
    3c86:	51 e4       	ldi	r21, 0x41	; 65
    3c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	bc 01       	movw	r22, r24
    3c92:	cd 01       	movw	r24, r26
    3c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	9a a3       	std	Y+34, r25	; 0x22
    3c9e:	89 a3       	std	Y+33, r24	; 0x21
    3ca0:	0f c0       	rjmp	.+30     	; 0x3cc0 <checkPasswordCorrection+0x214>
    3ca2:	80 e9       	ldi	r24, 0x90	; 144
    3ca4:	91 e0       	ldi	r25, 0x01	; 1
    3ca6:	98 a3       	std	Y+32, r25	; 0x20
    3ca8:	8f 8f       	std	Y+31, r24	; 0x1f
    3caa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3cac:	98 a1       	ldd	r25, Y+32	; 0x20
    3cae:	01 97       	sbiw	r24, 0x01	; 1
    3cb0:	f1 f7       	brne	.-4      	; 0x3cae <checkPasswordCorrection+0x202>
    3cb2:	98 a3       	std	Y+32, r25	; 0x20
    3cb4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb6:	89 a1       	ldd	r24, Y+33	; 0x21
    3cb8:	9a a1       	ldd	r25, Y+34	; 0x22
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	9a a3       	std	Y+34, r25	; 0x22
    3cbe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cc0:	89 a1       	ldd	r24, Y+33	; 0x21
    3cc2:	9a a1       	ldd	r25, Y+34	; 0x22
    3cc4:	00 97       	sbiw	r24, 0x00	; 0
    3cc6:	69 f7       	brne	.-38     	; 0x3ca2 <checkPasswordCorrection+0x1f6>
    3cc8:	14 c0       	rjmp	.+40     	; 0x3cf2 <checkPasswordCorrection+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cca:	6b a1       	ldd	r22, Y+35	; 0x23
    3ccc:	7c a1       	ldd	r23, Y+36	; 0x24
    3cce:	8d a1       	ldd	r24, Y+37	; 0x25
    3cd0:	9e a1       	ldd	r25, Y+38	; 0x26
    3cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	9a a3       	std	Y+34, r25	; 0x22
    3cdc:	89 a3       	std	Y+33, r24	; 0x21
    3cde:	89 a1       	ldd	r24, Y+33	; 0x21
    3ce0:	9a a1       	ldd	r25, Y+34	; 0x22
    3ce2:	9e 8f       	std	Y+30, r25	; 0x1e
    3ce4:	8d 8f       	std	Y+29, r24	; 0x1d
    3ce6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ce8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3cea:	01 97       	sbiw	r24, 0x01	; 1
    3cec:	f1 f7       	brne	.-4      	; 0x3cea <checkPasswordCorrection+0x23e>
    3cee:	9e 8f       	std	Y+30, r25	; 0x1e
    3cf0:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		/*
		 * waiting to get enter '=' from user to confirm
		 * */
		uint8 enter_value;
		while(enter_value!='='){
    3cf2:	89 ad       	ldd	r24, Y+57	; 0x39
    3cf4:	8d 33       	cpi	r24, 0x3D	; 61
    3cf6:	09 f0       	breq	.+2      	; 0x3cfa <checkPasswordCorrection+0x24e>
    3cf8:	87 cf       	rjmp	.-242    	; 0x3c08 <checkPasswordCorrection+0x15c>
			enter_value=KEYPAD_getPressedKey();
			_delay_ms(200);
		}

		UART_sendByte(Check_Password);
    3cfa:	8f ef       	ldi	r24, 0xFF	; 255
    3cfc:	0e 94 7f 20 	call	0x40fe	; 0x40fe <UART_sendByte>
    3d00:	80 e0       	ldi	r24, 0x00	; 0
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	a0 e2       	ldi	r26, 0x20	; 32
    3d06:	b1 e4       	ldi	r27, 0x41	; 65
    3d08:	89 8f       	std	Y+25, r24	; 0x19
    3d0a:	9a 8f       	std	Y+26, r25	; 0x1a
    3d0c:	ab 8f       	std	Y+27, r26	; 0x1b
    3d0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d10:	69 8d       	ldd	r22, Y+25	; 0x19
    3d12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d18:	20 e0       	ldi	r18, 0x00	; 0
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	4a e7       	ldi	r20, 0x7A	; 122
    3d1e:	55 e4       	ldi	r21, 0x45	; 69
    3d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	8d 8b       	std	Y+21, r24	; 0x15
    3d2a:	9e 8b       	std	Y+22, r25	; 0x16
    3d2c:	af 8b       	std	Y+23, r26	; 0x17
    3d2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d30:	6d 89       	ldd	r22, Y+21	; 0x15
    3d32:	7e 89       	ldd	r23, Y+22	; 0x16
    3d34:	8f 89       	ldd	r24, Y+23	; 0x17
    3d36:	98 8d       	ldd	r25, Y+24	; 0x18
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	40 e8       	ldi	r20, 0x80	; 128
    3d3e:	5f e3       	ldi	r21, 0x3F	; 63
    3d40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d44:	88 23       	and	r24, r24
    3d46:	2c f4       	brge	.+10     	; 0x3d52 <checkPasswordCorrection+0x2a6>
		__ticks = 1;
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	9c 8b       	std	Y+20, r25	; 0x14
    3d4e:	8b 8b       	std	Y+19, r24	; 0x13
    3d50:	3f c0       	rjmp	.+126    	; 0x3dd0 <checkPasswordCorrection+0x324>
	else if (__tmp > 65535)
    3d52:	6d 89       	ldd	r22, Y+21	; 0x15
    3d54:	7e 89       	ldd	r23, Y+22	; 0x16
    3d56:	8f 89       	ldd	r24, Y+23	; 0x17
    3d58:	98 8d       	ldd	r25, Y+24	; 0x18
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	3f ef       	ldi	r19, 0xFF	; 255
    3d5e:	4f e7       	ldi	r20, 0x7F	; 127
    3d60:	57 e4       	ldi	r21, 0x47	; 71
    3d62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d66:	18 16       	cp	r1, r24
    3d68:	4c f5       	brge	.+82     	; 0x3dbc <checkPasswordCorrection+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d6a:	69 8d       	ldd	r22, Y+25	; 0x19
    3d6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	40 e2       	ldi	r20, 0x20	; 32
    3d78:	51 e4       	ldi	r21, 0x41	; 65
    3d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	cb 01       	movw	r24, r22
    3d82:	bc 01       	movw	r22, r24
    3d84:	cd 01       	movw	r24, r26
    3d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	9c 8b       	std	Y+20, r25	; 0x14
    3d90:	8b 8b       	std	Y+19, r24	; 0x13
    3d92:	0f c0       	rjmp	.+30     	; 0x3db2 <checkPasswordCorrection+0x306>
    3d94:	80 e9       	ldi	r24, 0x90	; 144
    3d96:	91 e0       	ldi	r25, 0x01	; 1
    3d98:	9a 8b       	std	Y+18, r25	; 0x12
    3d9a:	89 8b       	std	Y+17, r24	; 0x11
    3d9c:	89 89       	ldd	r24, Y+17	; 0x11
    3d9e:	9a 89       	ldd	r25, Y+18	; 0x12
    3da0:	01 97       	sbiw	r24, 0x01	; 1
    3da2:	f1 f7       	brne	.-4      	; 0x3da0 <checkPasswordCorrection+0x2f4>
    3da4:	9a 8b       	std	Y+18, r25	; 0x12
    3da6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3da8:	8b 89       	ldd	r24, Y+19	; 0x13
    3daa:	9c 89       	ldd	r25, Y+20	; 0x14
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	9c 8b       	std	Y+20, r25	; 0x14
    3db0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3db2:	8b 89       	ldd	r24, Y+19	; 0x13
    3db4:	9c 89       	ldd	r25, Y+20	; 0x14
    3db6:	00 97       	sbiw	r24, 0x00	; 0
    3db8:	69 f7       	brne	.-38     	; 0x3d94 <checkPasswordCorrection+0x2e8>
    3dba:	14 c0       	rjmp	.+40     	; 0x3de4 <checkPasswordCorrection+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dbc:	6d 89       	ldd	r22, Y+21	; 0x15
    3dbe:	7e 89       	ldd	r23, Y+22	; 0x16
    3dc0:	8f 89       	ldd	r24, Y+23	; 0x17
    3dc2:	98 8d       	ldd	r25, Y+24	; 0x18
    3dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	9c 8b       	std	Y+20, r25	; 0x14
    3dce:	8b 8b       	std	Y+19, r24	; 0x13
    3dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    3dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    3dd4:	98 8b       	std	Y+16, r25	; 0x10
    3dd6:	8f 87       	std	Y+15, r24	; 0x0f
    3dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dda:	98 89       	ldd	r25, Y+16	; 0x10
    3ddc:	01 97       	sbiw	r24, 0x01	; 1
    3dde:	f1 f7       	brne	.-4      	; 0x3ddc <checkPasswordCorrection+0x330>
    3de0:	98 8b       	std	Y+16, r25	; 0x10
    3de2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		UART_sendByte(password>>8);
    3de4:	8b ad       	ldd	r24, Y+59	; 0x3b
    3de6:	9c ad       	ldd	r25, Y+60	; 0x3c
    3de8:	89 2f       	mov	r24, r25
    3dea:	99 27       	eor	r25, r25
    3dec:	0e 94 7f 20 	call	0x40fe	; 0x40fe <UART_sendByte>
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	a0 e2       	ldi	r26, 0x20	; 32
    3df6:	b1 e4       	ldi	r27, 0x41	; 65
    3df8:	8b 87       	std	Y+11, r24	; 0x0b
    3dfa:	9c 87       	std	Y+12, r25	; 0x0c
    3dfc:	ad 87       	std	Y+13, r26	; 0x0d
    3dfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e00:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e02:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	4a e7       	ldi	r20, 0x7A	; 122
    3e0e:	55 e4       	ldi	r21, 0x45	; 69
    3e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	8f 83       	std	Y+7, r24	; 0x07
    3e1a:	98 87       	std	Y+8, r25	; 0x08
    3e1c:	a9 87       	std	Y+9, r26	; 0x09
    3e1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e20:	6f 81       	ldd	r22, Y+7	; 0x07
    3e22:	78 85       	ldd	r23, Y+8	; 0x08
    3e24:	89 85       	ldd	r24, Y+9	; 0x09
    3e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	40 e8       	ldi	r20, 0x80	; 128
    3e2e:	5f e3       	ldi	r21, 0x3F	; 63
    3e30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e34:	88 23       	and	r24, r24
    3e36:	2c f4       	brge	.+10     	; 0x3e42 <checkPasswordCorrection+0x396>
		__ticks = 1;
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	9e 83       	std	Y+6, r25	; 0x06
    3e3e:	8d 83       	std	Y+5, r24	; 0x05
    3e40:	3f c0       	rjmp	.+126    	; 0x3ec0 <checkPasswordCorrection+0x414>
	else if (__tmp > 65535)
    3e42:	6f 81       	ldd	r22, Y+7	; 0x07
    3e44:	78 85       	ldd	r23, Y+8	; 0x08
    3e46:	89 85       	ldd	r24, Y+9	; 0x09
    3e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e4a:	20 e0       	ldi	r18, 0x00	; 0
    3e4c:	3f ef       	ldi	r19, 0xFF	; 255
    3e4e:	4f e7       	ldi	r20, 0x7F	; 127
    3e50:	57 e4       	ldi	r21, 0x47	; 71
    3e52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e56:	18 16       	cp	r1, r24
    3e58:	4c f5       	brge	.+82     	; 0x3eac <checkPasswordCorrection+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e60:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	40 e2       	ldi	r20, 0x20	; 32
    3e68:	51 e4       	ldi	r21, 0x41	; 65
    3e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	bc 01       	movw	r22, r24
    3e74:	cd 01       	movw	r24, r26
    3e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	9e 83       	std	Y+6, r25	; 0x06
    3e80:	8d 83       	std	Y+5, r24	; 0x05
    3e82:	0f c0       	rjmp	.+30     	; 0x3ea2 <checkPasswordCorrection+0x3f6>
    3e84:	80 e9       	ldi	r24, 0x90	; 144
    3e86:	91 e0       	ldi	r25, 0x01	; 1
    3e88:	9c 83       	std	Y+4, r25	; 0x04
    3e8a:	8b 83       	std	Y+3, r24	; 0x03
    3e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e90:	01 97       	sbiw	r24, 0x01	; 1
    3e92:	f1 f7       	brne	.-4      	; 0x3e90 <checkPasswordCorrection+0x3e4>
    3e94:	9c 83       	std	Y+4, r25	; 0x04
    3e96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e98:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e9c:	01 97       	sbiw	r24, 0x01	; 1
    3e9e:	9e 83       	std	Y+6, r25	; 0x06
    3ea0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea6:	00 97       	sbiw	r24, 0x00	; 0
    3ea8:	69 f7       	brne	.-38     	; 0x3e84 <checkPasswordCorrection+0x3d8>
    3eaa:	14 c0       	rjmp	.+40     	; 0x3ed4 <checkPasswordCorrection+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eac:	6f 81       	ldd	r22, Y+7	; 0x07
    3eae:	78 85       	ldd	r23, Y+8	; 0x08
    3eb0:	89 85       	ldd	r24, Y+9	; 0x09
    3eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	9e 83       	std	Y+6, r25	; 0x06
    3ebe:	8d 83       	std	Y+5, r24	; 0x05
    3ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec4:	9a 83       	std	Y+2, r25	; 0x02
    3ec6:	89 83       	std	Y+1, r24	; 0x01
    3ec8:	89 81       	ldd	r24, Y+1	; 0x01
    3eca:	9a 81       	ldd	r25, Y+2	; 0x02
    3ecc:	01 97       	sbiw	r24, 0x01	; 1
    3ece:	f1 f7       	brne	.-4      	; 0x3ecc <checkPasswordCorrection+0x420>
    3ed0:	9a 83       	std	Y+2, r25	; 0x02
    3ed2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		UART_sendByte(password&0x00ff);
    3ed4:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ed6:	0e 94 7f 20 	call	0x40fe	; 0x40fe <UART_sendByte>
		/* if the password is correct it returns one else zero */
		RecievedValue=UART_recieveByte();
    3eda:	0e 94 96 20 	call	0x412c	; 0x412c <UART_recieveByte>
    3ede:	8e af       	std	Y+62, r24	; 0x3e
		if(RecievedValue==0)
    3ee0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ee2:	88 23       	and	r24, r24
    3ee4:	19 f4       	brne	.+6      	; 0x3eec <checkPasswordCorrection+0x440>
			iterator_incorrect_password++;
    3ee6:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ee8:	8f 5f       	subi	r24, 0xFF	; 255
    3eea:	8d af       	std	Y+61, r24	; 0x3d

		enter_value=0;
    3eec:	19 ae       	std	Y+57, r1	; 0x39
	}while(iterator_incorrect_password<3 &&RecievedValue==0);
    3eee:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ef0:	83 30       	cpi	r24, 0x03	; 3
    3ef2:	20 f4       	brcc	.+8      	; 0x3efc <checkPasswordCorrection+0x450>
    3ef4:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ef6:	88 23       	and	r24, r24
    3ef8:	09 f4       	brne	.+2      	; 0x3efc <checkPasswordCorrection+0x450>
    3efa:	e6 cd       	rjmp	.-1076   	; 0x3ac8 <checkPasswordCorrection+0x1c>

	if(iterator_incorrect_password==3){
    3efc:	8d ad       	ldd	r24, Y+61	; 0x3d
    3efe:	83 30       	cpi	r24, 0x03	; 3
    3f00:	09 f0       	breq	.+2      	; 0x3f04 <checkPasswordCorrection+0x458>
    3f02:	51 c0       	rjmp	.+162    	; 0x3fa6 <checkPasswordCorrection+0x4fa>
		LCD_clearScreen();
    3f04:	0e 94 86 11 	call	0x230c	; 0x230c <LCD_clearScreen>
		LCD_displayString("      ERROR     ");
    3f08:	8e ee       	ldi	r24, 0xEE	; 238
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_displayString>
		 * start value =0
		 * compare value = 31250  --> count 1 sec
		 * prescalar = 256
		 * mode of time is compare mode
		 * */
		UART_sendByte(Activate_Buzzer);   /* send to control mc to activate the buzzer */
    3f10:	8f eb       	ldi	r24, 0xBF	; 191
    3f12:	0e 94 7f 20 	call	0x40fe	; 0x40fe <UART_sendByte>
		Timer1_ConfigType config_timer1={0,31250,CLOCK_256,CTC};
    3f16:	ce 01       	movw	r24, r28
    3f18:	cf 96       	adiw	r24, 0x3f	; 63
    3f1a:	27 96       	adiw	r28, 0x07	; 7
    3f1c:	9f af       	std	Y+63, r25	; 0x3f
    3f1e:	8e af       	std	Y+62, r24	; 0x3e
    3f20:	27 97       	sbiw	r28, 0x07	; 7
    3f22:	e4 e1       	ldi	r30, 0x14	; 20
    3f24:	f1 e0       	ldi	r31, 0x01	; 1
    3f26:	29 96       	adiw	r28, 0x09	; 9
    3f28:	ff af       	std	Y+63, r31	; 0x3f
    3f2a:	ee af       	std	Y+62, r30	; 0x3e
    3f2c:	29 97       	sbiw	r28, 0x09	; 9
    3f2e:	f6 e0       	ldi	r31, 0x06	; 6
    3f30:	2a 96       	adiw	r28, 0x0a	; 10
    3f32:	ff af       	std	Y+63, r31	; 0x3f
    3f34:	2a 97       	sbiw	r28, 0x0a	; 10
    3f36:	29 96       	adiw	r28, 0x09	; 9
    3f38:	ee ad       	ldd	r30, Y+62	; 0x3e
    3f3a:	ff ad       	ldd	r31, Y+63	; 0x3f
    3f3c:	29 97       	sbiw	r28, 0x09	; 9
    3f3e:	00 80       	ld	r0, Z
    3f40:	29 96       	adiw	r28, 0x09	; 9
    3f42:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f44:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f46:	29 97       	sbiw	r28, 0x09	; 9
    3f48:	01 96       	adiw	r24, 0x01	; 1
    3f4a:	29 96       	adiw	r28, 0x09	; 9
    3f4c:	9f af       	std	Y+63, r25	; 0x3f
    3f4e:	8e af       	std	Y+62, r24	; 0x3e
    3f50:	29 97       	sbiw	r28, 0x09	; 9
    3f52:	27 96       	adiw	r28, 0x07	; 7
    3f54:	ee ad       	ldd	r30, Y+62	; 0x3e
    3f56:	ff ad       	ldd	r31, Y+63	; 0x3f
    3f58:	27 97       	sbiw	r28, 0x07	; 7
    3f5a:	00 82       	st	Z, r0
    3f5c:	27 96       	adiw	r28, 0x07	; 7
    3f5e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f60:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f62:	27 97       	sbiw	r28, 0x07	; 7
    3f64:	01 96       	adiw	r24, 0x01	; 1
    3f66:	27 96       	adiw	r28, 0x07	; 7
    3f68:	9f af       	std	Y+63, r25	; 0x3f
    3f6a:	8e af       	std	Y+62, r24	; 0x3e
    3f6c:	27 97       	sbiw	r28, 0x07	; 7
    3f6e:	2a 96       	adiw	r28, 0x0a	; 10
    3f70:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f72:	2a 97       	sbiw	r28, 0x0a	; 10
    3f74:	91 50       	subi	r25, 0x01	; 1
    3f76:	2a 96       	adiw	r28, 0x0a	; 10
    3f78:	9f af       	std	Y+63, r25	; 0x3f
    3f7a:	2a 97       	sbiw	r28, 0x0a	; 10
    3f7c:	2a 96       	adiw	r28, 0x0a	; 10
    3f7e:	ef ad       	ldd	r30, Y+63	; 0x3f
    3f80:	2a 97       	sbiw	r28, 0x0a	; 10
    3f82:	ee 23       	and	r30, r30
    3f84:	c1 f6       	brne	.-80     	; 0x3f36 <checkPasswordCorrection+0x48a>
		Timer1_setCallBack(Buzzer_Callback);
    3f86:	84 e0       	ldi	r24, 0x04	; 4
    3f88:	90 e2       	ldi	r25, 0x20	; 32
    3f8a:	0e 94 40 12 	call	0x2480	; 0x2480 <Timer1_setCallBack>
		Timer1_init(&config_timer1);
    3f8e:	ce 01       	movw	r24, r28
    3f90:	cf 96       	adiw	r24, 0x3f	; 63
    3f92:	0e 94 f6 11 	call	0x23ec	; 0x23ec <Timer1_init>
		/* Waiting the timer to count 1 min*/
		while(g_error!=60);
    3f96:	80 91 1f 01 	lds	r24, 0x011F
    3f9a:	8c 33       	cpi	r24, 0x3C	; 60
    3f9c:	e1 f7       	brne	.-8      	; 0x3f96 <checkPasswordCorrection+0x4ea>
		g_error=0;
    3f9e:	10 92 1f 01 	sts	0x011F, r1
		/*stop timer*/
		Timer1_deInit();
    3fa2:	0e 94 52 12 	call	0x24a4	; 0x24a4 <Timer1_deInit>
	}
	return  RecievedValue;
    3fa6:	8e ad       	ldd	r24, Y+62	; 0x3e
}
    3fa8:	c7 5b       	subi	r28, 0xB7	; 183
    3faa:	df 4f       	sbci	r29, 0xFF	; 255
    3fac:	0f b6       	in	r0, 0x3f	; 63
    3fae:	f8 94       	cli
    3fb0:	de bf       	out	0x3e, r29	; 62
    3fb2:	0f be       	out	0x3f, r0	; 63
    3fb4:	cd bf       	out	0x3d, r28	; 61
    3fb6:	cf 91       	pop	r28
    3fb8:	df 91       	pop	r29
    3fba:	1f 91       	pop	r17
    3fbc:	0f 91       	pop	r16
    3fbe:	08 95       	ret

00003fc0 <motorCW_callback>:

void motorCW_callback(void){
    3fc0:	df 93       	push	r29
    3fc2:	cf 93       	push	r28
    3fc4:	cd b7       	in	r28, 0x3d	; 61
    3fc6:	de b7       	in	r29, 0x3e	; 62
	/*COUNT 1 SEC
	 * */
	g_locking++;
    3fc8:	80 91 1c 01 	lds	r24, 0x011C
    3fcc:	8f 5f       	subi	r24, 0xFF	; 255
    3fce:	80 93 1c 01 	sts	0x011C, r24
}
    3fd2:	cf 91       	pop	r28
    3fd4:	df 91       	pop	r29
    3fd6:	08 95       	ret

00003fd8 <motorhold_callback>:
/*Call Back Function after the timer counts 3 secs to hold motor */
void motorhold_callback(void){
    3fd8:	df 93       	push	r29
    3fda:	cf 93       	push	r28
    3fdc:	cd b7       	in	r28, 0x3d	; 61
    3fde:	de b7       	in	r29, 0x3e	; 62
	/*COUNT 1 SEC
	 * */
	g_holding++;
    3fe0:	80 91 1d 01 	lds	r24, 0x011D
    3fe4:	8f 5f       	subi	r24, 0xFF	; 255
    3fe6:	80 93 1d 01 	sts	0x011D, r24

}
    3fea:	cf 91       	pop	r28
    3fec:	df 91       	pop	r29
    3fee:	08 95       	ret

00003ff0 <motorACW_callback>:
/*Call Back Function after the timer counts 15 secs to rotate motor anti clock wise*/
void motorACW_callback(void){
    3ff0:	df 93       	push	r29
    3ff2:	cf 93       	push	r28
    3ff4:	cd b7       	in	r28, 0x3d	; 61
    3ff6:	de b7       	in	r29, 0x3e	; 62
	/*COUNT 1 SEC
	 * */
	g_unlocking++;
    3ff8:	80 91 1e 01 	lds	r24, 0x011E
    3ffc:	8f 5f       	subi	r24, 0xFF	; 255
    3ffe:	80 93 1e 01 	sts	0x011E, r24

}
    4002:	cf 91       	pop	r28
    4004:	df 91       	pop	r29
    4006:	08 95       	ret

00004008 <Buzzer_Callback>:
/*Buzzer Callback function */
void Buzzer_Callback(void){
    4008:	df 93       	push	r29
    400a:	cf 93       	push	r28
    400c:	cd b7       	in	r28, 0x3d	; 61
    400e:	de b7       	in	r29, 0x3e	; 62
	/*COUNT 1 SEC
	 * */
	g_error++;
    4010:	80 91 1f 01 	lds	r24, 0x011F
    4014:	8f 5f       	subi	r24, 0xFF	; 255
    4016:	80 93 1f 01 	sts	0x011F, r24

}
    401a:	cf 91       	pop	r28
    401c:	df 91       	pop	r29
    401e:	08 95       	ret

00004020 <UART_init>:
#include <avr/io.h>
#include "common_macros.h"



void UART_init(Config_Uart*config_ptr){
    4020:	df 93       	push	r29
    4022:	cf 93       	push	r28
    4024:	00 d0       	rcall	.+0      	; 0x4026 <UART_init+0x6>
    4026:	00 d0       	rcall	.+0      	; 0x4028 <UART_init+0x8>
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
    402c:	9c 83       	std	Y+4, r25	; 0x04
    402e:	8b 83       	std	Y+3, r24	; 0x03
	/* Set Double Transmission Speed */
	UCSRA=(1<<U2X);
    4030:	eb e2       	ldi	r30, 0x2B	; 43
    4032:	f0 e0       	ldi	r31, 0x00	; 0
    4034:	82 e0       	ldi	r24, 0x02	; 2
    4036:	80 83       	st	Z, r24
	/*Set Enable Transmitter
	 *Set Enable Receiver
	 *Set UCSZ2 Character Size
	 * */

	UCSRB=(1<<RXEN) | (1<<TXEN)|(config_ptr->dataSize&0x04);
    4038:	aa e2       	ldi	r26, 0x2A	; 42
    403a:	b0 e0       	ldi	r27, 0x00	; 0
    403c:	eb 81       	ldd	r30, Y+3	; 0x03
    403e:	fc 81       	ldd	r31, Y+4	; 0x04
    4040:	82 81       	ldd	r24, Z+2	; 0x02
    4042:	84 70       	andi	r24, 0x04	; 4
    4044:	88 61       	ori	r24, 0x18	; 24
    4046:	8c 93       	st	X, r24
	 * set parity bit
	 * set stop bit
	 * set data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
     * */
	UCSRC= (1<<URSEL) | (config_ptr->parity<<4)| (config_ptr->StopSelect<<3)
    4048:	a0 e4       	ldi	r26, 0x40	; 64
    404a:	b0 e0       	ldi	r27, 0x00	; 0
    404c:	eb 81       	ldd	r30, Y+3	; 0x03
    404e:	fc 81       	ldd	r31, Y+4	; 0x04
    4050:	80 81       	ld	r24, Z
    4052:	88 2f       	mov	r24, r24
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	82 95       	swap	r24
    4058:	92 95       	swap	r25
    405a:	90 7f       	andi	r25, 0xF0	; 240
    405c:	98 27       	eor	r25, r24
    405e:	80 7f       	andi	r24, 0xF0	; 240
    4060:	98 27       	eor	r25, r24
    4062:	28 2f       	mov	r18, r24
    4064:	20 68       	ori	r18, 0x80	; 128
    4066:	eb 81       	ldd	r30, Y+3	; 0x03
    4068:	fc 81       	ldd	r31, Y+4	; 0x04
    406a:	81 81       	ldd	r24, Z+1	; 0x01
    406c:	88 2f       	mov	r24, r24
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	88 0f       	add	r24, r24
    4072:	99 1f       	adc	r25, r25
    4074:	88 0f       	add	r24, r24
    4076:	99 1f       	adc	r25, r25
    4078:	88 0f       	add	r24, r24
    407a:	99 1f       	adc	r25, r25
    407c:	28 2b       	or	r18, r24
    407e:	eb 81       	ldd	r30, Y+3	; 0x03
    4080:	fc 81       	ldd	r31, Y+4	; 0x04
    4082:	82 81       	ldd	r24, Z+2	; 0x02
    4084:	88 2f       	mov	r24, r24
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	83 70       	andi	r24, 0x03	; 3
    408a:	90 70       	andi	r25, 0x00	; 0
    408c:	88 0f       	add	r24, r24
    408e:	99 1f       	adc	r25, r25
    4090:	82 2b       	or	r24, r18
    4092:	8c 93       	st	X, r24
			| ((config_ptr->dataSize&0x03)<<1);

	uint16 ubrr_value = 0;
    4094:	1a 82       	std	Y+2, r1	; 0x02
    4096:	19 82       	std	Y+1, r1	; 0x01
	/*calculate the value of ubrr from mu baudrate and fcpu */
	ubrr_value = (uint16)(((F_CPU / (config_ptr->baud_rate* 8UL))) - 1);
    4098:	eb 81       	ldd	r30, Y+3	; 0x03
    409a:	fc 81       	ldd	r31, Y+4	; 0x04
    409c:	83 81       	ldd	r24, Z+3	; 0x03
    409e:	94 81       	ldd	r25, Z+4	; 0x04
    40a0:	a5 81       	ldd	r26, Z+5	; 0x05
    40a2:	b6 81       	ldd	r27, Z+6	; 0x06
    40a4:	88 0f       	add	r24, r24
    40a6:	99 1f       	adc	r25, r25
    40a8:	aa 1f       	adc	r26, r26
    40aa:	bb 1f       	adc	r27, r27
    40ac:	88 0f       	add	r24, r24
    40ae:	99 1f       	adc	r25, r25
    40b0:	aa 1f       	adc	r26, r26
    40b2:	bb 1f       	adc	r27, r27
    40b4:	88 0f       	add	r24, r24
    40b6:	99 1f       	adc	r25, r25
    40b8:	aa 1f       	adc	r26, r26
    40ba:	bb 1f       	adc	r27, r27
    40bc:	9c 01       	movw	r18, r24
    40be:	ad 01       	movw	r20, r26
    40c0:	80 e0       	ldi	r24, 0x00	; 0
    40c2:	94 e2       	ldi	r25, 0x24	; 36
    40c4:	a4 ef       	ldi	r26, 0xF4	; 244
    40c6:	b0 e0       	ldi	r27, 0x00	; 0
    40c8:	bc 01       	movw	r22, r24
    40ca:	cd 01       	movw	r24, r26
    40cc:	0e 94 0e 21 	call	0x421c	; 0x421c <__udivmodsi4>
    40d0:	da 01       	movw	r26, r20
    40d2:	c9 01       	movw	r24, r18
    40d4:	01 97       	sbiw	r24, 0x01	; 1
    40d6:	9a 83       	std	Y+2, r25	; 0x02
    40d8:	89 83       	std	Y+1, r24	; 0x01

	UBRRL=ubrr_value;
    40da:	e9 e2       	ldi	r30, 0x29	; 41
    40dc:	f0 e0       	ldi	r31, 0x00	; 0
    40de:	89 81       	ldd	r24, Y+1	; 0x01
    40e0:	80 83       	st	Z, r24
	UBRRH=ubrr_value>>8;
    40e2:	e0 e4       	ldi	r30, 0x40	; 64
    40e4:	f0 e0       	ldi	r31, 0x00	; 0
    40e6:	89 81       	ldd	r24, Y+1	; 0x01
    40e8:	9a 81       	ldd	r25, Y+2	; 0x02
    40ea:	89 2f       	mov	r24, r25
    40ec:	99 27       	eor	r25, r25
    40ee:	80 83       	st	Z, r24

}
    40f0:	0f 90       	pop	r0
    40f2:	0f 90       	pop	r0
    40f4:	0f 90       	pop	r0
    40f6:	0f 90       	pop	r0
    40f8:	cf 91       	pop	r28
    40fa:	df 91       	pop	r29
    40fc:	08 95       	ret

000040fe <UART_sendByte>:

void UART_sendByte(uint8 data){
    40fe:	df 93       	push	r29
    4100:	cf 93       	push	r28
    4102:	0f 92       	push	r0
    4104:	cd b7       	in	r28, 0x3d	; 61
    4106:	de b7       	in	r29, 0x3e	; 62
    4108:	89 83       	std	Y+1, r24	; 0x01

	/*polling until TX buffer is empty to start sending byte
	 * */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    410a:	eb e2       	ldi	r30, 0x2B	; 43
    410c:	f0 e0       	ldi	r31, 0x00	; 0
    410e:	80 81       	ld	r24, Z
    4110:	88 2f       	mov	r24, r24
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	80 72       	andi	r24, 0x20	; 32
    4116:	90 70       	andi	r25, 0x00	; 0
    4118:	00 97       	sbiw	r24, 0x00	; 0
    411a:	b9 f3       	breq	.-18     	; 0x410a <UART_sendByte+0xc>
    /*putting my data on UDR reg
     * */
	UDR=data;
    411c:	ec e2       	ldi	r30, 0x2C	; 44
    411e:	f0 e0       	ldi	r31, 0x00	; 0
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	80 83       	st	Z, r24
}
    4124:	0f 90       	pop	r0
    4126:	cf 91       	pop	r28
    4128:	df 91       	pop	r29
    412a:	08 95       	ret

0000412c <UART_recieveByte>:

uint8 UART_recieveByte(){
    412c:	df 93       	push	r29
    412e:	cf 93       	push	r28
    4130:	cd b7       	in	r28, 0x3d	; 61
    4132:	de b7       	in	r29, 0x3e	; 62
	/*polling until RXC buffer is empty to start sending byte
		 * */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    4134:	eb e2       	ldi	r30, 0x2B	; 43
    4136:	f0 e0       	ldi	r31, 0x00	; 0
    4138:	80 81       	ld	r24, Z
    413a:	88 23       	and	r24, r24
    413c:	dc f7       	brge	.-10     	; 0x4134 <UART_recieveByte+0x8>
	/*putting my data on UDR reg
	     * */
	return UDR;
    413e:	ec e2       	ldi	r30, 0x2C	; 44
    4140:	f0 e0       	ldi	r31, 0x00	; 0
    4142:	80 81       	ld	r24, Z
}
    4144:	cf 91       	pop	r28
    4146:	df 91       	pop	r29
    4148:	08 95       	ret

0000414a <UART_sendString>:

void UART_sendString(char*str){
    414a:	df 93       	push	r29
    414c:	cf 93       	push	r28
    414e:	00 d0       	rcall	.+0      	; 0x4150 <UART_sendString+0x6>
    4150:	0f 92       	push	r0
    4152:	cd b7       	in	r28, 0x3d	; 61
    4154:	de b7       	in	r29, 0x3e	; 62
    4156:	9b 83       	std	Y+3, r25	; 0x03
    4158:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    415a:	19 82       	std	Y+1, r1	; 0x01
    415c:	0e c0       	rjmp	.+28     	; 0x417a <UART_sendString+0x30>

	while(str[i]!='\0'){
		UART_sendByte(str[i]);
    415e:	89 81       	ldd	r24, Y+1	; 0x01
    4160:	28 2f       	mov	r18, r24
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	8a 81       	ldd	r24, Y+2	; 0x02
    4166:	9b 81       	ldd	r25, Y+3	; 0x03
    4168:	fc 01       	movw	r30, r24
    416a:	e2 0f       	add	r30, r18
    416c:	f3 1f       	adc	r31, r19
    416e:	80 81       	ld	r24, Z
    4170:	0e 94 7f 20 	call	0x40fe	; 0x40fe <UART_sendByte>
		i++;
    4174:	89 81       	ldd	r24, Y+1	; 0x01
    4176:	8f 5f       	subi	r24, 0xFF	; 255
    4178:	89 83       	std	Y+1, r24	; 0x01

void UART_sendString(char*str){

	uint8 i=0;

	while(str[i]!='\0'){
    417a:	89 81       	ldd	r24, Y+1	; 0x01
    417c:	28 2f       	mov	r18, r24
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	8a 81       	ldd	r24, Y+2	; 0x02
    4182:	9b 81       	ldd	r25, Y+3	; 0x03
    4184:	fc 01       	movw	r30, r24
    4186:	e2 0f       	add	r30, r18
    4188:	f3 1f       	adc	r31, r19
    418a:	80 81       	ld	r24, Z
    418c:	88 23       	and	r24, r24
    418e:	39 f7       	brne	.-50     	; 0x415e <UART_sendString+0x14>
		UART_sendByte(str[i]);
		i++;
	}


}
    4190:	0f 90       	pop	r0
    4192:	0f 90       	pop	r0
    4194:	0f 90       	pop	r0
    4196:	cf 91       	pop	r28
    4198:	df 91       	pop	r29
    419a:	08 95       	ret

0000419c <UART_recieveString>:

void UART_recieveString(char*str){
    419c:	0f 93       	push	r16
    419e:	1f 93       	push	r17
    41a0:	df 93       	push	r29
    41a2:	cf 93       	push	r28
    41a4:	00 d0       	rcall	.+0      	; 0x41a6 <UART_recieveString+0xa>
    41a6:	00 d0       	rcall	.+0      	; 0x41a8 <UART_recieveString+0xc>
    41a8:	cd b7       	in	r28, 0x3d	; 61
    41aa:	de b7       	in	r29, 0x3e	; 62
    41ac:	9b 83       	std	Y+3, r25	; 0x03
    41ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    41b0:	19 82       	std	Y+1, r1	; 0x01

	do{
		str[i]=UART_recieveByte();
    41b2:	89 81       	ldd	r24, Y+1	; 0x01
    41b4:	28 2f       	mov	r18, r24
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	8a 81       	ldd	r24, Y+2	; 0x02
    41ba:	9b 81       	ldd	r25, Y+3	; 0x03
    41bc:	8c 01       	movw	r16, r24
    41be:	02 0f       	add	r16, r18
    41c0:	13 1f       	adc	r17, r19
    41c2:	0e 94 96 20 	call	0x412c	; 0x412c <UART_recieveByte>
    41c6:	f8 01       	movw	r30, r16
    41c8:	80 83       	st	Z, r24
	}while(str[i++]!='#');
    41ca:	89 81       	ldd	r24, Y+1	; 0x01
    41cc:	28 2f       	mov	r18, r24
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	8a 81       	ldd	r24, Y+2	; 0x02
    41d2:	9b 81       	ldd	r25, Y+3	; 0x03
    41d4:	fc 01       	movw	r30, r24
    41d6:	e2 0f       	add	r30, r18
    41d8:	f3 1f       	adc	r31, r19
    41da:	80 81       	ld	r24, Z
    41dc:	1c 82       	std	Y+4, r1	; 0x04
    41de:	83 32       	cpi	r24, 0x23	; 35
    41e0:	11 f0       	breq	.+4      	; 0x41e6 <UART_recieveString+0x4a>
    41e2:	f1 e0       	ldi	r31, 0x01	; 1
    41e4:	fc 83       	std	Y+4, r31	; 0x04
    41e6:	89 81       	ldd	r24, Y+1	; 0x01
    41e8:	8f 5f       	subi	r24, 0xFF	; 255
    41ea:	89 83       	std	Y+1, r24	; 0x01
    41ec:	8c 81       	ldd	r24, Y+4	; 0x04
    41ee:	88 23       	and	r24, r24
    41f0:	01 f7       	brne	.-64     	; 0x41b2 <UART_recieveString+0x16>

	str[i-1]='\0';
    41f2:	89 81       	ldd	r24, Y+1	; 0x01
    41f4:	88 2f       	mov	r24, r24
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	9c 01       	movw	r18, r24
    41fa:	21 50       	subi	r18, 0x01	; 1
    41fc:	30 40       	sbci	r19, 0x00	; 0
    41fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4200:	9b 81       	ldd	r25, Y+3	; 0x03
    4202:	fc 01       	movw	r30, r24
    4204:	e2 0f       	add	r30, r18
    4206:	f3 1f       	adc	r31, r19
    4208:	10 82       	st	Z, r1
}
    420a:	0f 90       	pop	r0
    420c:	0f 90       	pop	r0
    420e:	0f 90       	pop	r0
    4210:	0f 90       	pop	r0
    4212:	cf 91       	pop	r28
    4214:	df 91       	pop	r29
    4216:	1f 91       	pop	r17
    4218:	0f 91       	pop	r16
    421a:	08 95       	ret

0000421c <__udivmodsi4>:
    421c:	a1 e2       	ldi	r26, 0x21	; 33
    421e:	1a 2e       	mov	r1, r26
    4220:	aa 1b       	sub	r26, r26
    4222:	bb 1b       	sub	r27, r27
    4224:	fd 01       	movw	r30, r26
    4226:	0d c0       	rjmp	.+26     	; 0x4242 <__udivmodsi4_ep>

00004228 <__udivmodsi4_loop>:
    4228:	aa 1f       	adc	r26, r26
    422a:	bb 1f       	adc	r27, r27
    422c:	ee 1f       	adc	r30, r30
    422e:	ff 1f       	adc	r31, r31
    4230:	a2 17       	cp	r26, r18
    4232:	b3 07       	cpc	r27, r19
    4234:	e4 07       	cpc	r30, r20
    4236:	f5 07       	cpc	r31, r21
    4238:	20 f0       	brcs	.+8      	; 0x4242 <__udivmodsi4_ep>
    423a:	a2 1b       	sub	r26, r18
    423c:	b3 0b       	sbc	r27, r19
    423e:	e4 0b       	sbc	r30, r20
    4240:	f5 0b       	sbc	r31, r21

00004242 <__udivmodsi4_ep>:
    4242:	66 1f       	adc	r22, r22
    4244:	77 1f       	adc	r23, r23
    4246:	88 1f       	adc	r24, r24
    4248:	99 1f       	adc	r25, r25
    424a:	1a 94       	dec	r1
    424c:	69 f7       	brne	.-38     	; 0x4228 <__udivmodsi4_loop>
    424e:	60 95       	com	r22
    4250:	70 95       	com	r23
    4252:	80 95       	com	r24
    4254:	90 95       	com	r25
    4256:	9b 01       	movw	r18, r22
    4258:	ac 01       	movw	r20, r24
    425a:	bd 01       	movw	r22, r26
    425c:	cf 01       	movw	r24, r30
    425e:	08 95       	ret

00004260 <__prologue_saves__>:
    4260:	2f 92       	push	r2
    4262:	3f 92       	push	r3
    4264:	4f 92       	push	r4
    4266:	5f 92       	push	r5
    4268:	6f 92       	push	r6
    426a:	7f 92       	push	r7
    426c:	8f 92       	push	r8
    426e:	9f 92       	push	r9
    4270:	af 92       	push	r10
    4272:	bf 92       	push	r11
    4274:	cf 92       	push	r12
    4276:	df 92       	push	r13
    4278:	ef 92       	push	r14
    427a:	ff 92       	push	r15
    427c:	0f 93       	push	r16
    427e:	1f 93       	push	r17
    4280:	cf 93       	push	r28
    4282:	df 93       	push	r29
    4284:	cd b7       	in	r28, 0x3d	; 61
    4286:	de b7       	in	r29, 0x3e	; 62
    4288:	ca 1b       	sub	r28, r26
    428a:	db 0b       	sbc	r29, r27
    428c:	0f b6       	in	r0, 0x3f	; 63
    428e:	f8 94       	cli
    4290:	de bf       	out	0x3e, r29	; 62
    4292:	0f be       	out	0x3f, r0	; 63
    4294:	cd bf       	out	0x3d, r28	; 61
    4296:	09 94       	ijmp

00004298 <__epilogue_restores__>:
    4298:	2a 88       	ldd	r2, Y+18	; 0x12
    429a:	39 88       	ldd	r3, Y+17	; 0x11
    429c:	48 88       	ldd	r4, Y+16	; 0x10
    429e:	5f 84       	ldd	r5, Y+15	; 0x0f
    42a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    42a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    42a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    42a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    42a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    42aa:	b9 84       	ldd	r11, Y+9	; 0x09
    42ac:	c8 84       	ldd	r12, Y+8	; 0x08
    42ae:	df 80       	ldd	r13, Y+7	; 0x07
    42b0:	ee 80       	ldd	r14, Y+6	; 0x06
    42b2:	fd 80       	ldd	r15, Y+5	; 0x05
    42b4:	0c 81       	ldd	r16, Y+4	; 0x04
    42b6:	1b 81       	ldd	r17, Y+3	; 0x03
    42b8:	aa 81       	ldd	r26, Y+2	; 0x02
    42ba:	b9 81       	ldd	r27, Y+1	; 0x01
    42bc:	ce 0f       	add	r28, r30
    42be:	d1 1d       	adc	r29, r1
    42c0:	0f b6       	in	r0, 0x3f	; 63
    42c2:	f8 94       	cli
    42c4:	de bf       	out	0x3e, r29	; 62
    42c6:	0f be       	out	0x3f, r0	; 63
    42c8:	cd bf       	out	0x3d, r28	; 61
    42ca:	ed 01       	movw	r28, r26
    42cc:	08 95       	ret

000042ce <itoa>:
    42ce:	fb 01       	movw	r30, r22
    42d0:	9f 01       	movw	r18, r30
    42d2:	e8 94       	clt
    42d4:	42 30       	cpi	r20, 0x02	; 2
    42d6:	c4 f0       	brlt	.+48     	; 0x4308 <itoa+0x3a>
    42d8:	45 32       	cpi	r20, 0x25	; 37
    42da:	b4 f4       	brge	.+44     	; 0x4308 <itoa+0x3a>
    42dc:	4a 30       	cpi	r20, 0x0A	; 10
    42de:	29 f4       	brne	.+10     	; 0x42ea <itoa+0x1c>
    42e0:	97 fb       	bst	r25, 7
    42e2:	1e f4       	brtc	.+6      	; 0x42ea <itoa+0x1c>
    42e4:	90 95       	com	r25
    42e6:	81 95       	neg	r24
    42e8:	9f 4f       	sbci	r25, 0xFF	; 255
    42ea:	64 2f       	mov	r22, r20
    42ec:	77 27       	eor	r23, r23
    42ee:	0e 94 98 21 	call	0x4330	; 0x4330 <__udivmodhi4>
    42f2:	80 5d       	subi	r24, 0xD0	; 208
    42f4:	8a 33       	cpi	r24, 0x3A	; 58
    42f6:	0c f0       	brlt	.+2      	; 0x42fa <itoa+0x2c>
    42f8:	89 5d       	subi	r24, 0xD9	; 217
    42fa:	81 93       	st	Z+, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	00 97       	sbiw	r24, 0x00	; 0
    4300:	a1 f7       	brne	.-24     	; 0x42ea <itoa+0x1c>
    4302:	16 f4       	brtc	.+4      	; 0x4308 <itoa+0x3a>
    4304:	5d e2       	ldi	r21, 0x2D	; 45
    4306:	51 93       	st	Z+, r21
    4308:	10 82       	st	Z, r1
    430a:	c9 01       	movw	r24, r18
    430c:	0c 94 88 21 	jmp	0x4310	; 0x4310 <strrev>

00004310 <strrev>:
    4310:	dc 01       	movw	r26, r24
    4312:	fc 01       	movw	r30, r24
    4314:	67 2f       	mov	r22, r23
    4316:	71 91       	ld	r23, Z+
    4318:	77 23       	and	r23, r23
    431a:	e1 f7       	brne	.-8      	; 0x4314 <strrev+0x4>
    431c:	32 97       	sbiw	r30, 0x02	; 2
    431e:	04 c0       	rjmp	.+8      	; 0x4328 <strrev+0x18>
    4320:	7c 91       	ld	r23, X
    4322:	6d 93       	st	X+, r22
    4324:	70 83       	st	Z, r23
    4326:	62 91       	ld	r22, -Z
    4328:	ae 17       	cp	r26, r30
    432a:	bf 07       	cpc	r27, r31
    432c:	c8 f3       	brcs	.-14     	; 0x4320 <strrev+0x10>
    432e:	08 95       	ret

00004330 <__udivmodhi4>:
    4330:	aa 1b       	sub	r26, r26
    4332:	bb 1b       	sub	r27, r27
    4334:	51 e1       	ldi	r21, 0x11	; 17
    4336:	07 c0       	rjmp	.+14     	; 0x4346 <__udivmodhi4_ep>

00004338 <__udivmodhi4_loop>:
    4338:	aa 1f       	adc	r26, r26
    433a:	bb 1f       	adc	r27, r27
    433c:	a6 17       	cp	r26, r22
    433e:	b7 07       	cpc	r27, r23
    4340:	10 f0       	brcs	.+4      	; 0x4346 <__udivmodhi4_ep>
    4342:	a6 1b       	sub	r26, r22
    4344:	b7 0b       	sbc	r27, r23

00004346 <__udivmodhi4_ep>:
    4346:	88 1f       	adc	r24, r24
    4348:	99 1f       	adc	r25, r25
    434a:	5a 95       	dec	r21
    434c:	a9 f7       	brne	.-22     	; 0x4338 <__udivmodhi4_loop>
    434e:	80 95       	com	r24
    4350:	90 95       	com	r25
    4352:	bc 01       	movw	r22, r24
    4354:	cd 01       	movw	r24, r26
    4356:	08 95       	ret

00004358 <_exit>:
    4358:	f8 94       	cli

0000435a <__stop_program>:
    435a:	ff cf       	rjmp	.-2      	; 0x435a <__stop_program>
