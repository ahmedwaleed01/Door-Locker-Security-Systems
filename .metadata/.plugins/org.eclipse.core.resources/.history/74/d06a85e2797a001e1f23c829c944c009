/*
 * main.c
 *
 *  Created on: 24 Oct 2023
 *      Author: ahmed waleed
 */



#include "std_types.h"
#include "external_eeprom.h"
#include "Timer.h"
#include "buzzer.h"
#include "uart.h"
#include "twi.h"
#include "util/delay.h"
#include "avr/io.h"
#include "DcMotor.h"


#define  Check_Password              0xFF
#define  rotate_motor_CW             0xEF
#define  ROTATE_MOTOR_ACW            0xDF
#define  motor_Hold                  0x1F
#define  Activate_Buzzer             0xBF
#define  GET_PASSWORD                0xAF
#define  send_first_pass             0x9F
#define  send_reEntered_pass         0x8F
#define  SUCCESS                     1
#define  ERROR                       0

uint8    g_locking=0;
uint8    g_holding=0;
uint8    g_unlocking=0;
uint8    g_buzzer=0;

void BuzzerOffCallBack(void);
void motorCW_callback(void);
void motorACW_callback(void);
void motorhold_callback(void);

int main(void){
	/*
	 * Set configuration of Uart
	 * parity bit is disabled
	 * one bit stop
	 * character size 8
	 * baud rate =9600
	 * */

	Config_Uart config_uart={DISABLED,ONE_BIT,
			BIT_8,9600
	};
	UART_init(&config_uart);

	/* Intilize TWI */
	TWI_ConfigType config_twi={0x02,0x01};
	TWI_init(&config_twi);

	Buzzer_init();   /* Initlize Buzzer */

	DcMotor_Init();   /* Initlize Dc motor */

	SREG |= (1<<7);/* Enable Global Interrupts */

	uint8 message;

	while(1){


		DcMotor_Rotate(ANTI_CLOCK_WISE,50);
		Buzzer_on();
		message=UART_recieveByte();


		if(message==GET_PASSWORD){
			uint16 password;
			uint8 val;
			EEPROM_readByte(0x0311, &val);
			_delay_ms(10);
			password=val<<8;
			//			EEPROM_writeByte(0x0320,&val);
			password|=val;

			UART_sendByte(password>>8);
			_delay_ms(10);
			UART_sendByte(password&0x0f);


		}else if(message==send_first_pass){
			/*
			 * get password and re-enterd password fom HMI MC
			 * */
			uint16 password;
			uint16 re_entered;
			password=UART_recieveByte()<<8;
			_delay_ms(10);
			password|=UART_recieveByte();
			_delay_ms(10);
			re_entered=UART_recieveByte()<<8;
			_delay_ms(10);
			re_entered|=UART_recieveByte();
			/* If they are same write the password in memory and return success*/
			if(password==re_entered){
				EEPROM_writeByte(0x0311,password>>8);
				_delay_ms(10);
				EEPROM_writeByte(0x0330, password&0x00ff);

				UART_sendByte(SUCCESS);

			}else{
				UART_sendByte(ERROR);
			}
		}else if(message==Activate_Buzzer){
			Buzzer_on();

			/*
			 * set configuration of timer
			 * start value =0
			 * compare value = 31250  --> count 1 sec
			 * prescalar = 256
			 * mode of time is compare mode
			 * */
			Timer1_ConfigType config_timer1={0,31250,CLOCK_256,CTC};
			Timer1_setCallBack(BuzzerOffCallBack);
			Timer1_init(&config_timer1);
			while(g_buzzer!=60);
			g_buzzer=0;
			Timer1_deInit();
			Buzzer_off();
		}else if(message==Check_Password){
			/*
			 * get password fom HMI MC
			 * */
			uint16 passwordRead;
			uint16 password;
			uint8 val;
			passwordRead=UART_recieveByte()<<8;
			_delay_ms(10);
			passwordRead|=UART_recieveByte();
			_delay_ms(10);
			/*
			 * get password saved in memory
			 * */
			EEPROM_readByte(0x0311, &val);
			_delay_ms(10);
			password=val<<8;
			EEPROM_readByte(0x0330,&val);
			password|=val;
			/*
			 * if it is the same password return success
			 * */
			if(password==passwordRead){
				UART_sendByte(SUCCESS);
			}else{
				UART_sendByte(ERROR);

			}

		}else if(message==rotate_motor_CW){
			/*
			 * set configuration of timer
			 * start value =0
			 * compare value = 31250  --> count 1 sec
			 * prescalar = 256
			 * mode of time is compare mode
			 * */
			DcMotor_Rotate(CLOCK_WISE,100);
			Timer1_ConfigType config_timer1={0,31250,CLOCK_256,CTC};
			Timer1_setCallBack(motorCW_callback);
			Timer1_init(&config_timer1);
			while(g_locking!=15);
			g_locking=0;
			Timer1_deInit();
			DcMotor_Rotate(STOP,0);
		}
		else if(message==motor_Hold){
			/*
			 * set configuration of timer
			 * start value =0
			 * compare value = 31250  --> count 1 sec
			 * prescalar = 256
			 * mode of time is compare mode
			 * */
			DcMotor_Rotate(STOP,0);
			Timer1_ConfigType config_timer1={0,31250,CLOCK_256,CTC};
			Timer1_setCallBack(motorhold_callback);
			Timer1_init(&config_timer1);
			while(g_holding!=3);
			g_holding=0;
			Timer1_deInit();
		}
		else if(message== ROTATE_MOTOR_ACW){
			/*
			 * set configuration of timer
			 * start value =0
			 * compare value = 31250  --> count 1 sec
			 * prescalar = 256
			 * mode of time is compare mode
			 * */
			DcMotor_Rotate(ANTI_CLOCK_WISE,100);
			Timer1_ConfigType config_timer1={0,31250,CLOCK_256,CTC};
			Timer1_setCallBack(motorACW_callback);
			Timer1_init(&config_timer1);
			while(g_unlocking!=15);
			g_unlocking=0;
			Timer1_deInit();
			DcMotor_Rotate(STOP,0);
		}

	}

}
void motorCW_callback(void){
	/*COUNT 1 SEC
	 * */
	g_locking++;
}
/*Call Back Function after the timer counts 3 secs to hold motor */
void motorhold_callback(void){
	/*COUNT 1 SEC
	 * */
	g_holding++;
}
/*Call Back Function after the timer counts 15 secs to rotate motor anti clock wise*/
void motorACW_callback(void){
	/*COUNT 1 SEC
	 * */
	g_unlocking++;
}
/*Buzzer Callback function */
void BuzzerOffCallBack(void){
	/*COUNT 1 SEC
	 * */
	g_buzzer++;
}
