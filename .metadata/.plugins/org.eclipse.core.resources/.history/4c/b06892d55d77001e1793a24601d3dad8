/*
 * Module: Timer
 *
 * File Name: Timer.c
 *
 * Description: Source file for the TIMER1 AVR driver
 *
 * Author: ahmed waleed
 */

#include "Timer.h"

#include <avr/io.h>
#include <avr/interrupt.h>


static volatile void (*g_callBackPtr)(void) = NULL_PTR;

#ifdef  Compare_unit_A
ISR(TIMER1_COMPA_vect){
	if(g_callBackPtr != NULL_PTR)
	{
		/* Call the Call Back function */
		(*g_callBackPtr)();
	}
}
#endif

#ifdef Compare_unit_B
ISR(TIMER1_COMPB_vect){
	if(g_callBackPtr != NULL_PTR)
	{
		/* Call the Call Back function */
		(*g_callBackPtr)();
	}
}
#endif

ISR(TIMER1_OVF_vect){
	if(g_callBackPtr != NULL_PTR)
	{
		/* Call the Call Back function */
		(*g_callBackPtr)();
	}
}

void Timer1_init(const Timer1_ConfigType * Config_Ptr){


	/* set initial value for the timer */
	/* N=8
		 * TIME_COMPA=15625
		 * gives interput every 1 sec
		 * */
		TCCR1A=(1<<COM1A0);
		TCCR1B=(1<<WGM12)|(1<<CS11)|(1<<CS10);
		OCR1A=15625;
		TCNT1=0;
		TIMSK=(1<<OCIE1A);
		SREG=(1<<7);

}

void Timer1_setCallBack(void(*a_ptr)(void)){
	g_callBackPtr=a_ptr;
}

void Timer1_deInit(void){
	TIMSK=0;
	OCR1B=0;
	OCR1A=0;
	TCCR1B=0;
	TCCR1B=0;
	TCNT1=0;
}
